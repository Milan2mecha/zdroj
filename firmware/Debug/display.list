
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f74  0800dac0  0800dac0  0001dac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea34  0800ea34  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea34  0800ea34  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea34  0800ea34  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea34  0800ea34  0001ea34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800ea3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e4  2000025c  0800ec98  0002025c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c40  0800ec98  00021c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4c1  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402e  00000000  00000000  0003e746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00042778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00043d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd81  00000000  00000000  00045188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b29a  00000000  00000000  00060f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095873  00000000  00000000  0007c1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00111a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006064  00000000  00000000  00111a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000025c 	.word	0x2000025c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800daa8 	.word	0x0800daa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000260 	.word	0x20000260
 800014c:	0800daa8 	.word	0x0800daa8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <start>:
//chlazení
uint16_t ventilatorper = 0;  //výkon ventilátoru v %
uint8_t ventilatorhyst = 0;	//hystereze ventilatoru
//start
void start()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80010b4:	f002 fcc4 	bl	8003a40 <SSD1306_Clear>
	SSD1306_GotoXY (25,25);
 80010b8:	2119      	movs	r1, #25
 80010ba:	2019      	movs	r0, #25
 80010bc:	f002 fb0a 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("zdrojOS", &Font_11x18, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	490c      	ldr	r1, [pc, #48]	; (80010f4 <start+0x44>)
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <start+0x48>)
 80010c6:	f002 fb9b 	bl	8003800 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80010ca:	f002 fa5f 	bl	800358c <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010d2:	f002 ff93 	bl	8003ffc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <start+0x4c>)
 80010de:	f004 f88a 	bl	80051f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <start+0x4c>)
 80010ea:	f004 f884 	bl	80051f6 <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000
 80010f8:	0800dac0 	.word	0x0800dac0
 80010fc:	40010800 	.word	0x40010800

08001100 <read_ser>:

//USB
uint8_t loopcount =0;
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
void read_ser()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
	char u_char[5];
	for(int i = 0; i<4; i++){
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e00c      	b.n	8001126 <read_ser+0x26>
		u_char[i] = buffer_usb[i+1];
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <read_ser+0xb8>)
 8001112:	5cd1      	ldrb	r1, [r2, r3]
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<4; i++){
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b03      	cmp	r3, #3
 800112a:	ddef      	ble.n	800110c <read_ser+0xc>
	}
	u_char[4] = '\0';
 800112c:	2300      	movs	r3, #0
 800112e:	733b      	strb	r3, [r7, #12]
	setvoltage = atoi(u_char);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f00c f995 	bl	800d464 <atoi>
 800113a:	4603      	mov	r3, r0
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fd7d 	bl	8000c3c <__aeabi_i2f>
 8001142:	4603      	mov	r3, r0
 8001144:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <read_ser+0xbc>)
 8001146:	6013      	str	r3, [r2, #0]
	setvoltage = setvoltage/100;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <read_ser+0xbc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	491c      	ldr	r1, [pc, #112]	; (80011c0 <read_ser+0xc0>)
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe7c 	bl	8000e4c <__aeabi_fdiv>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <read_ser+0xbc>)
 800115a:	601a      	str	r2, [r3, #0]

	char i_char[5];
	for(int i = 0; i<4; i++){
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	e00b      	b.n	800117a <read_ser+0x7a>
		i_char[i] = buffer_usb[i+6];
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	3306      	adds	r3, #6
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <read_ser+0xb8>)
 8001168:	5cd1      	ldrb	r1, [r2, r3]
 800116a:	463a      	mov	r2, r7
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4413      	add	r3, r2
 8001170:	460a      	mov	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<4; i++){
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	3301      	adds	r3, #1
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b03      	cmp	r3, #3
 800117e:	ddf0      	ble.n	8001162 <read_ser+0x62>
	}
	i_char[4] = '\0';
 8001180:	2300      	movs	r3, #0
 8001182:	713b      	strb	r3, [r7, #4]
	setcurrent = atoi(i_char);
 8001184:	463b      	mov	r3, r7
 8001186:	4618      	mov	r0, r3
 8001188:	f00c f96c 	bl	800d464 <atoi>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fd54 	bl	8000c3c <__aeabi_i2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <read_ser+0xc4>)
 8001198:	6013      	str	r3, [r2, #0]
	setcurrent = setcurrent/100;
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <read_ser+0xc4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <read_ser+0xc0>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe53 	bl	8000e4c <__aeabi_fdiv>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <read_ser+0xc4>)
 80011ac:	601a      	str	r2, [r3, #0]

}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000c58 	.word	0x20000c58
 80011bc:	20000290 	.word	0x20000290
 80011c0:	42c80000 	.word	0x42c80000
 80011c4:	20000294 	.word	0x20000294

080011c8 <create_mess>:
void create_mess(float v, float c, uint8_t cvcc, uint8_t err, float teplota, uint16_t vent)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b090      	sub	sp, #64	; 0x40
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	4613      	mov	r3, r2
 80011dc:	71bb      	strb	r3, [r7, #6]
	//převod float napětí
	v = v*100;
 80011de:	49a9      	ldr	r1, [pc, #676]	; (8001484 <create_mess+0x2bc>)
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff fd7f 	bl	8000ce4 <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	60fb      	str	r3, [r7, #12]
	char vs[5];
	itoa((uint16_t)v, vs, 10);
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f7ff ff40 	bl	8001070 <__aeabi_f2uiz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	220a      	movs	r2, #10
 80011fc:	4619      	mov	r1, r3
 80011fe:	f00c f977 	bl	800d4f0 <itoa>
	if(v<10){
 8001202:	49a1      	ldr	r1, [pc, #644]	; (8001488 <create_mess+0x2c0>)
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff ff0b 	bl	8001020 <__aeabi_fcmplt>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00d      	beq.n	800122c <create_mess+0x64>
		message[1] = '0';
 8001210:	4b9e      	ldr	r3, [pc, #632]	; (800148c <create_mess+0x2c4>)
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	705a      	strb	r2, [r3, #1]
		message[2] = '0';
 8001216:	4b9d      	ldr	r3, [pc, #628]	; (800148c <create_mess+0x2c4>)
 8001218:	2230      	movs	r2, #48	; 0x30
 800121a:	709a      	strb	r2, [r3, #2]
		message[3] = '0';
 800121c:	4b9b      	ldr	r3, [pc, #620]	; (800148c <create_mess+0x2c4>)
 800121e:	2230      	movs	r2, #48	; 0x30
 8001220:	70da      	strb	r2, [r3, #3]
		message[4] = vs[0];
 8001222:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001226:	4b99      	ldr	r3, [pc, #612]	; (800148c <create_mess+0x2c4>)
 8001228:	711a      	strb	r2, [r3, #4]
 800122a:	e051      	b.n	80012d0 <create_mess+0x108>
	}else if(v<100){
 800122c:	4995      	ldr	r1, [pc, #596]	; (8001484 <create_mess+0x2bc>)
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fef6 	bl	8001020 <__aeabi_fcmplt>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d018      	beq.n	800126c <create_mess+0xa4>
		for(int i = 0; i<2; i++){
 800123a:	2300      	movs	r3, #0
 800123c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800123e:	e00b      	b.n	8001258 <create_mess+0x90>
			message[i+3] = vs[i];
 8001240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001242:	3303      	adds	r3, #3
 8001244:	f107 0120 	add.w	r1, r7, #32
 8001248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124a:	440a      	add	r2, r1
 800124c:	7811      	ldrb	r1, [r2, #0]
 800124e:	4a8f      	ldr	r2, [pc, #572]	; (800148c <create_mess+0x2c4>)
 8001250:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i<2; i++){
 8001252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001254:	3301      	adds	r3, #1
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	ddf0      	ble.n	8001240 <create_mess+0x78>
		}
		message[2] = '0';
 800125e:	4b8b      	ldr	r3, [pc, #556]	; (800148c <create_mess+0x2c4>)
 8001260:	2230      	movs	r2, #48	; 0x30
 8001262:	709a      	strb	r2, [r3, #2]
		message[1] = '0';
 8001264:	4b89      	ldr	r3, [pc, #548]	; (800148c <create_mess+0x2c4>)
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	705a      	strb	r2, [r3, #1]
 800126a:	e031      	b.n	80012d0 <create_mess+0x108>
	}else if(v<1000){
 800126c:	4988      	ldr	r1, [pc, #544]	; (8001490 <create_mess+0x2c8>)
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fed6 	bl	8001020 <__aeabi_fcmplt>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d015      	beq.n	80012a6 <create_mess+0xde>
		for(int i = 0; i<3; i++){
 800127a:	2300      	movs	r3, #0
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
 800127e:	e00b      	b.n	8001298 <create_mess+0xd0>
			message[i+2] = vs[i];
 8001280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001282:	3302      	adds	r3, #2
 8001284:	f107 0120 	add.w	r1, r7, #32
 8001288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800128a:	440a      	add	r2, r1
 800128c:	7811      	ldrb	r1, [r2, #0]
 800128e:	4a7f      	ldr	r2, [pc, #508]	; (800148c <create_mess+0x2c4>)
 8001290:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i<3; i++){
 8001292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001294:	3301      	adds	r3, #1
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
 8001298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129a:	2b02      	cmp	r3, #2
 800129c:	ddf0      	ble.n	8001280 <create_mess+0xb8>
		}
		message[1] = '0';
 800129e:	4b7b      	ldr	r3, [pc, #492]	; (800148c <create_mess+0x2c4>)
 80012a0:	2230      	movs	r2, #48	; 0x30
 80012a2:	705a      	strb	r2, [r3, #1]
 80012a4:	e014      	b.n	80012d0 <create_mess+0x108>
	}else{
	for(int i = 1; i<5; i++){
 80012a6:	2301      	movs	r3, #1
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
 80012aa:	e00e      	b.n	80012ca <create_mess+0x102>
		message[i] = vs[i-1];
 80012ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80012b4:	4413      	add	r3, r2
 80012b6:	f813 1c20 	ldrb.w	r1, [r3, #-32]
 80012ba:	4a74      	ldr	r2, [pc, #464]	; (800148c <create_mess+0x2c4>)
 80012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012be:	4413      	add	r3, r2
 80012c0:	460a      	mov	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<5; i++){
 80012c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c6:	3301      	adds	r3, #1
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	dded      	ble.n	80012ac <create_mess+0xe4>
	}}
	//převod float proudu
	c = c*100;
 80012d0:	496c      	ldr	r1, [pc, #432]	; (8001484 <create_mess+0x2bc>)
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f7ff fd06 	bl	8000ce4 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	60bb      	str	r3, [r7, #8]
	char cs[5];
	itoa((uint16_t)c, cs, 10);
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f7ff fec7 	bl	8001070 <__aeabi_f2uiz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	220a      	movs	r2, #10
 80012ee:	4619      	mov	r1, r3
 80012f0:	f00c f8fe 	bl	800d4f0 <itoa>
	if(c<10){
 80012f4:	4964      	ldr	r1, [pc, #400]	; (8001488 <create_mess+0x2c0>)
 80012f6:	68b8      	ldr	r0, [r7, #8]
 80012f8:	f7ff fe92 	bl	8001020 <__aeabi_fcmplt>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00c      	beq.n	800131c <create_mess+0x154>
		message[6] = '0';
 8001302:	4b62      	ldr	r3, [pc, #392]	; (800148c <create_mess+0x2c4>)
 8001304:	2230      	movs	r2, #48	; 0x30
 8001306:	719a      	strb	r2, [r3, #6]
		message[7] = '0';
 8001308:	4b60      	ldr	r3, [pc, #384]	; (800148c <create_mess+0x2c4>)
 800130a:	2230      	movs	r2, #48	; 0x30
 800130c:	71da      	strb	r2, [r3, #7]
		message[8] = '0';
 800130e:	4b5f      	ldr	r3, [pc, #380]	; (800148c <create_mess+0x2c4>)
 8001310:	2230      	movs	r2, #48	; 0x30
 8001312:	721a      	strb	r2, [r3, #8]
		message[9] = cs[0];
 8001314:	7e3a      	ldrb	r2, [r7, #24]
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <create_mess+0x2c4>)
 8001318:	725a      	strb	r2, [r3, #9]
 800131a:	e04e      	b.n	80013ba <create_mess+0x1f2>
	}else if(c<100){
 800131c:	4959      	ldr	r1, [pc, #356]	; (8001484 <create_mess+0x2bc>)
 800131e:	68b8      	ldr	r0, [r7, #8]
 8001320:	f7ff fe7e 	bl	8001020 <__aeabi_fcmplt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d018      	beq.n	800135c <create_mess+0x194>
		for(int i = 0; i<2; i++){
 800132a:	2300      	movs	r3, #0
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
 800132e:	e00b      	b.n	8001348 <create_mess+0x180>
			message[i+8] = cs[i];
 8001330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001332:	3308      	adds	r3, #8
 8001334:	f107 0118 	add.w	r1, r7, #24
 8001338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800133a:	440a      	add	r2, r1
 800133c:	7811      	ldrb	r1, [r2, #0]
 800133e:	4a53      	ldr	r2, [pc, #332]	; (800148c <create_mess+0x2c4>)
 8001340:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i<2; i++){
 8001342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001344:	3301      	adds	r3, #1
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
 8001348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134a:	2b01      	cmp	r3, #1
 800134c:	ddf0      	ble.n	8001330 <create_mess+0x168>
		}
		message[7] = '0';
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <create_mess+0x2c4>)
 8001350:	2230      	movs	r2, #48	; 0x30
 8001352:	71da      	strb	r2, [r3, #7]
		message[6] = '0';
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <create_mess+0x2c4>)
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	719a      	strb	r2, [r3, #6]
 800135a:	e02e      	b.n	80013ba <create_mess+0x1f2>
	}else if(c<1000){
 800135c:	494c      	ldr	r1, [pc, #304]	; (8001490 <create_mess+0x2c8>)
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff fe5e 	bl	8001020 <__aeabi_fcmplt>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d015      	beq.n	8001396 <create_mess+0x1ce>
		for(int i = 0; i<3; i++){
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800136e:	e00b      	b.n	8001388 <create_mess+0x1c0>
			message[i+7] = cs[i];
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	3307      	adds	r3, #7
 8001374:	f107 0118 	add.w	r1, r7, #24
 8001378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137a:	440a      	add	r2, r1
 800137c:	7811      	ldrb	r1, [r2, #0]
 800137e:	4a43      	ldr	r2, [pc, #268]	; (800148c <create_mess+0x2c4>)
 8001380:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i<3; i++){
 8001382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001384:	3301      	adds	r3, #1
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	2b02      	cmp	r3, #2
 800138c:	ddf0      	ble.n	8001370 <create_mess+0x1a8>
		}
		message[6] = '0';
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <create_mess+0x2c4>)
 8001390:	2230      	movs	r2, #48	; 0x30
 8001392:	719a      	strb	r2, [r3, #6]
 8001394:	e011      	b.n	80013ba <create_mess+0x1f2>
	}else{
	for(int i = 0; i<4; i++){
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
 800139a:	e00b      	b.n	80013b4 <create_mess+0x1ec>
		message[i+6] = cs[i];
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	3306      	adds	r3, #6
 80013a0:	f107 0118 	add.w	r1, r7, #24
 80013a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a6:	440a      	add	r2, r1
 80013a8:	7811      	ldrb	r1, [r2, #0]
 80013aa:	4a38      	ldr	r2, [pc, #224]	; (800148c <create_mess+0x2c4>)
 80013ac:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i<4; i++){
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	3301      	adds	r3, #1
 80013b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	ddf0      	ble.n	800139c <create_mess+0x1d4>
	}}
	//převod CVCC režimu
	if(cvcc ==1){
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d103      	bne.n	80013c8 <create_mess+0x200>
		message[11] = 'V';
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <create_mess+0x2c4>)
 80013c2:	2256      	movs	r2, #86	; 0x56
 80013c4:	72da      	strb	r2, [r3, #11]
 80013c6:	e002      	b.n	80013ce <create_mess+0x206>
	}else{
		message[11] = 'C';
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <create_mess+0x2c4>)
 80013ca:	2243      	movs	r2, #67	; 0x43
 80013cc:	72da      	strb	r2, [r3, #11]
	}
	//převod float teploty
	teplota = 1000*teplota;
 80013ce:	4930      	ldr	r1, [pc, #192]	; (8001490 <create_mess+0x2c8>)
 80013d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013d2:	f7ff fc87 	bl	8000ce4 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	64bb      	str	r3, [r7, #72]	; 0x48
	char teplotas[4];
	itoa((uint16_t)teplota, teplotas, 10);
 80013da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013dc:	f7ff fe48 	bl	8001070 <__aeabi_f2uiz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	220a      	movs	r2, #10
 80013ec:	4619      	mov	r1, r3
 80013ee:	f00c f87f 	bl	800d4f0 <itoa>
	if(teplota>100){
 80013f2:	4924      	ldr	r1, [pc, #144]	; (8001484 <create_mess+0x2bc>)
 80013f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013f6:	f7ff fe31 	bl	800105c <__aeabi_fcmpgt>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <create_mess+0x24c>
		message[13]=teplotas[0];
 8001400:	7d3a      	ldrb	r2, [r7, #20]
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <create_mess+0x2c4>)
 8001404:	735a      	strb	r2, [r3, #13]
		message[14]=teplotas[1];
 8001406:	7d7a      	ldrb	r2, [r7, #21]
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <create_mess+0x2c4>)
 800140a:	739a      	strb	r2, [r3, #14]
		message[15]=teplotas[2];
 800140c:	7dba      	ldrb	r2, [r7, #22]
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <create_mess+0x2c4>)
 8001410:	73da      	strb	r2, [r3, #15]
 8001412:	e019      	b.n	8001448 <create_mess+0x280>
	}else if(teplota>10){
 8001414:	491c      	ldr	r1, [pc, #112]	; (8001488 <create_mess+0x2c0>)
 8001416:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001418:	f7ff fe20 	bl	800105c <__aeabi_fcmpgt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <create_mess+0x26e>
		message[13]='0';
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <create_mess+0x2c4>)
 8001424:	2230      	movs	r2, #48	; 0x30
 8001426:	735a      	strb	r2, [r3, #13]
		message[14]=teplotas[0];
 8001428:	7d3a      	ldrb	r2, [r7, #20]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <create_mess+0x2c4>)
 800142c:	739a      	strb	r2, [r3, #14]
		message[15]=teplotas[1];
 800142e:	7d7a      	ldrb	r2, [r7, #21]
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <create_mess+0x2c4>)
 8001432:	73da      	strb	r2, [r3, #15]
 8001434:	e008      	b.n	8001448 <create_mess+0x280>
	}else {
		message[13]='0';
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <create_mess+0x2c4>)
 8001438:	2230      	movs	r2, #48	; 0x30
 800143a:	735a      	strb	r2, [r3, #13]
		message[14]='0';
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <create_mess+0x2c4>)
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	739a      	strb	r2, [r3, #14]
		message[15]=teplotas[0];
 8001442:	7d3a      	ldrb	r2, [r7, #20]
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <create_mess+0x2c4>)
 8001446:	73da      	strb	r2, [r3, #15]
	}
	//pokud jede vent na 100% odešle hodnotu 99% (kvůli formátu)
	if(vent == 100)
 8001448:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	d106      	bne.n	800145e <create_mess+0x296>
	{
		message[17] = '9';
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <create_mess+0x2c4>)
 8001452:	2239      	movs	r2, #57	; 0x39
 8001454:	745a      	strb	r2, [r3, #17]
		message[18] = '9';
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <create_mess+0x2c4>)
 8001458:	2239      	movs	r2, #57	; 0x39
 800145a:	749a      	strb	r2, [r3, #18]
 800145c:	e020      	b.n	80014a0 <create_mess+0x2d8>
	}else{
		char vents[3];
		itoa(vent, vents, 10);
 800145e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001462:	f107 0110 	add.w	r1, r7, #16
 8001466:	220a      	movs	r2, #10
 8001468:	4618      	mov	r0, r3
 800146a:	f00c f841 	bl	800d4f0 <itoa>
		if(vent<10){
 800146e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001472:	2b09      	cmp	r3, #9
 8001474:	d80e      	bhi.n	8001494 <create_mess+0x2cc>
			message[17] = '0';
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <create_mess+0x2c4>)
 8001478:	2230      	movs	r2, #48	; 0x30
 800147a:	745a      	strb	r2, [r3, #17]
			message[18] = vents[0];
 800147c:	7c3a      	ldrb	r2, [r7, #16]
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <create_mess+0x2c4>)
 8001480:	749a      	strb	r2, [r3, #18]
 8001482:	e00d      	b.n	80014a0 <create_mess+0x2d8>
 8001484:	42c80000 	.word	0x42c80000
 8001488:	41200000 	.word	0x41200000
 800148c:	2000000c 	.word	0x2000000c
 8001490:	447a0000 	.word	0x447a0000
		}else{
		message[17] = vents[0];
 8001494:	7c3a      	ldrb	r2, [r7, #16]
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <create_mess+0x2f8>)
 8001498:	745a      	strb	r2, [r3, #17]
		message[18] = vents[1];}
 800149a:	7c7a      	ldrb	r2, [r7, #17]
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <create_mess+0x2f8>)
 800149e:	749a      	strb	r2, [r3, #18]
	}
	//errror mess 99==no error
	if(err == 99){
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	2b63      	cmp	r3, #99	; 0x63
 80014a4:	d103      	bne.n	80014ae <create_mess+0x2e6>
		message[20] = 'E';
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <create_mess+0x2f8>)
 80014a8:	2245      	movs	r2, #69	; 0x45
 80014aa:	751a      	strb	r2, [r3, #20]
	}else{
		message[20] = err + '0';
	}
}
 80014ac:	e004      	b.n	80014b8 <create_mess+0x2f0>
		message[20] = err + '0';
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	3330      	adds	r3, #48	; 0x30
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <create_mess+0x2f8>)
 80014b6:	751a      	strb	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	3740      	adds	r7, #64	; 0x40
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000000c 	.word	0x2000000c

080014c4 <error>:

//error
void error(uint8_t event)
{
 80014c4:	b5b0      	push	{r4, r5, r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	4877      	ldr	r0, [pc, #476]	; (80016b4 <error+0x1f0>)
 80014d6:	f003 fe8e 	bl	80051f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e0:	4874      	ldr	r0, [pc, #464]	; (80016b4 <error+0x1f0>)
 80014e2:	f003 fe88 	bl	80051f6 <HAL_GPIO_WritePin>
	SSD1306_Clear();
 80014e6:	f002 faab 	bl	8003a40 <SSD1306_Clear>
	SSD1306_GotoXY (3,3);
 80014ea:	2103      	movs	r1, #3
 80014ec:	2003      	movs	r0, #3
 80014ee:	f002 f8f1 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("error:", &Font_11x18, 1);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4970      	ldr	r1, [pc, #448]	; (80016b8 <error+0x1f4>)
 80014f6:	4871      	ldr	r0, [pc, #452]	; (80016bc <error+0x1f8>)
 80014f8:	f002 f982 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (3,25);
 80014fc:	2119      	movs	r1, #25
 80014fe:	2003      	movs	r0, #3
 8001500:	f002 f8e8 	bl	80036d4 <SSD1306_GotoXY>
	create_mess(Uzobrazene, Izobrazene, Mzobrazene,event, teplota, ventilatorper);
 8001504:	4b6e      	ldr	r3, [pc, #440]	; (80016c0 <error+0x1fc>)
 8001506:	681c      	ldr	r4, [r3, #0]
 8001508:	4b6e      	ldr	r3, [pc, #440]	; (80016c4 <error+0x200>)
 800150a:	681d      	ldr	r5, [r3, #0]
 800150c:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <error+0x204>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fdad 	bl	8001070 <__aeabi_f2uiz>
 8001516:	4603      	mov	r3, r0
 8001518:	b2d9      	uxtb	r1, r3
 800151a:	4b6c      	ldr	r3, [pc, #432]	; (80016cc <error+0x208>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a6c      	ldr	r2, [pc, #432]	; (80016d0 <error+0x20c>)
 8001520:	8812      	ldrh	r2, [r2, #0]
 8001522:	79f8      	ldrb	r0, [r7, #7]
 8001524:	9201      	str	r2, [sp, #4]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	460a      	mov	r2, r1
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fe4a 	bl	80011c8 <create_mess>
	int pokusy = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
	while((CDC_Transmit_FS(message, len) != USBD_OK)&&(pokusy<100)){
 8001538:	e002      	b.n	8001540 <error+0x7c>
		  pokusy++;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
	while((CDC_Transmit_FS(message, len) != USBD_OK)&&(pokusy<100)){
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <error+0x210>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4864      	ldr	r0, [pc, #400]	; (80016d8 <error+0x214>)
 8001548:	f00b fbae 	bl	800cca8 <CDC_Transmit_FS>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <error+0x94>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b63      	cmp	r3, #99	; 0x63
 8001556:	ddf0      	ble.n	800153a <error+0x76>
	}
	switch (event) {
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b04      	cmp	r3, #4
 800155c:	f200 80a4 	bhi.w	80016a8 <error+0x1e4>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <error+0xa4>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	0800157d 	.word	0x0800157d
 800156c:	080015b9 	.word	0x080015b9
 8001570:	080015f5 	.word	0x080015f5
 8001574:	08001631 	.word	0x08001631
 8001578:	0800166d 	.word	0x0800166d
		case 0:
			SSD1306_Puts("mereni tep.", &Font_11x18, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	494e      	ldr	r1, [pc, #312]	; (80016b8 <error+0x1f4>)
 8001580:	4856      	ldr	r0, [pc, #344]	; (80016dc <error+0x218>)
 8001582:	f002 f93d 	bl	8003800 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 8001586:	212d      	movs	r1, #45	; 0x2d
 8001588:	2003      	movs	r0, #3
 800158a:	f002 f8a3 	bl	80036d4 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	4949      	ldr	r1, [pc, #292]	; (80016b8 <error+0x1f4>)
 8001592:	4853      	ldr	r0, [pc, #332]	; (80016e0 <error+0x21c>)
 8001594:	f002 f934 	bl	8003800 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001598:	f001 fff8 	bl	800358c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 800159c:	e002      	b.n	80015a4 <error+0xe0>
			{
				HAL_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f002 fd2c 	bl	8003ffc <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 80015a4:	2110      	movs	r1, #16
 80015a6:	4843      	ldr	r0, [pc, #268]	; (80016b4 <error+0x1f0>)
 80015a8:	f003 fe0e 	bl	80051c8 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f5      	bne.n	800159e <error+0xda>
			}
			start();
 80015b2:	f7ff fd7d 	bl	80010b0 <start>
			break;
 80015b6:	e078      	b.n	80016aa <error+0x1e6>
		case 1:
			SSD1306_Puts("prehrati", &Font_11x18, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	493f      	ldr	r1, [pc, #252]	; (80016b8 <error+0x1f4>)
 80015bc:	4849      	ldr	r0, [pc, #292]	; (80016e4 <error+0x220>)
 80015be:	f002 f91f 	bl	8003800 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 80015c2:	212d      	movs	r1, #45	; 0x2d
 80015c4:	2003      	movs	r0, #3
 80015c6:	f002 f885 	bl	80036d4 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	493a      	ldr	r1, [pc, #232]	; (80016b8 <error+0x1f4>)
 80015ce:	4844      	ldr	r0, [pc, #272]	; (80016e0 <error+0x21c>)
 80015d0:	f002 f916 	bl	8003800 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80015d4:	f001 ffda 	bl	800358c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 80015d8:	e002      	b.n	80015e0 <error+0x11c>
			{
				HAL_Delay(1);
 80015da:	2001      	movs	r0, #1
 80015dc:	f002 fd0e 	bl	8003ffc <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 80015e0:	2110      	movs	r1, #16
 80015e2:	4834      	ldr	r0, [pc, #208]	; (80016b4 <error+0x1f0>)
 80015e4:	f003 fdf0 	bl	80051c8 <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f5      	bne.n	80015da <error+0x116>
			}
			start();
 80015ee:	f7ff fd5f 	bl	80010b0 <start>
			break;
 80015f2:	e05a      	b.n	80016aa <error+0x1e6>
		case 2:
			SSD1306_Puts("chyba U0", &Font_11x18, 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	4930      	ldr	r1, [pc, #192]	; (80016b8 <error+0x1f4>)
 80015f8:	483b      	ldr	r0, [pc, #236]	; (80016e8 <error+0x224>)
 80015fa:	f002 f901 	bl	8003800 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 80015fe:	212d      	movs	r1, #45	; 0x2d
 8001600:	2003      	movs	r0, #3
 8001602:	f002 f867 	bl	80036d4 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	492b      	ldr	r1, [pc, #172]	; (80016b8 <error+0x1f4>)
 800160a:	4835      	ldr	r0, [pc, #212]	; (80016e0 <error+0x21c>)
 800160c:	f002 f8f8 	bl	8003800 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001610:	f001 ffbc 	bl	800358c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 8001614:	e002      	b.n	800161c <error+0x158>
			{
				HAL_Delay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f002 fcf0 	bl	8003ffc <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 800161c:	2110      	movs	r1, #16
 800161e:	4825      	ldr	r0, [pc, #148]	; (80016b4 <error+0x1f0>)
 8001620:	f003 fdd2 	bl	80051c8 <HAL_GPIO_ReadPin>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f5      	bne.n	8001616 <error+0x152>
			}
			start();
 800162a:	f7ff fd41 	bl	80010b0 <start>
			break;
 800162e:	e03c      	b.n	80016aa <error+0x1e6>
		case 3:
			SSD1306_Puts("chyba U1", &Font_11x18, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	4921      	ldr	r1, [pc, #132]	; (80016b8 <error+0x1f4>)
 8001634:	482d      	ldr	r0, [pc, #180]	; (80016ec <error+0x228>)
 8001636:	f002 f8e3 	bl	8003800 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 800163a:	212d      	movs	r1, #45	; 0x2d
 800163c:	2003      	movs	r0, #3
 800163e:	f002 f849 	bl	80036d4 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	491c      	ldr	r1, [pc, #112]	; (80016b8 <error+0x1f4>)
 8001646:	4826      	ldr	r0, [pc, #152]	; (80016e0 <error+0x21c>)
 8001648:	f002 f8da 	bl	8003800 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800164c:	f001 ff9e 	bl	800358c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 8001650:	e002      	b.n	8001658 <error+0x194>
			{
				HAL_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f002 fcd2 	bl	8003ffc <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 8001658:	2110      	movs	r1, #16
 800165a:	4816      	ldr	r0, [pc, #88]	; (80016b4 <error+0x1f0>)
 800165c:	f003 fdb4 	bl	80051c8 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f5      	bne.n	8001652 <error+0x18e>
			}
			start();
 8001666:	f7ff fd23 	bl	80010b0 <start>
			break;
 800166a:	e01e      	b.n	80016aa <error+0x1e6>
		case 4:
			SSD1306_Puts("chyba U3", &Font_11x18, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	4912      	ldr	r1, [pc, #72]	; (80016b8 <error+0x1f4>)
 8001670:	481f      	ldr	r0, [pc, #124]	; (80016f0 <error+0x22c>)
 8001672:	f002 f8c5 	bl	8003800 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 8001676:	212d      	movs	r1, #45	; 0x2d
 8001678:	2003      	movs	r0, #3
 800167a:	f002 f82b 	bl	80036d4 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 800167e:	2201      	movs	r2, #1
 8001680:	490d      	ldr	r1, [pc, #52]	; (80016b8 <error+0x1f4>)
 8001682:	4817      	ldr	r0, [pc, #92]	; (80016e0 <error+0x21c>)
 8001684:	f002 f8bc 	bl	8003800 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001688:	f001 ff80 	bl	800358c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 800168c:	e002      	b.n	8001694 <error+0x1d0>
			{
				HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f002 fcb4 	bl	8003ffc <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 8001694:	2110      	movs	r1, #16
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <error+0x1f0>)
 8001698:	f003 fd96 	bl	80051c8 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f5      	bne.n	800168e <error+0x1ca>
			}
			start();
 80016a2:	f7ff fd05 	bl	80010b0 <start>
			break;
 80016a6:	e000      	b.n	80016aa <error+0x1e6>
		default:
			break;
 80016a8:	bf00      	nop

	}
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdb0      	pop	{r4, r5, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40010800 	.word	0x40010800
 80016b8:	20000000 	.word	0x20000000
 80016bc:	0800dac8 	.word	0x0800dac8
 80016c0:	20000278 	.word	0x20000278
 80016c4:	2000027c 	.word	0x2000027c
 80016c8:	20000280 	.word	0x20000280
 80016cc:	20000284 	.word	0x20000284
 80016d0:	20000298 	.word	0x20000298
 80016d4:	20000022 	.word	0x20000022
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	0800dad0 	.word	0x0800dad0
 80016e0:	0800dadc 	.word	0x0800dadc
 80016e4:	0800dae8 	.word	0x0800dae8
 80016e8:	0800daf4 	.word	0x0800daf4
 80016ec:	0800db00 	.word	0x0800db00
 80016f0:	0800db0c 	.word	0x0800db0c

080016f4 <readbuttons>:
//vstupy

void readbuttons()	//pulling tlačítek
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	if(debounce[0] == 0)
 80016f8:	4b7d      	ldr	r3, [pc, #500]	; (80018f0 <readbuttons+0x1fc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d13c      	bne.n	800177a <readbuttons+0x86>
	{
	  tlacitko[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8001700:	2110      	movs	r1, #16
 8001702:	487c      	ldr	r0, [pc, #496]	; (80018f4 <readbuttons+0x200>)
 8001704:	f003 fd60 	bl	80051c8 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <readbuttons+0x204>)
 800170e:	701a      	strb	r2, [r3, #0]
	  if(tlacitko[0] != poslednistav[0])
 8001710:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <readbuttons+0x204>)
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	4b79      	ldr	r3, [pc, #484]	; (80018fc <readbuttons+0x208>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d02e      	beq.n	800177a <readbuttons+0x86>
	  {
		  poslednistav[0] = tlacitko[0];
 800171c:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <readbuttons+0x204>)
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	4b76      	ldr	r3, [pc, #472]	; (80018fc <readbuttons+0x208>)
 8001722:	701a      	strb	r2, [r3, #0]
		  if(tlacitko[0] == 0)
 8001724:	4b74      	ldr	r3, [pc, #464]	; (80018f8 <readbuttons+0x204>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d126      	bne.n	800177a <readbuttons+0x86>
		  {
			setmodeflag = 500;
 800172c:	4b74      	ldr	r3, [pc, #464]	; (8001900 <readbuttons+0x20c>)
 800172e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001732:	801a      	strh	r2, [r3, #0]
			debounce[0] = 10;
 8001734:	4b6e      	ldr	r3, [pc, #440]	; (80018f0 <readbuttons+0x1fc>)
 8001736:	220a      	movs	r2, #10
 8001738:	701a      	strb	r2, [r3, #0]
			if(cursor == 0)
 800173a:	4b72      	ldr	r3, [pc, #456]	; (8001904 <readbuttons+0x210>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <readbuttons+0x56>
			{
				  cursor = 0x04;
 8001742:	4b70      	ldr	r3, [pc, #448]	; (8001904 <readbuttons+0x210>)
 8001744:	2204      	movs	r2, #4
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e017      	b.n	800177a <readbuttons+0x86>
			}else{
			  if(cursor>0x08)
 800174a:	4b6e      	ldr	r3, [pc, #440]	; (8001904 <readbuttons+0x210>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b08      	cmp	r3, #8
 8001750:	d905      	bls.n	800175e <readbuttons+0x6a>
			  {
				  cursor = 0;
 8001752:	4b6c      	ldr	r3, [pc, #432]	; (8001904 <readbuttons+0x210>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
				  setmodeflag = 10;
 8001758:	4b69      	ldr	r3, [pc, #420]	; (8001900 <readbuttons+0x20c>)
 800175a:	220a      	movs	r2, #10
 800175c:	801a      	strh	r2, [r3, #0]
			  }
			  if((cursor>0)&&(cursor<0x10))
 800175e:	4b69      	ldr	r3, [pc, #420]	; (8001904 <readbuttons+0x210>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <readbuttons+0x86>
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <readbuttons+0x210>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	d805      	bhi.n	800177a <readbuttons+0x86>
			  {
				  cursor = (cursor<<4);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <readbuttons+0x210>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <readbuttons+0x210>)
 8001778:	701a      	strb	r2, [r3, #0]
			  }
			}
		 }
	  }
	}
	if(debounce[1] == 0)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <readbuttons+0x1fc>)
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d139      	bne.n	80017f6 <readbuttons+0x102>
	{
	  tlacitko[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001782:	2120      	movs	r1, #32
 8001784:	485b      	ldr	r0, [pc, #364]	; (80018f4 <readbuttons+0x200>)
 8001786:	f003 fd1f 	bl	80051c8 <HAL_GPIO_ReadPin>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <readbuttons+0x204>)
 8001790:	705a      	strb	r2, [r3, #1]
	  if(tlacitko[1] != poslednistav[1])
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <readbuttons+0x204>)
 8001794:	785a      	ldrb	r2, [r3, #1]
 8001796:	4b59      	ldr	r3, [pc, #356]	; (80018fc <readbuttons+0x208>)
 8001798:	785b      	ldrb	r3, [r3, #1]
 800179a:	429a      	cmp	r2, r3
 800179c:	d02b      	beq.n	80017f6 <readbuttons+0x102>
	  {
		  poslednistav[1] = tlacitko[1];
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <readbuttons+0x204>)
 80017a0:	785a      	ldrb	r2, [r3, #1]
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <readbuttons+0x208>)
 80017a4:	705a      	strb	r2, [r3, #1]
		  if(tlacitko[1] == 0)
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <readbuttons+0x204>)
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d123      	bne.n	80017f6 <readbuttons+0x102>
		  {
			  setmodeflag = 500;
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <readbuttons+0x20c>)
 80017b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017b4:	801a      	strh	r2, [r3, #0]
			  debounce[1] = 10;
 80017b6:	4b4e      	ldr	r3, [pc, #312]	; (80018f0 <readbuttons+0x1fc>)
 80017b8:	220a      	movs	r2, #10
 80017ba:	705a      	strb	r2, [r3, #1]
				if(cursor == 0)
 80017bc:	4b51      	ldr	r3, [pc, #324]	; (8001904 <readbuttons+0x210>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <readbuttons+0xd8>
				{
					  cursor = 0x04;
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <readbuttons+0x210>)
 80017c6:	2204      	movs	r2, #4
 80017c8:	701a      	strb	r2, [r3, #0]
 80017ca:	e015      	b.n	80017f8 <readbuttons+0x104>
				}
				else
				{
					switch (cursor) {
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <readbuttons+0x210>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d005      	beq.n	80017e0 <readbuttons+0xec>
 80017d4:	2b80      	cmp	r3, #128	; 0x80
 80017d6:	d107      	bne.n	80017e8 <readbuttons+0xf4>
						case 0x80:
							cursor = 0x10;
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <readbuttons+0x210>)
 80017da:	2210      	movs	r2, #16
 80017dc:	701a      	strb	r2, [r3, #0]
							break;
 80017de:	e00b      	b.n	80017f8 <readbuttons+0x104>
						case 0x08:
							cursor = 0x01;
 80017e0:	4b48      	ldr	r3, [pc, #288]	; (8001904 <readbuttons+0x210>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
							break;
 80017e6:	e007      	b.n	80017f8 <readbuttons+0x104>
						default:
							cursor *= 2;
 80017e8:	4b46      	ldr	r3, [pc, #280]	; (8001904 <readbuttons+0x210>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <readbuttons+0x210>)
 80017f2:	701a      	strb	r2, [r3, #0]
							break;
 80017f4:	e000      	b.n	80017f8 <readbuttons+0x104>
					}
				}
 80017f6:	bf00      	nop
		  }
	  }
	}
	if(debounce[2] == 0)
 80017f8:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <readbuttons+0x1fc>)
 80017fa:	789b      	ldrb	r3, [r3, #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d13a      	bne.n	8001876 <readbuttons+0x182>
	{
	  tlacitko[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8001800:	2140      	movs	r1, #64	; 0x40
 8001802:	483c      	ldr	r0, [pc, #240]	; (80018f4 <readbuttons+0x200>)
 8001804:	f003 fce0 	bl	80051c8 <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <readbuttons+0x204>)
 800180e:	709a      	strb	r2, [r3, #2]
	  if(tlacitko[2] != poslednistav[2])
 8001810:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <readbuttons+0x204>)
 8001812:	789a      	ldrb	r2, [r3, #2]
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <readbuttons+0x208>)
 8001816:	789b      	ldrb	r3, [r3, #2]
 8001818:	429a      	cmp	r2, r3
 800181a:	d02c      	beq.n	8001876 <readbuttons+0x182>
	  {
		  poslednistav[2] = tlacitko[2];
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <readbuttons+0x204>)
 800181e:	789a      	ldrb	r2, [r3, #2]
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <readbuttons+0x208>)
 8001822:	709a      	strb	r2, [r3, #2]
		  if(tlacitko[2] == 0)
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <readbuttons+0x204>)
 8001826:	789b      	ldrb	r3, [r3, #2]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d124      	bne.n	8001876 <readbuttons+0x182>
		  {
			setmodeflag = 500;
 800182c:	4b34      	ldr	r3, [pc, #208]	; (8001900 <readbuttons+0x20c>)
 800182e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001832:	801a      	strh	r2, [r3, #0]
			debounce[2] = 10;
 8001834:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <readbuttons+0x1fc>)
 8001836:	220a      	movs	r2, #10
 8001838:	709a      	strb	r2, [r3, #2]
			if(cursor == 0)
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <readbuttons+0x210>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <readbuttons+0x156>
			{
				  cursor = 0x04;
 8001842:	4b30      	ldr	r3, [pc, #192]	; (8001904 <readbuttons+0x210>)
 8001844:	2204      	movs	r2, #4
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e016      	b.n	8001878 <readbuttons+0x184>
			}
			else
			{
				switch (cursor) {
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <readbuttons+0x210>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d002      	beq.n	8001858 <readbuttons+0x164>
 8001852:	2b10      	cmp	r3, #16
 8001854:	d004      	beq.n	8001860 <readbuttons+0x16c>
 8001856:	e007      	b.n	8001868 <readbuttons+0x174>
					case 0x01:
						cursor = 0x08;
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <readbuttons+0x210>)
 800185a:	2208      	movs	r2, #8
 800185c:	701a      	strb	r2, [r3, #0]
						break;
 800185e:	e00b      	b.n	8001878 <readbuttons+0x184>
					case 0x10:
						cursor = 0x80;
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <readbuttons+0x210>)
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	701a      	strb	r2, [r3, #0]
						break;
 8001866:	e007      	b.n	8001878 <readbuttons+0x184>
					default:
						cursor = cursor>>1;
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <readbuttons+0x210>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b24      	ldr	r3, [pc, #144]	; (8001904 <readbuttons+0x210>)
 8001872:	701a      	strb	r2, [r3, #0]
						break;
 8001874:	e000      	b.n	8001878 <readbuttons+0x184>
				}

			}
 8001876:	bf00      	nop
		  }
	  }
	}
	if(debounce[3] == 0)
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <readbuttons+0x1fc>)
 800187a:	78db      	ldrb	r3, [r3, #3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d134      	bne.n	80018ea <readbuttons+0x1f6>
	{
	  tlacitko[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <readbuttons+0x200>)
 8001884:	f003 fca0 	bl	80051c8 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <readbuttons+0x204>)
 800188e:	70da      	strb	r2, [r3, #3]
	  if(tlacitko[3] != poslednistav[3])
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <readbuttons+0x204>)
 8001892:	78da      	ldrb	r2, [r3, #3]
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <readbuttons+0x208>)
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	429a      	cmp	r2, r3
 800189a:	d026      	beq.n	80018ea <readbuttons+0x1f6>
	  {
		  poslednistav[3] = tlacitko[3];
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <readbuttons+0x204>)
 800189e:	78da      	ldrb	r2, [r3, #3]
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <readbuttons+0x208>)
 80018a2:	70da      	strb	r2, [r3, #3]
		  if(tlacitko[3] == 0)
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <readbuttons+0x204>)
 80018a6:	78db      	ldrb	r3, [r3, #3]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d11e      	bne.n	80018ea <readbuttons+0x1f6>
		  {
			  if((setmodeflag > 0)||(menupage>0))
 80018ac:	4b14      	ldr	r3, [pc, #80]	; (8001900 <readbuttons+0x20c>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <readbuttons+0x1c8>
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <readbuttons+0x214>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <readbuttons+0x1d4>
			  {
				  menupage++;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <readbuttons+0x214>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <readbuttons+0x214>)
 80018c6:	701a      	strb	r2, [r3, #0]
			  }
			  setmodeflag = 500;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <readbuttons+0x20c>)
 80018ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018ce:	801a      	strh	r2, [r3, #0]
			  debounce[3] = 10;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <readbuttons+0x1fc>)
 80018d2:	220a      	movs	r2, #10
 80018d4:	70da      	strb	r2, [r3, #3]
			  if(menupage>2)
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <readbuttons+0x214>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d905      	bls.n	80018ea <readbuttons+0x1f6>
			  {
				  menupage = 0;
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <readbuttons+0x214>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
				  setmodeflag = 10;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <readbuttons+0x20c>)
 80018e6:	220a      	movs	r2, #10
 80018e8:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	}

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000974 	.word	0x20000974
 80018f4:	40010800 	.word	0x40010800
 80018f8:	200008c8 	.word	0x200008c8
 80018fc:	20000c64 	.word	0x20000c64
 8001900:	2000028a 	.word	0x2000028a
 8001904:	2000028c 	.word	0x2000028c
 8001908:	2000028d 	.word	0x2000028d

0800190c <trimm>:

//pomocné převodní funkce

char* trimm(float f)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	static char trimmed [4];

	f *= 100;
 8001914:	4929      	ldr	r1, [pc, #164]	; (80019bc <trimm+0xb0>)
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff f9e4 	bl	8000ce4 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	607b      	str	r3, [r7, #4]
	uint16_t g = f;
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff fba5 	bl	8001070 <__aeabi_f2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	81bb      	strh	r3, [r7, #12]
	itoa(g, trimmed, 10);
 800192a:	89bb      	ldrh	r3, [r7, #12]
 800192c:	220a      	movs	r2, #10
 800192e:	4924      	ldr	r1, [pc, #144]	; (80019c0 <trimm+0xb4>)
 8001930:	4618      	mov	r0, r3
 8001932:	f00b fddd 	bl	800d4f0 <itoa>

	if(g<10)
 8001936:	89bb      	ldrh	r3, [r7, #12]
 8001938:	2b09      	cmp	r3, #9
 800193a:	d80c      	bhi.n	8001956 <trimm+0x4a>
	{
		trimmed[3] = trimmed[0];
 800193c:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <trimm+0xb4>)
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <trimm+0xb4>)
 8001942:	70da      	strb	r2, [r3, #3]
		trimmed[2] = '0';
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <trimm+0xb4>)
 8001946:	2230      	movs	r2, #48	; 0x30
 8001948:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <trimm+0xb4>)
 800194c:	2230      	movs	r2, #48	; 0x30
 800194e:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <trimm+0xb4>)
 8001952:	2220      	movs	r2, #32
 8001954:	701a      	strb	r2, [r3, #0]


	}
	if((g<100)&&(g>9))
 8001956:	89bb      	ldrh	r3, [r7, #12]
 8001958:	2b63      	cmp	r3, #99	; 0x63
 800195a:	d810      	bhi.n	800197e <trimm+0x72>
 800195c:	89bb      	ldrh	r3, [r7, #12]
 800195e:	2b09      	cmp	r3, #9
 8001960:	d90d      	bls.n	800197e <trimm+0x72>
	{
		trimmed[3] = trimmed[1];
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <trimm+0xb4>)
 8001964:	785a      	ldrb	r2, [r3, #1]
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <trimm+0xb4>)
 8001968:	70da      	strb	r2, [r3, #3]
		trimmed[2] = trimmed[0];
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <trimm+0xb4>)
 800196c:	781a      	ldrb	r2, [r3, #0]
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <trimm+0xb4>)
 8001970:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <trimm+0xb4>)
 8001974:	2230      	movs	r2, #48	; 0x30
 8001976:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <trimm+0xb4>)
 800197a:	2220      	movs	r2, #32
 800197c:	701a      	strb	r2, [r3, #0]

	}
	if((g<1000)&&(g>99))
 800197e:	89bb      	ldrh	r3, [r7, #12]
 8001980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001984:	d215      	bcs.n	80019b2 <trimm+0xa6>
 8001986:	89bb      	ldrh	r3, [r7, #12]
 8001988:	2b63      	cmp	r3, #99	; 0x63
 800198a:	d912      	bls.n	80019b2 <trimm+0xa6>
	{
		for(uint8_t i = 3; i>0; i--)
 800198c:	2303      	movs	r3, #3
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e009      	b.n	80019a6 <trimm+0x9a>
		{
			trimmed[i] = trimmed[i-1];
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	1e5a      	subs	r2, r3, #1
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	4909      	ldr	r1, [pc, #36]	; (80019c0 <trimm+0xb4>)
 800199a:	5c89      	ldrb	r1, [r1, r2]
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <trimm+0xb4>)
 800199e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 3; i>0; i--)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f2      	bne.n	8001992 <trimm+0x86>
		}
		trimmed[0] = ' ';
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <trimm+0xb4>)
 80019ae:	2220      	movs	r2, #32
 80019b0:	701a      	strb	r2, [r3, #0]

	}

	return trimmed;
 80019b2:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <trimm+0xb4>)
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	42c80000 	.word	0x42c80000
 80019c0:	2000029c 	.word	0x2000029c
 80019c4:	00000000 	.word	0x00000000

080019c8 <ADCtoVoltage>:
float ADCtoVoltage(uint16_t ADCvalue)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
	float voltage = 0;
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
	if(ADCvalue >= 161)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2ba0      	cmp	r3, #160	; 0xa0
 80019dc:	d91a      	bls.n	8001a14 <ADCtoVoltage+0x4c>
	{
		voltage = (ADCvalue/1226.9938)+0.0693;
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd07 	bl	80003f4 <__aeabi_i2d>
 80019e6:	a314      	add	r3, pc, #80	; (adr r3, 8001a38 <ADCtoVoltage+0x70>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe96 	bl	800071c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a311      	add	r3, pc, #68	; (adr r3, 8001a40 <ADCtoVoltage+0x78>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fbad 	bl	800015c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f80d 	bl	8000a28 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e00b      	b.n	8001a2c <ADCtoVoltage+0x64>
	}
	else
	{
		voltage = ADCvalue;
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f90c 	bl	8000c34 <__aeabi_ui2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]
		voltage = voltage/365;
 8001a20:	4909      	ldr	r1, [pc, #36]	; (8001a48 <ADCtoVoltage+0x80>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fa12 	bl	8000e4c <__aeabi_fdiv>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
	}
	return voltage;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	a6b50b0f 	.word	0xa6b50b0f
 8001a3c:	40932bf9 	.word	0x40932bf9
 8001a40:	119ce076 	.word	0x119ce076
 8001a44:	3fb1bda5 	.word	0x3fb1bda5
 8001a48:	43b68000 	.word	0x43b68000
 8001a4c:	00000000 	.word	0x00000000

08001a50 <Voltagetoteperatur>:
float Voltagetoteperatur(float napeti)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	  napeti = (Uadc/ napeti)-1;
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <Voltagetoteperatur+0xb8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f9f4 	bl	8000e4c <__aeabi_fdiv>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f830 	bl	8000ad0 <__aeabi_fsub>
 8001a70:	4603      	mov	r3, r0
 8001a72:	607b      	str	r3, [r7, #4]
	 napeti = 1/(((log(napeti))/3380)+(1/298.5));
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7fe fccf 	bl	8000418 <__aeabi_f2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f00b fe1f 	bl	800d6c4 <log>
 8001a86:	a31a      	add	r3, pc, #104	; (adr r3, 8001af0 <Voltagetoteperatur+0xa0>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fe46 	bl	800071c <__aeabi_ddiv>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	a317      	add	r3, pc, #92	; (adr r3, 8001af8 <Voltagetoteperatur+0xa8>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fb5d 	bl	800015c <__adddf3>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	4918      	ldr	r1, [pc, #96]	; (8001b0c <Voltagetoteperatur+0xbc>)
 8001aac:	f7fe fe36 	bl	800071c <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe ffb6 	bl	8000a28 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	607b      	str	r3, [r7, #4]
	  napeti = napeti - 273.15; // K => C
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7fe fca9 	bl	8000418 <__aeabi_f2d>
 8001ac6:	a30e      	add	r3, pc, #56	; (adr r3, 8001b00 <Voltagetoteperatur+0xb0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fb44 	bl	8000158 <__aeabi_dsub>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe ffa6 	bl	8000a28 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	607b      	str	r3, [r7, #4]
	  return napeti;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40aa6800 	.word	0x40aa6800
 8001af8:	84ee6b34 	.word	0x84ee6b34
 8001afc:	3f6b71a2 	.word	0x3f6b71a2
 8001b00:	66666666 	.word	0x66666666
 8001b04:	40711266 	.word	0x40711266
 8001b08:	20000024 	.word	0x20000024
 8001b0c:	3ff00000 	.word	0x3ff00000

08001b10 <drawlogoC>:


//funkce vykreslování displaje

void drawlogoC (uint8_t x, uint8_t y){
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	4603      	mov	r3, r0
 8001b18:	460a      	mov	r2, r1
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	71bb      	strb	r3, [r7, #6]
	  SSD1306_DrawLine((5+x), (y+5), (5+x), (y+11), 1);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3305      	adds	r3, #5
 8001b26:	b298      	uxth	r0, r3
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3305      	adds	r3, #5
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	3305      	adds	r3, #5
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	330b      	adds	r3, #11
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2401      	movs	r4, #1
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	f001 fe81 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((6+x), (y+3), (6+x), (y+13), 1);
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3306      	adds	r3, #6
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3303      	adds	r3, #3
 8001b56:	b299      	uxth	r1, r3
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3306      	adds	r3, #6
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	330d      	adds	r3, #13
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2401      	movs	r4, #1
 8001b6a:	9400      	str	r4, [sp, #0]
 8001b6c:	f001 fe6d 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+3), (7+x), (y+5), 1);
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3307      	adds	r3, #7
 8001b76:	b298      	uxth	r0, r3
 8001b78:	79bb      	ldrb	r3, [r7, #6]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3303      	adds	r3, #3
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3307      	adds	r3, #7
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	3305      	adds	r3, #5
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2401      	movs	r4, #1
 8001b92:	9400      	str	r4, [sp, #0]
 8001b94:	f001 fe59 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+11), (7+x), (y+13), 1);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	b298      	uxth	r0, r3
 8001ba0:	79bb      	ldrb	r3, [r7, #6]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	330b      	adds	r3, #11
 8001ba6:	b299      	uxth	r1, r3
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3307      	adds	r3, #7
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	330d      	adds	r3, #13
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2401      	movs	r4, #1
 8001bba:	9400      	str	r4, [sp, #0]
 8001bbc:	f001 fe45 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+14), (10+x), (y+14), 1);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	b298      	uxth	r0, r3
 8001bc8:	79bb      	ldrb	r3, [r7, #6]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	330e      	adds	r3, #14
 8001bce:	b299      	uxth	r1, r3
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	330a      	adds	r3, #10
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	79bb      	ldrb	r3, [r7, #6]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	330e      	adds	r3, #14
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2401      	movs	r4, #1
 8001be2:	9400      	str	r4, [sp, #0]
 8001be4:	f001 fe31 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+13), (10+x), (y+13), 1);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3308      	adds	r3, #8
 8001bee:	b298      	uxth	r0, r3
 8001bf0:	79bb      	ldrb	r3, [r7, #6]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	330d      	adds	r3, #13
 8001bf6:	b299      	uxth	r1, r3
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	330a      	adds	r3, #10
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	330d      	adds	r3, #13
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2401      	movs	r4, #1
 8001c0a:	9400      	str	r4, [sp, #0]
 8001c0c:	f001 fe1d 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+2), (10+x), (y+2), 1);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3308      	adds	r3, #8
 8001c16:	b298      	uxth	r0, r3
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	b299      	uxth	r1, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	330a      	adds	r3, #10
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2401      	movs	r4, #1
 8001c32:	9400      	str	r4, [sp, #0]
 8001c34:	f001 fe09 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+3), (10+x), (y+3), 1);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3303      	adds	r3, #3
 8001c46:	b299      	uxth	r1, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	330a      	adds	r3, #10
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3303      	adds	r3, #3
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2401      	movs	r4, #1
 8001c5a:	9400      	str	r4, [sp, #0]
 8001c5c:	f001 fdf5 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+3), (11+x), (y+4), 1);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	330b      	adds	r3, #11
 8001c66:	b298      	uxth	r0, r3
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3303      	adds	r3, #3
 8001c6e:	b299      	uxth	r1, r3
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	330b      	adds	r3, #11
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	79bb      	ldrb	r3, [r7, #6]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2401      	movs	r4, #1
 8001c82:	9400      	str	r4, [sp, #0]
 8001c84:	f001 fde1 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+13), (11+x), (y+12), 1);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	330b      	adds	r3, #11
 8001c8e:	b298      	uxth	r0, r3
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	330d      	adds	r3, #13
 8001c96:	b299      	uxth	r1, r3
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	330b      	adds	r3, #11
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2401      	movs	r4, #1
 8001caa:	9400      	str	r4, [sp, #0]
 8001cac:	f001 fdcd 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+4), (12+x), (y+6), 1);
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	b298      	uxth	r0, r3
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	b299      	uxth	r1, r3
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	3306      	adds	r3, #6
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2401      	movs	r4, #1
 8001cd2:	9400      	str	r4, [sp, #0]
 8001cd4:	f001 fdb9 	bl	800384a <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+12), (12+x), (y+10), 1);
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	330c      	adds	r3, #12
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	b299      	uxth	r1, r3
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	330c      	adds	r3, #12
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	330a      	adds	r3, #10
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2401      	movs	r4, #1
 8001cfa:	9400      	str	r4, [sp, #0]
 8001cfc:	f001 fda5 	bl	800384a <SSD1306_DrawLine>
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd90      	pop	{r4, r7, pc}

08001d08 <drawmenu1>:
void drawmenu1(uint8_t cursorm1, uint8_t cvcc, float x, float y)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b08b      	sub	sp, #44	; 0x2c
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60ba      	str	r2, [r7, #8]
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	460b      	mov	r3, r1
 8001d18:	73bb      	strb	r3, [r7, #14]
	  SSD1306_Clear();
 8001d1a:	f001 fe91 	bl	8003a40 <SSD1306_Clear>
	  cursorm1 = ~cursorm1;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	73fb      	strb	r3, [r7, #15]
	  char* mecha = trimm(y);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fdf1 	bl	800190c <trimm>
 8001d2a:	61b8      	str	r0, [r7, #24]
	  SSD1306_GotoXY (26,3);
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	201a      	movs	r0, #26
 8001d30:	f001 fcd0 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[0], &Font_11x18, ((cursorm1 & 0x08)>>3));
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	7818      	ldrb	r0, [r3, #0]
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	10db      	asrs	r3, r3, #3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4953      	ldr	r1, [pc, #332]	; (8001e94 <drawmenu1+0x18c>)
 8001d48:	f001 fcda 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (37,3);
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	2025      	movs	r0, #37	; 0x25
 8001d50:	f001 fcc0 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[1], &Font_11x18, ((cursorm1 & 0x04)>>2));
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	3301      	adds	r3, #1
 8001d58:	7818      	ldrb	r0, [r3, #0]
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	109b      	asrs	r3, r3, #2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	494a      	ldr	r1, [pc, #296]	; (8001e94 <drawmenu1+0x18c>)
 8001d6a:	f001 fcc9 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (48,3);
 8001d6e:	2103      	movs	r1, #3
 8001d70:	2030      	movs	r0, #48	; 0x30
 8001d72:	f001 fcaf 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 8001d76:	2201      	movs	r2, #1
 8001d78:	4946      	ldr	r1, [pc, #280]	; (8001e94 <drawmenu1+0x18c>)
 8001d7a:	202c      	movs	r0, #44	; 0x2c
 8001d7c:	f001 fcc0 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (59,3);
 8001d80:	2103      	movs	r1, #3
 8001d82:	203b      	movs	r0, #59	; 0x3b
 8001d84:	f001 fca6 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[2], &Font_11x18, ((cursorm1 & 0x02)>>1));
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	7818      	ldrb	r0, [r3, #0]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	105b      	asrs	r3, r3, #1
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	493d      	ldr	r1, [pc, #244]	; (8001e94 <drawmenu1+0x18c>)
 8001d9e:	f001 fcaf 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (70,3);
 8001da2:	2103      	movs	r1, #3
 8001da4:	2046      	movs	r0, #70	; 0x46
 8001da6:	f001 fc95 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[3], &Font_11x18, (cursorm1 & 0x01));
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3303      	adds	r3, #3
 8001dae:	7818      	ldrb	r0, [r3, #0]
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4936      	ldr	r1, [pc, #216]	; (8001e94 <drawmenu1+0x18c>)
 8001dbc:	f001 fca0 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (107,3);
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	206b      	movs	r0, #107	; 0x6b
 8001dc4:	f001 fc86 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc('V', &Font_11x18, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4932      	ldr	r1, [pc, #200]	; (8001e94 <drawmenu1+0x18c>)
 8001dcc:	2056      	movs	r0, #86	; 0x56
 8001dce:	f001 fc97 	bl	8003700 <SSD1306_Putc>
	  char* proud = trimm(x);
 8001dd2:	68b8      	ldr	r0, [r7, #8]
 8001dd4:	f7ff fd9a 	bl	800190c <trimm>
 8001dd8:	6178      	str	r0, [r7, #20]
	  SSD1306_GotoXY (26,25);
 8001dda:	2119      	movs	r1, #25
 8001ddc:	201a      	movs	r0, #26
 8001dde:	f001 fc79 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[0], &Font_11x18, ((cursorm1 & 0x80)>>7));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	7818      	ldrb	r0, [r3, #0]
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	09db      	lsrs	r3, r3, #7
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4929      	ldr	r1, [pc, #164]	; (8001e94 <drawmenu1+0x18c>)
 8001df0:	f001 fc86 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (37,25);
 8001df4:	2119      	movs	r1, #25
 8001df6:	2025      	movs	r0, #37	; 0x25
 8001df8:	f001 fc6c 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[1], &Font_11x18, ((cursorm1 & 0x40)>>6));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	7818      	ldrb	r0, [r3, #0]
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	119b      	asrs	r3, r3, #6
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4920      	ldr	r1, [pc, #128]	; (8001e94 <drawmenu1+0x18c>)
 8001e12:	f001 fc75 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (48,25);
 8001e16:	2119      	movs	r1, #25
 8001e18:	2030      	movs	r0, #48	; 0x30
 8001e1a:	f001 fc5b 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	491c      	ldr	r1, [pc, #112]	; (8001e94 <drawmenu1+0x18c>)
 8001e22:	202c      	movs	r0, #44	; 0x2c
 8001e24:	f001 fc6c 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (59,25);
 8001e28:	2119      	movs	r1, #25
 8001e2a:	203b      	movs	r0, #59	; 0x3b
 8001e2c:	f001 fc52 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[2], &Font_11x18, ((cursorm1 & 0x20)>>5));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	3302      	adds	r3, #2
 8001e34:	7818      	ldrb	r0, [r3, #0]
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	115b      	asrs	r3, r3, #5
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
 8001e44:	4913      	ldr	r1, [pc, #76]	; (8001e94 <drawmenu1+0x18c>)
 8001e46:	f001 fc5b 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (70,25);
 8001e4a:	2119      	movs	r1, #25
 8001e4c:	2046      	movs	r0, #70	; 0x46
 8001e4e:	f001 fc41 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[3], &Font_11x18, ((cursorm1 & 0x10)>>4));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3303      	adds	r3, #3
 8001e56:	7818      	ldrb	r0, [r3, #0]
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	111b      	asrs	r3, r3, #4
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	490b      	ldr	r1, [pc, #44]	; (8001e94 <drawmenu1+0x18c>)
 8001e68:	f001 fc4a 	bl	8003700 <SSD1306_Putc>
	  SSD1306_GotoXY (107,25);
 8001e6c:	2119      	movs	r1, #25
 8001e6e:	206b      	movs	r0, #107	; 0x6b
 8001e70:	f001 fc30 	bl	80036d4 <SSD1306_GotoXY>
	  SSD1306_Putc('A', &Font_11x18, 1);
 8001e74:	2201      	movs	r2, #1
 8001e76:	4907      	ldr	r1, [pc, #28]	; (8001e94 <drawmenu1+0x18c>)
 8001e78:	2041      	movs	r0, #65	; 0x41
 8001e7a:	f001 fc41 	bl	8003700 <SSD1306_Putc>
	  uint8_t xcvcc = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	77fb      	strb	r3, [r7, #31]
	  uint8_t ycvcc = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	77bb      	strb	r3, [r7, #30]
	  switch (cvcc) {
 8001e86:	7bbb      	ldrb	r3, [r7, #14]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d005      	beq.n	8001e98 <drawmenu1+0x190>
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	f000 80c5 	beq.w	800201c <drawmenu1+0x314>
			  ycvcc = 45;
			  drawlogoC(xcvcc, ycvcc);
			  drawlogoC((xcvcc+10), ycvcc);
			break;
		default:
			break;
 8001e92:	e0d6      	b.n	8002042 <drawmenu1+0x33a>
 8001e94:	20000000 	.word	0x20000000
			  xcvcc = 81;
 8001e98:	2351      	movs	r3, #81	; 0x51
 8001e9a:	77fb      	strb	r3, [r7, #31]
			  ycvcc = 45;
 8001e9c:	232d      	movs	r3, #45	; 0x2d
 8001e9e:	77bb      	strb	r3, [r7, #30]
			  drawlogoC(92, ycvcc);
 8001ea0:	7fbb      	ldrb	r3, [r7, #30]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	205c      	movs	r0, #92	; 0x5c
 8001ea6:	f7ff fe33 	bl	8001b10 <drawlogoC>
			  SSD1306_DrawLine((5+xcvcc), (ycvcc+2), (5+xcvcc), (ycvcc+6), 1);
 8001eaa:	7ffb      	ldrb	r3, [r7, #31]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3305      	adds	r3, #5
 8001eb0:	b298      	uxth	r0, r3
 8001eb2:	7fbb      	ldrb	r3, [r7, #30]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	b299      	uxth	r1, r3
 8001eba:	7ffb      	ldrb	r3, [r7, #31]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	7fbb      	ldrb	r3, [r7, #30]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3306      	adds	r3, #6
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2401      	movs	r4, #1
 8001ecc:	9400      	str	r4, [sp, #0]
 8001ece:	f001 fcbc 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((13+xcvcc), (ycvcc+2), (13+xcvcc), (ycvcc+6), 1);
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	330d      	adds	r3, #13
 8001ed8:	b298      	uxth	r0, r3
 8001eda:	7fbb      	ldrb	r3, [r7, #30]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3302      	adds	r3, #2
 8001ee0:	b299      	uxth	r1, r3
 8001ee2:	7ffb      	ldrb	r3, [r7, #31]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	330d      	adds	r3, #13
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	7fbb      	ldrb	r3, [r7, #30]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3306      	adds	r3, #6
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2401      	movs	r4, #1
 8001ef4:	9400      	str	r4, [sp, #0]
 8001ef6:	f001 fca8 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((6+xcvcc), (ycvcc+2), (6+xcvcc), (ycvcc+11), 1);
 8001efa:	7ffb      	ldrb	r3, [r7, #31]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3306      	adds	r3, #6
 8001f00:	b298      	uxth	r0, r3
 8001f02:	7fbb      	ldrb	r3, [r7, #30]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3302      	adds	r3, #2
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	7ffb      	ldrb	r3, [r7, #31]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3306      	adds	r3, #6
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	7fbb      	ldrb	r3, [r7, #30]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	330b      	adds	r3, #11
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2401      	movs	r4, #1
 8001f1c:	9400      	str	r4, [sp, #0]
 8001f1e:	f001 fc94 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((12+xcvcc), (ycvcc+2), (12+xcvcc), (ycvcc+11), 1);
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	330c      	adds	r3, #12
 8001f28:	b298      	uxth	r0, r3
 8001f2a:	7fbb      	ldrb	r3, [r7, #30]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3302      	adds	r3, #2
 8001f30:	b299      	uxth	r1, r3
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	330c      	adds	r3, #12
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	7fbb      	ldrb	r3, [r7, #30]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	330b      	adds	r3, #11
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2401      	movs	r4, #1
 8001f44:	9400      	str	r4, [sp, #0]
 8001f46:	f001 fc80 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((7+xcvcc), (ycvcc+6), (7+xcvcc), (ycvcc+13), 1);
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3307      	adds	r3, #7
 8001f50:	b298      	uxth	r0, r3
 8001f52:	7fbb      	ldrb	r3, [r7, #30]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3306      	adds	r3, #6
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3307      	adds	r3, #7
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	7fbb      	ldrb	r3, [r7, #30]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	330d      	adds	r3, #13
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2401      	movs	r4, #1
 8001f6c:	9400      	str	r4, [sp, #0]
 8001f6e:	f001 fc6c 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((11+xcvcc), (ycvcc+6), (11+xcvcc), (ycvcc+13), 1);
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	330b      	adds	r3, #11
 8001f78:	b298      	uxth	r0, r3
 8001f7a:	7fbb      	ldrb	r3, [r7, #30]
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3306      	adds	r3, #6
 8001f80:	b299      	uxth	r1, r3
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	330b      	adds	r3, #11
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	7fbb      	ldrb	r3, [r7, #30]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	330d      	adds	r3, #13
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2401      	movs	r4, #1
 8001f94:	9400      	str	r4, [sp, #0]
 8001f96:	f001 fc58 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((8+xcvcc), (ycvcc+11), (8+xcvcc), (ycvcc+14), 1);
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	b298      	uxth	r0, r3
 8001fa2:	7fbb      	ldrb	r3, [r7, #30]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	330b      	adds	r3, #11
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3308      	adds	r3, #8
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	7fbb      	ldrb	r3, [r7, #30]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	330e      	adds	r3, #14
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2401      	movs	r4, #1
 8001fbc:	9400      	str	r4, [sp, #0]
 8001fbe:	f001 fc44 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawLine((10+xcvcc), (ycvcc+11), (10+xcvcc), (ycvcc+14), 1);
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	330a      	adds	r3, #10
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	7fbb      	ldrb	r3, [r7, #30]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	330b      	adds	r3, #11
 8001fd0:	b299      	uxth	r1, r3
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	330a      	adds	r3, #10
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	7fbb      	ldrb	r3, [r7, #30]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	330e      	adds	r3, #14
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2401      	movs	r4, #1
 8001fe4:	9400      	str	r4, [sp, #0]
 8001fe6:	f001 fc30 	bl	800384a <SSD1306_DrawLine>
			  SSD1306_DrawPixel((9+xcvcc), (ycvcc+13), 1);
 8001fea:	7ffb      	ldrb	r3, [r7, #31]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3309      	adds	r3, #9
 8001ff0:	b298      	uxth	r0, r3
 8001ff2:	7fbb      	ldrb	r3, [r7, #30]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	330d      	adds	r3, #13
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f001 fb0b 	bl	8003618 <SSD1306_DrawPixel>
			  SSD1306_DrawPixel((9+xcvcc), (ycvcc+14), 1);
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	b29b      	uxth	r3, r3
 8002006:	3309      	adds	r3, #9
 8002008:	b298      	uxth	r0, r3
 800200a:	7fbb      	ldrb	r3, [r7, #30]
 800200c:	b29b      	uxth	r3, r3
 800200e:	330e      	adds	r3, #14
 8002010:	b29b      	uxth	r3, r3
 8002012:	2201      	movs	r2, #1
 8002014:	4619      	mov	r1, r3
 8002016:	f001 faff 	bl	8003618 <SSD1306_DrawPixel>
			break;
 800201a:	e012      	b.n	8002042 <drawmenu1+0x33a>
			  xcvcc = 20;
 800201c:	2314      	movs	r3, #20
 800201e:	77fb      	strb	r3, [r7, #31]
			  ycvcc = 45;
 8002020:	232d      	movs	r3, #45	; 0x2d
 8002022:	77bb      	strb	r3, [r7, #30]
			  drawlogoC(xcvcc, ycvcc);
 8002024:	7fba      	ldrb	r2, [r7, #30]
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fd70 	bl	8001b10 <drawlogoC>
			  drawlogoC((xcvcc+10), ycvcc);
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	330a      	adds	r3, #10
 8002034:	b2db      	uxtb	r3, r3
 8002036:	7fba      	ldrb	r2, [r7, #30]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd68 	bl	8001b10 <drawlogoC>
			break;
 8002040:	bf00      	nop
	}
	  if (cvcc) {
 8002042:	7bbb      	ldrb	r3, [r7, #14]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d077      	beq.n	8002138 <drawmenu1+0x430>
		  	  SSD1306_DrawLine((2+xcvcc), ycvcc , (25+xcvcc), ycvcc, 1);
 8002048:	7ffb      	ldrb	r3, [r7, #31]
 800204a:	b29b      	uxth	r3, r3
 800204c:	3302      	adds	r3, #2
 800204e:	b298      	uxth	r0, r3
 8002050:	7fbb      	ldrb	r3, [r7, #30]
 8002052:	b299      	uxth	r1, r3
 8002054:	7ffb      	ldrb	r3, [r7, #31]
 8002056:	b29b      	uxth	r3, r3
 8002058:	3319      	adds	r3, #25
 800205a:	b29a      	uxth	r2, r3
 800205c:	7fbb      	ldrb	r3, [r7, #30]
 800205e:	b29b      	uxth	r3, r3
 8002060:	2401      	movs	r4, #1
 8002062:	9400      	str	r4, [sp, #0]
 8002064:	f001 fbf1 	bl	800384a <SSD1306_DrawLine>
		  	  SSD1306_DrawLine(xcvcc, (ycvcc+2), xcvcc, (ycvcc+15), 1);
 8002068:	7ffb      	ldrb	r3, [r7, #31]
 800206a:	b298      	uxth	r0, r3
 800206c:	7fbb      	ldrb	r3, [r7, #30]
 800206e:	b29b      	uxth	r3, r3
 8002070:	3302      	adds	r3, #2
 8002072:	b299      	uxth	r1, r3
 8002074:	7ffb      	ldrb	r3, [r7, #31]
 8002076:	b29a      	uxth	r2, r3
 8002078:	7fbb      	ldrb	r3, [r7, #30]
 800207a:	b29b      	uxth	r3, r3
 800207c:	330f      	adds	r3, #15
 800207e:	b29b      	uxth	r3, r3
 8002080:	2401      	movs	r4, #1
 8002082:	9400      	str	r4, [sp, #0]
 8002084:	f001 fbe1 	bl	800384a <SSD1306_DrawLine>
		  	  SSD1306_DrawLine((2+xcvcc), (ycvcc+17), (25+xcvcc), (ycvcc+17), 1);
 8002088:	7ffb      	ldrb	r3, [r7, #31]
 800208a:	b29b      	uxth	r3, r3
 800208c:	3302      	adds	r3, #2
 800208e:	b298      	uxth	r0, r3
 8002090:	7fbb      	ldrb	r3, [r7, #30]
 8002092:	b29b      	uxth	r3, r3
 8002094:	3311      	adds	r3, #17
 8002096:	b299      	uxth	r1, r3
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	b29b      	uxth	r3, r3
 800209c:	3319      	adds	r3, #25
 800209e:	b29a      	uxth	r2, r3
 80020a0:	7fbb      	ldrb	r3, [r7, #30]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	3311      	adds	r3, #17
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2401      	movs	r4, #1
 80020aa:	9400      	str	r4, [sp, #0]
 80020ac:	f001 fbcd 	bl	800384a <SSD1306_DrawLine>
		  	  SSD1306_DrawLine((27+xcvcc), (ycvcc+2), (27+xcvcc), (ycvcc+15), 1);
 80020b0:	7ffb      	ldrb	r3, [r7, #31]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	331b      	adds	r3, #27
 80020b6:	b298      	uxth	r0, r3
 80020b8:	7fbb      	ldrb	r3, [r7, #30]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3302      	adds	r3, #2
 80020be:	b299      	uxth	r1, r3
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	331b      	adds	r3, #27
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	7fbb      	ldrb	r3, [r7, #30]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	330f      	adds	r3, #15
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2401      	movs	r4, #1
 80020d2:	9400      	str	r4, [sp, #0]
 80020d4:	f001 fbb9 	bl	800384a <SSD1306_DrawLine>
		  	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+1), 1);
 80020d8:	7ffb      	ldrb	r3, [r7, #31]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	b298      	uxth	r0, r3
 80020e0:	7fbb      	ldrb	r3, [r7, #30]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3301      	adds	r3, #1
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2201      	movs	r2, #1
 80020ea:	4619      	mov	r1, r3
 80020ec:	f001 fa94 	bl	8003618 <SSD1306_DrawPixel>
		  	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+16), 1);
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	b298      	uxth	r0, r3
 80020f8:	7fbb      	ldrb	r3, [r7, #30]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3310      	adds	r3, #16
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2201      	movs	r2, #1
 8002102:	4619      	mov	r1, r3
 8002104:	f001 fa88 	bl	8003618 <SSD1306_DrawPixel>
		  	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+1), 1);
 8002108:	7ffb      	ldrb	r3, [r7, #31]
 800210a:	b29b      	uxth	r3, r3
 800210c:	331a      	adds	r3, #26
 800210e:	b298      	uxth	r0, r3
 8002110:	7fbb      	ldrb	r3, [r7, #30]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	f001 fa7c 	bl	8003618 <SSD1306_DrawPixel>
		  	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+16), 1);
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	b29b      	uxth	r3, r3
 8002124:	331a      	adds	r3, #26
 8002126:	b298      	uxth	r0, r3
 8002128:	7fbb      	ldrb	r3, [r7, #30]
 800212a:	b29b      	uxth	r3, r3
 800212c:	3310      	adds	r3, #16
 800212e:	b29b      	uxth	r3, r3
 8002130:	2201      	movs	r2, #1
 8002132:	4619      	mov	r1, r3
 8002134:	f001 fa70 	bl	8003618 <SSD1306_DrawPixel>
	  }
	  SSD1306_UpdateScreen(); // update screen
 8002138:	f001 fa28 	bl	800358c <SSD1306_UpdateScreen>
}
 800213c:	bf00      	nop
 800213e:	3724      	adds	r7, #36	; 0x24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}

08002144 <drawmenu2>:
void drawmenu2()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
	uint16_t pz = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	81fb      	strh	r3, [r7, #14]
	uint16_t temp = teplota;
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <drawmenu2+0x118>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff8c 	bl	8001070 <__aeabi_f2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	81bb      	strh	r3, [r7, #12]
	char pzc [3];
	char tempc [3];
	char ventc [3];
	itoa(temp, tempc, 10);
 800215c:	89bb      	ldrh	r3, [r7, #12]
 800215e:	1d39      	adds	r1, r7, #4
 8002160:	220a      	movs	r2, #10
 8002162:	4618      	mov	r0, r3
 8002164:	f00b f9c4 	bl	800d4f0 <itoa>
	itoa(ventilatorper, ventc, 10);
 8002168:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <drawmenu2+0x11c>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	463b      	mov	r3, r7
 8002170:	220a      	movs	r2, #10
 8002172:	4619      	mov	r1, r3
 8002174:	f00b f9bc 	bl	800d4f0 <itoa>
	pz = Uzobrazene* Izobrazene;
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <drawmenu2+0x120>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3a      	ldr	r2, [pc, #232]	; (8002268 <drawmenu2+0x124>)
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fdae 	bl	8000ce4 <__aeabi_fmul>
 8002188:	4603      	mov	r3, r0
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe ff70 	bl	8001070 <__aeabi_f2uiz>
 8002190:	4603      	mov	r3, r0
 8002192:	81fb      	strh	r3, [r7, #14]
	itoa(pz, pzc, 10);
 8002194:	89fb      	ldrh	r3, [r7, #14]
 8002196:	f107 0108 	add.w	r1, r7, #8
 800219a:	220a      	movs	r2, #10
 800219c:	4618      	mov	r0, r3
 800219e:	f00b f9a7 	bl	800d4f0 <itoa>
	SSD1306_Clear();
 80021a2:	f001 fc4d 	bl	8003a40 <SSD1306_Clear>
	SSD1306_GotoXY (10,3);
 80021a6:	2103      	movs	r1, #3
 80021a8:	200a      	movs	r0, #10
 80021aa:	f001 fa93 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("Pz =", &Font_11x18, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	492e      	ldr	r1, [pc, #184]	; (800226c <drawmenu2+0x128>)
 80021b2:	482f      	ldr	r0, [pc, #188]	; (8002270 <drawmenu2+0x12c>)
 80021b4:	f001 fb24 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (65,3);
 80021b8:	2103      	movs	r1, #3
 80021ba:	2041      	movs	r0, #65	; 0x41
 80021bc:	f001 fa8a 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts(pzc, &Font_11x18, 1);
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	2201      	movs	r2, #1
 80021c6:	4929      	ldr	r1, [pc, #164]	; (800226c <drawmenu2+0x128>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 fb19 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (107,3);
 80021ce:	2103      	movs	r1, #3
 80021d0:	206b      	movs	r0, #107	; 0x6b
 80021d2:	f001 fa7f 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Putc('W', &Font_11x18, 1);
 80021d6:	2201      	movs	r2, #1
 80021d8:	4924      	ldr	r1, [pc, #144]	; (800226c <drawmenu2+0x128>)
 80021da:	2057      	movs	r0, #87	; 0x57
 80021dc:	f001 fa90 	bl	8003700 <SSD1306_Putc>
	SSD1306_GotoXY (10,25);
 80021e0:	2119      	movs	r1, #25
 80021e2:	200a      	movs	r0, #10
 80021e4:	f001 fa76 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("tep=", &Font_11x18, 1);
 80021e8:	2201      	movs	r2, #1
 80021ea:	4920      	ldr	r1, [pc, #128]	; (800226c <drawmenu2+0x128>)
 80021ec:	4821      	ldr	r0, [pc, #132]	; (8002274 <drawmenu2+0x130>)
 80021ee:	f001 fb07 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (65,25);
 80021f2:	2119      	movs	r1, #25
 80021f4:	2041      	movs	r0, #65	; 0x41
 80021f6:	f001 fa6d 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts(tempc, &Font_11x18, 1);
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2201      	movs	r2, #1
 80021fe:	491b      	ldr	r1, [pc, #108]	; (800226c <drawmenu2+0x128>)
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fafd 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (107,25);
 8002206:	2119      	movs	r1, #25
 8002208:	206b      	movs	r0, #107	; 0x6b
 800220a:	f001 fa63 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Putc('C', &Font_11x18, 1);
 800220e:	2201      	movs	r2, #1
 8002210:	4916      	ldr	r1, [pc, #88]	; (800226c <drawmenu2+0x128>)
 8002212:	2043      	movs	r0, #67	; 0x43
 8002214:	f001 fa74 	bl	8003700 <SSD1306_Putc>
	SSD1306_GotoXY (10,43);
 8002218:	212b      	movs	r1, #43	; 0x2b
 800221a:	200a      	movs	r0, #10
 800221c:	f001 fa5a 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("vent=", &Font_11x18, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	4912      	ldr	r1, [pc, #72]	; (800226c <drawmenu2+0x128>)
 8002224:	4814      	ldr	r0, [pc, #80]	; (8002278 <drawmenu2+0x134>)
 8002226:	f001 faeb 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (65, 43);
 800222a:	212b      	movs	r1, #43	; 0x2b
 800222c:	2041      	movs	r0, #65	; 0x41
 800222e:	f001 fa51 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts(ventc, &Font_11x18, 1);
 8002232:	463b      	mov	r3, r7
 8002234:	2201      	movs	r2, #1
 8002236:	490d      	ldr	r1, [pc, #52]	; (800226c <drawmenu2+0x128>)
 8002238:	4618      	mov	r0, r3
 800223a:	f001 fae1 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (107,43);
 800223e:	212b      	movs	r1, #43	; 0x2b
 8002240:	206b      	movs	r0, #107	; 0x6b
 8002242:	f001 fa47 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Putc('%', &Font_11x18, 1);
 8002246:	2201      	movs	r2, #1
 8002248:	4908      	ldr	r1, [pc, #32]	; (800226c <drawmenu2+0x128>)
 800224a:	2025      	movs	r0, #37	; 0x25
 800224c:	f001 fa58 	bl	8003700 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8002250:	f001 f99c 	bl	800358c <SSD1306_UpdateScreen>

}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000284 	.word	0x20000284
 8002260:	20000298 	.word	0x20000298
 8002264:	20000278 	.word	0x20000278
 8002268:	2000027c 	.word	0x2000027c
 800226c:	20000000 	.word	0x20000000
 8002270:	0800db18 	.word	0x0800db18
 8002274:	0800db20 	.word	0x0800db20
 8002278:	0800db28 	.word	0x0800db28

0800227c <drawmenu3>:
void drawmenu3()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
	char U0c [3];
	char U1c [3];
	char U2c [3];
	itoa(ADCout[0], U0c, 10);
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <drawmenu3+0xc0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	220a      	movs	r2, #10
 800228e:	4619      	mov	r1, r3
 8002290:	f00b f92e 	bl	800d4f0 <itoa>
	itoa(ADCout[1], U1c, 10);
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <drawmenu3+0xc0>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	220a      	movs	r2, #10
 80022a0:	4619      	mov	r1, r3
 80022a2:	f00b f925 	bl	800d4f0 <itoa>
	itoa(ADCout[2], U2c, 10);
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <drawmenu3+0xc0>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4618      	mov	r0, r3
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	220a      	movs	r2, #10
 80022b0:	4619      	mov	r1, r3
 80022b2:	f00b f91d 	bl	800d4f0 <itoa>
	SSD1306_Clear();
 80022b6:	f001 fbc3 	bl	8003a40 <SSD1306_Clear>
	SSD1306_GotoXY (10,3);
 80022ba:	2103      	movs	r1, #3
 80022bc:	200a      	movs	r0, #10
 80022be:	f001 fa09 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("U0 =", &Font_11x18, 1);
 80022c2:	2201      	movs	r2, #1
 80022c4:	491e      	ldr	r1, [pc, #120]	; (8002340 <drawmenu3+0xc4>)
 80022c6:	481f      	ldr	r0, [pc, #124]	; (8002344 <drawmenu3+0xc8>)
 80022c8:	f001 fa9a 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (65,3);
 80022cc:	2103      	movs	r1, #3
 80022ce:	2041      	movs	r0, #65	; 0x41
 80022d0:	f001 fa00 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts(U0c, &Font_11x18, 1);
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	2201      	movs	r2, #1
 80022da:	4919      	ldr	r1, [pc, #100]	; (8002340 <drawmenu3+0xc4>)
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 fa8f 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (10,25);
 80022e2:	2119      	movs	r1, #25
 80022e4:	200a      	movs	r0, #10
 80022e6:	f001 f9f5 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("U1=", &Font_11x18, 1);
 80022ea:	2201      	movs	r2, #1
 80022ec:	4914      	ldr	r1, [pc, #80]	; (8002340 <drawmenu3+0xc4>)
 80022ee:	4816      	ldr	r0, [pc, #88]	; (8002348 <drawmenu3+0xcc>)
 80022f0:	f001 fa86 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (65,25);
 80022f4:	2119      	movs	r1, #25
 80022f6:	2041      	movs	r0, #65	; 0x41
 80022f8:	f001 f9ec 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts(U1c, &Font_11x18, 1);
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	2201      	movs	r2, #1
 8002302:	490f      	ldr	r1, [pc, #60]	; (8002340 <drawmenu3+0xc4>)
 8002304:	4618      	mov	r0, r3
 8002306:	f001 fa7b 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (10,43);
 800230a:	212b      	movs	r1, #43	; 0x2b
 800230c:	200a      	movs	r0, #10
 800230e:	f001 f9e1 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts("U2=", &Font_11x18, 1);
 8002312:	2201      	movs	r2, #1
 8002314:	490a      	ldr	r1, [pc, #40]	; (8002340 <drawmenu3+0xc4>)
 8002316:	480d      	ldr	r0, [pc, #52]	; (800234c <drawmenu3+0xd0>)
 8002318:	f001 fa72 	bl	8003800 <SSD1306_Puts>
	SSD1306_GotoXY (65, 43);
 800231c:	212b      	movs	r1, #43	; 0x2b
 800231e:	2041      	movs	r0, #65	; 0x41
 8002320:	f001 f9d8 	bl	80036d4 <SSD1306_GotoXY>
	SSD1306_Puts(U2c, &Font_11x18, 1);
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2201      	movs	r2, #1
 8002328:	4905      	ldr	r1, [pc, #20]	; (8002340 <drawmenu3+0xc4>)
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fa68 	bl	8003800 <SSD1306_Puts>
	SSD1306_UpdateScreen(); // update screen
 8002330:	f001 f92c 	bl	800358c <SSD1306_UpdateScreen>

}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000c04 	.word	0x20000c04
 8002340:	20000000 	.word	0x20000000
 8002344:	0800db30 	.word	0x0800db30
 8002348:	0800db38 	.word	0x0800db38
 800234c:	0800db3c 	.word	0x0800db3c

08002350 <ventilator>:

// výstupní elektrické veličiny

void ventilator(float temp)  //nastavení úrovně PWM ventilátoru
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	// kontrola správnosti
	if((teplota > 100)||(teplota < 1))
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <ventilator+0xe4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4936      	ldr	r1, [pc, #216]	; (8002438 <ventilator+0xe8>)
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fe7c 	bl	800105c <__aeabi_fcmpgt>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d109      	bne.n	800237e <ventilator+0x2e>
 800236a:	4b32      	ldr	r3, [pc, #200]	; (8002434 <ventilator+0xe4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fe54 	bl	8001020 <__aeabi_fcmplt>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <ventilator+0x34>
	{
		error(0);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff f8a0 	bl	80014c4 <error>
	}
	if(teplota > 70)
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <ventilator+0xe4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	492c      	ldr	r1, [pc, #176]	; (800243c <ventilator+0xec>)
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fe66 	bl	800105c <__aeabi_fcmpgt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <ventilator+0x4c>
	{
		error(1);
 8002396:	2001      	movs	r0, #1
 8002398:	f7ff f894 	bl	80014c4 <error>
	}

	//hystereze
	if(temp > 30)
 800239c:	4928      	ldr	r1, [pc, #160]	; (8002440 <ventilator+0xf0>)
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fe5c 	bl	800105c <__aeabi_fcmpgt>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <ventilator+0x60>
	{
		ventilatorhyst = 1;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <ventilator+0xf4>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
	}
	if(temp < 28)
 80023b0:	4925      	ldr	r1, [pc, #148]	; (8002448 <ventilator+0xf8>)
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fe34 	bl	8001020 <__aeabi_fcmplt>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <ventilator+0x74>
	{
		ventilatorhyst = 0;
 80023be:	4b21      	ldr	r3, [pc, #132]	; (8002444 <ventilator+0xf4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
	}
	//výpočet v %
	if(ventilatorhyst == 1)
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <ventilator+0xf4>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11d      	bne.n	8002408 <ventilator+0xb8>
	{
		ventilatorper = ((temp - 25) * 2) + 50;
 80023cc:	491f      	ldr	r1, [pc, #124]	; (800244c <ventilator+0xfc>)
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fb7e 	bl	8000ad0 <__aeabi_fsub>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fb7b 	bl	8000ad4 <__addsf3>
 80023de:	4603      	mov	r3, r0
 80023e0:	491b      	ldr	r1, [pc, #108]	; (8002450 <ventilator+0x100>)
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fb76 	bl	8000ad4 <__addsf3>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fe40 	bl	8001070 <__aeabi_f2uiz>
 80023f0:	4603      	mov	r3, r0
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <ventilator+0x104>)
 80023f6:	801a      	strh	r2, [r3, #0]
		if(ventilatorper > 100)
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <ventilator+0x104>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d906      	bls.n	800240e <ventilator+0xbe>
		{
			ventilatorper = 100;
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <ventilator+0x104>)
 8002402:	2264      	movs	r2, #100	; 0x64
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	e002      	b.n	800240e <ventilator+0xbe>
		}
	}else
	{
		ventilatorper = 0;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <ventilator+0x104>)
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
	}
	//nastavení časovače v 8-bit
	TIM2->CCR1 = (ventilatorper*255)/100;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <ventilator+0x104>)
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	4613      	mov	r3, r2
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <ventilator+0x108>)
 800241c:	fb82 1203 	smull	r1, r2, r2, r3
 8002420:	1152      	asrs	r2, r2, #5
 8002422:	17db      	asrs	r3, r3, #31
 8002424:	1ad2      	subs	r2, r2, r3
 8002426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000284 	.word	0x20000284
 8002438:	42c80000 	.word	0x42c80000
 800243c:	428c0000 	.word	0x428c0000
 8002440:	41f00000 	.word	0x41f00000
 8002444:	2000029a 	.word	0x2000029a
 8002448:	41e00000 	.word	0x41e00000
 800244c:	41c80000 	.word	0x41c80000
 8002450:	42480000 	.word	0x42480000
 8002454:	20000298 	.word	0x20000298
 8002458:	51eb851f 	.word	0x51eb851f

0800245c <setDAC1>:
void setDAC1 (uint16_t data) // zapíše vpravo zarovnaná 12-bit data do DAC1 na I2C2
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af02      	add	r7, sp, #8
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <setDAC1+0x38>)
 8002470:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <setDAC1+0x38>)
 800247a:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c1, (0b1100001<<1), dataDAC, 3, 10);
 800247c:	230a      	movs	r3, #10
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2303      	movs	r3, #3
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <setDAC1+0x38>)
 8002484:	21c2      	movs	r1, #194	; 0xc2
 8002486:	4804      	ldr	r0, [pc, #16]	; (8002498 <setDAC1+0x3c>)
 8002488:	f003 f842 	bl	8005510 <HAL_I2C_Master_Transmit>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000008 	.word	0x20000008
 8002498:	200008cc 	.word	0x200008cc

0800249c <setDAC2>:
void setDAC2 (uint16_t data) // zapíše vpravo zarovnaná 12-bit data do DAC1 na I2C2
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af02      	add	r7, sp, #8
 80024a2:	4603      	mov	r3, r0
 80024a4:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <setDAC2+0x38>)
 80024b0:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <setDAC2+0x38>)
 80024ba:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c2, (0b1100001<<1), dataDAC, 3, 10);
 80024bc:	230a      	movs	r3, #10
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2303      	movs	r3, #3
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <setDAC2+0x38>)
 80024c4:	21c2      	movs	r1, #194	; 0xc2
 80024c6:	4804      	ldr	r0, [pc, #16]	; (80024d8 <setDAC2+0x3c>)
 80024c8:	f003 f822 	bl	8005510 <HAL_I2C_Master_Transmit>
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000920 	.word	0x20000920
 80024dc:	00000000 	.word	0x00000000

080024e0 <setVout>:
void setVout (float napeti)	 //řízení spínaného napěťového regulátoru  + příprava pro ADC
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	uint16_t output;
	uint8_t i = 1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
	if(napeti>18.71)
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7fd ff93 	bl	8000418 <__aeabi_f2d>
 80024f2:	a341      	add	r3, pc, #260	; (adr r3, 80025f8 <setVout+0x118>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe fa76 	bl	80009e8 <__aeabi_dcmpgt>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <setVout+0x3c>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8002502:	2201      	movs	r2, #1
 8002504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002508:	483d      	ldr	r0, [pc, #244]	; (8002600 <setVout+0x120>)
 800250a:	f002 fe74 	bl	80051f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002514:	483a      	ldr	r0, [pc, #232]	; (8002600 <setVout+0x120>)
 8002516:	f002 fe6e 	bl	80051f6 <HAL_GPIO_WritePin>
 800251a:	e052      	b.n	80025c2 <setVout+0xe2>
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	4837      	ldr	r0, [pc, #220]	; (8002600 <setVout+0x120>)
 8002524:	f002 fe67 	bl	80051f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8002528:	2201      	movs	r2, #1
 800252a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800252e:	4834      	ldr	r0, [pc, #208]	; (8002600 <setVout+0x120>)
 8002530:	f002 fe61 	bl	80051f6 <HAL_GPIO_WritePin>
		while(napetiBUCK[i]<napeti)
 8002534:	e002      	b.n	800253c <setVout+0x5c>
		{
			i++;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3301      	adds	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
		while(napetiBUCK[i]<napeti)
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	4a31      	ldr	r2, [pc, #196]	; (8002604 <setVout+0x124>)
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	4619      	mov	r1, r3
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fd88 	bl	800105c <__aeabi_fcmpgt>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f1      	bne.n	8002536 <setVout+0x56>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (1&&(dataBUCK[i] & 0x08)));
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <setVout+0x128>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256c:	4827      	ldr	r0, [pc, #156]	; (800260c <setVout+0x12c>)
 800256e:	f002 fe42 	bl	80051f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, (1&&(dataBUCK[i] & 0x04)));
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <setVout+0x128>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800258c:	481f      	ldr	r0, [pc, #124]	; (800260c <setVout+0x12c>)
 800258e:	f002 fe32 	bl	80051f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, (dataBUCK[i] & 0x02));
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <setVout+0x128>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a4:	4819      	ldr	r0, [pc, #100]	; (800260c <setVout+0x12c>)
 80025a6:	f002 fe26 	bl	80051f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, (dataBUCK[i] & 0x01));
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	4a16      	ldr	r2, [pc, #88]	; (8002608 <setVout+0x128>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025bc:	4813      	ldr	r0, [pc, #76]	; (800260c <setVout+0x12c>)
 80025be:	f002 fe1a 	bl	80051f6 <HAL_GPIO_WritePin>
	}
	output = (napeti*512)/Uadc;
 80025c2:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fb8c 	bl	8000ce4 <__aeabi_fmul>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <setVout+0x130>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7fe fc38 	bl	8000e4c <__aeabi_fdiv>
 80025dc:	4603      	mov	r3, r0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fd46 	bl	8001070 <__aeabi_f2uiz>
 80025e4:	4603      	mov	r3, r0
 80025e6:	81bb      	strh	r3, [r7, #12]
	setDAC2(output);
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff56 	bl	800249c <setDAC2>
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	8f5c28f6 	.word	0x8f5c28f6
 80025fc:	4032b5c2 	.word	0x4032b5c2
 8002600:	40010800 	.word	0x40010800
 8002604:	20000028 	.word	0x20000028
 8002608:	20000068 	.word	0x20000068
 800260c:	40010c00 	.word	0x40010c00
 8002610:	20000024 	.word	0x20000024

08002614 <setIout>:
void setIout(float proud)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uint16_t output;
	output = (proud*4095)/Uadc;
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <setIout+0x3c>)
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe fb60 	bl	8000ce4 <__aeabi_fmul>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <setIout+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f7fe fc0c 	bl	8000e4c <__aeabi_fdiv>
 8002634:	4603      	mov	r3, r0
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd1a 	bl	8001070 <__aeabi_f2uiz>
 800263c:	4603      	mov	r3, r0
 800263e:	81fb      	strh	r3, [r7, #14]
	setDAC1(output);
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff0a 	bl	800245c <setDAC1>
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	457ff000 	.word	0x457ff000
 8002654:	20000024 	.word	0x20000024

08002658 <HAL_GPIO_EXTI_Callback>:


//vektory přerušení

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //přerušení krok encoderu
{
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	80fb      	strh	r3, [r7, #6]
	uint8_t direct = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8002662:	2102      	movs	r1, #2
 8002664:	48aa      	ldr	r0, [pc, #680]	; (8002910 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8002666:	f002 fdaf 	bl	80051c8 <HAL_GPIO_ReadPin>
 800266a:	4603      	mov	r3, r0
 800266c:	73bb      	strb	r3, [r7, #14]
	if(GPIO_Pin == GPIO_PIN_0)
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 8197 	bne.w	80029a4 <HAL_GPIO_EXTI_Callback+0x34c>
	{
		if((setmodeflag > 0)&&(menupage == 0)){
 8002676:	4ba7      	ldr	r3, [pc, #668]	; (8002914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8192 	beq.w	80029a4 <HAL_GPIO_EXTI_Callback+0x34c>
 8002680:	4ba5      	ldr	r3, [pc, #660]	; (8002918 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 818d 	bne.w	80029a4 <HAL_GPIO_EXTI_Callback+0x34c>
		if(debounce[4] == 0)
 800268a:	4ba4      	ldr	r3, [pc, #656]	; (800291c <HAL_GPIO_EXTI_Callback+0x2c4>)
 800268c:	791b      	ldrb	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 8188 	bne.w	80029a4 <HAL_GPIO_EXTI_Callback+0x34c>
		{
		int8_t i = 1;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
		setmodeflag = 500;
 8002698:	4b9e      	ldr	r3, [pc, #632]	; (8002914 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800269a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800269e:	801a      	strh	r2, [r3, #0]
		if(direct == 1)
 80026a0:	7bbb      	ldrb	r3, [r7, #14]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_EXTI_Callback+0x52>
		{
			i = -1;
 80026a6:	23ff      	movs	r3, #255	; 0xff
 80026a8:	73fb      	strb	r3, [r7, #15]
		}
		switch (cursor) {
 80026aa:	4b9d      	ldr	r3, [pc, #628]	; (8002920 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	f000 80a6 	beq.w	8002800 <HAL_GPIO_EXTI_Callback+0x1a8>
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	f300 8139 	bgt.w	800292c <HAL_GPIO_EXTI_Callback+0x2d4>
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	dc4a      	bgt.n	8002754 <HAL_GPIO_EXTI_Callback+0xfc>
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f340 8134 	ble.w	800292c <HAL_GPIO_EXTI_Callback+0x2d4>
 80026c4:	3b01      	subs	r3, #1
 80026c6:	2b1f      	cmp	r3, #31
 80026c8:	f200 8130 	bhi.w	800292c <HAL_GPIO_EXTI_Callback+0x2d4>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	0800282b 	.word	0x0800282b
 80026d8:	0800286d 	.word	0x0800286d
 80026dc:	0800292d 	.word	0x0800292d
 80026e0:	080028af 	.word	0x080028af
 80026e4:	0800292d 	.word	0x0800292d
 80026e8:	0800292d 	.word	0x0800292d
 80026ec:	0800292d 	.word	0x0800292d
 80026f0:	080028d1 	.word	0x080028d1
 80026f4:	0800292d 	.word	0x0800292d
 80026f8:	0800292d 	.word	0x0800292d
 80026fc:	0800292d 	.word	0x0800292d
 8002700:	0800292d 	.word	0x0800292d
 8002704:	0800292d 	.word	0x0800292d
 8002708:	0800292d 	.word	0x0800292d
 800270c:	0800292d 	.word	0x0800292d
 8002710:	0800275b 	.word	0x0800275b
 8002714:	0800292d 	.word	0x0800292d
 8002718:	0800292d 	.word	0x0800292d
 800271c:	0800292d 	.word	0x0800292d
 8002720:	0800292d 	.word	0x0800292d
 8002724:	0800292d 	.word	0x0800292d
 8002728:	0800292d 	.word	0x0800292d
 800272c:	0800292d 	.word	0x0800292d
 8002730:	0800292d 	.word	0x0800292d
 8002734:	0800292d 	.word	0x0800292d
 8002738:	0800292d 	.word	0x0800292d
 800273c:	0800292d 	.word	0x0800292d
 8002740:	0800292d 	.word	0x0800292d
 8002744:	0800292d 	.word	0x0800292d
 8002748:	0800292d 	.word	0x0800292d
 800274c:	0800292d 	.word	0x0800292d
 8002750:	0800279d 	.word	0x0800279d
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d042      	beq.n	80027de <HAL_GPIO_EXTI_Callback+0x186>
				break;
			case 0x08:
				setvoltage = setvoltage + (10*i);
				break;
			default:
				break;
 8002758:	e0e8      	b.n	800292c <HAL_GPIO_EXTI_Callback+0x2d4>
				setcurrent = setcurrent + (0.01 * i);
 800275a:	4b72      	ldr	r3, [pc, #456]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe5a 	bl	8000418 <__aeabi_f2d>
 8002764:	4604      	mov	r4, r0
 8002766:	460d      	mov	r5, r1
 8002768:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fe41 	bl	80003f4 <__aeabi_i2d>
 8002772:	a363      	add	r3, pc, #396	; (adr r3, 8002900 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd fea6 	bl	80004c8 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4620      	mov	r0, r4
 8002782:	4629      	mov	r1, r5
 8002784:	f7fd fcea 	bl	800015c <__adddf3>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	f7fe f94a 	bl	8000a28 <__aeabi_d2f>
 8002794:	4603      	mov	r3, r0
 8002796:	4a63      	ldr	r2, [pc, #396]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002798:	6013      	str	r3, [r2, #0]
				break;
 800279a:	e0c8      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setcurrent = setcurrent + (0.1 * i);
 800279c:	4b61      	ldr	r3, [pc, #388]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fe39 	bl	8000418 <__aeabi_f2d>
 80027a6:	4604      	mov	r4, r0
 80027a8:	460d      	mov	r5, r1
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fe20 	bl	80003f4 <__aeabi_i2d>
 80027b4:	a354      	add	r3, pc, #336	; (adr r3, 8002908 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd fe85 	bl	80004c8 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fd fcc9 	bl	800015c <__adddf3>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe f929 	bl	8000a28 <__aeabi_d2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027da:	6013      	str	r3, [r2, #0]
				break;
 80027dc:	e0a7      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setcurrent = setcurrent + i;
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fa2a 	bl	8000c3c <__aeabi_i2f>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f7fe f96f 	bl	8000ad4 <__addsf3>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 80027fc:	601a      	str	r2, [r3, #0]
				break;
 80027fe:	e096      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setcurrent = setcurrent + (10*i);
 8002800:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fa15 	bl	8000c3c <__aeabi_i2f>
 8002812:	4602      	mov	r2, r0
 8002814:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f7fe f95a 	bl	8000ad4 <__addsf3>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002826:	601a      	str	r2, [r3, #0]
				break;
 8002828:	e081      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setvoltage = setvoltage + (0.01 * i);
 800282a:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fdf2 	bl	8000418 <__aeabi_f2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fdd9 	bl	80003f4 <__aeabi_i2d>
 8002842:	a32f      	add	r3, pc, #188	; (adr r3, 8002900 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fe3e 	bl	80004c8 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fc82 	bl	800015c <__adddf3>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f8e2 	bl	8000a28 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	4a30      	ldr	r2, [pc, #192]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8002868:	6013      	str	r3, [r2, #0]
				break;
 800286a:	e060      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setvoltage = setvoltage + (0.1 * i);
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fdd1 	bl	8000418 <__aeabi_f2d>
 8002876:	4604      	mov	r4, r0
 8002878:	460d      	mov	r5, r1
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fdb8 	bl	80003f4 <__aeabi_i2d>
 8002884:	a320      	add	r3, pc, #128	; (adr r3, 8002908 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8002886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288a:	f7fd fe1d 	bl	80004c8 <__aeabi_dmul>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	f7fd fc61 	bl	800015c <__adddf3>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7fe f8c1 	bl	8000a28 <__aeabi_d2f>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028aa:	6013      	str	r3, [r2, #0]
				break;
 80028ac:	e03f      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setvoltage = setvoltage + i;
 80028ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f9c2 	bl	8000c3c <__aeabi_i2f>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7fe f907 	bl	8000ad4 <__addsf3>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028cc:	601a      	str	r2, [r3, #0]
				break;
 80028ce:	e02e      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
				setvoltage = setvoltage + (10*i);
 80028d0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe f9ad 	bl	8000c3c <__aeabi_i2f>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7fe f8f2 	bl	8000ad4 <__addsf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80028f6:	601a      	str	r2, [r3, #0]
				break;
 80028f8:	e019      	b.n	800292e <HAL_GPIO_EXTI_Callback+0x2d6>
 80028fa:	bf00      	nop
 80028fc:	f3af 8000 	nop.w
 8002900:	47ae147b 	.word	0x47ae147b
 8002904:	3f847ae1 	.word	0x3f847ae1
 8002908:	9999999a 	.word	0x9999999a
 800290c:	3fb99999 	.word	0x3fb99999
 8002910:	40010c00 	.word	0x40010c00
 8002914:	2000028a 	.word	0x2000028a
 8002918:	2000028d 	.word	0x2000028d
 800291c:	20000974 	.word	0x20000974
 8002920:	2000028c 	.word	0x2000028c
 8002924:	20000294 	.word	0x20000294
 8002928:	20000290 	.word	0x20000290
				break;
 800292c:	bf00      	nop
		}
		if(setvoltage < 0)
 800292e:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x360>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fb72 	bl	8001020 <__aeabi_fcmplt>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_EXTI_Callback+0x2f2>
		{
			setvoltage = 0;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x360>)
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
		}
		if(setcurrent < 0)
 800294a:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_GPIO_EXTI_Callback+0x364>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fb64 	bl	8001020 <__aeabi_fcmplt>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_EXTI_Callback+0x30e>
		{
			setcurrent = 0;
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_GPIO_EXTI_Callback+0x364>)
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
		}
		if(setcurrent > 2.8)
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_GPIO_EXTI_Callback+0x364>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fd54 	bl	8000418 <__aeabi_f2d>
 8002970:	a30f      	add	r3, pc, #60	; (adr r3, 80029b0 <HAL_GPIO_EXTI_Callback+0x358>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	f7fe f837 	bl	80009e8 <__aeabi_dcmpgt>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_GPIO_EXTI_Callback+0x32e>
		{
			setcurrent = 2.8;
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_GPIO_EXTI_Callback+0x364>)
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <HAL_GPIO_EXTI_Callback+0x368>)
 8002984:	601a      	str	r2, [r3, #0]
		}
		if(setvoltage > 19)
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x360>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	490e      	ldr	r1, [pc, #56]	; (80029c4 <HAL_GPIO_EXTI_Callback+0x36c>)
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fb65 	bl	800105c <__aeabi_fcmpgt>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_GPIO_EXTI_Callback+0x346>
		{
			setvoltage = 19;
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x360>)
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_GPIO_EXTI_Callback+0x36c>)
 800299c:	601a      	str	r2, [r3, #0]
		}
		debounce[4] = 10;
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_GPIO_EXTI_Callback+0x370>)
 80029a0:	220a      	movs	r2, #10
 80029a2:	711a      	strb	r2, [r3, #4]
		}
	}
	}
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bdb0      	pop	{r4, r5, r7, pc}
 80029ac:	f3af 8000 	nop.w
 80029b0:	66666666 	.word	0x66666666
 80029b4:	40066666 	.word	0x40066666
 80029b8:	20000290 	.word	0x20000290
 80029bc:	20000294 	.word	0x20000294
 80029c0:	40333333 	.word	0x40333333
 80029c4:	41980000 	.word	0x41980000
 80029c8:	20000974 	.word	0x20000974
 80029cc:	00000000 	.word	0x00000000

080029d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t refreshflag = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029da:	f001 faad 	bl	8003f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029de:	f000 fae1 	bl	8002fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029e2:	f000 fc79 	bl	80032d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80029e6:	f000 fba5 	bl	8003134 <MX_I2C1_Init>
  MX_I2C2_Init();
 80029ea:	f000 fbd1 	bl	8003190 <MX_I2C2_Init>
  MX_DMA_Init();
 80029ee:	f000 fc55 	bl	800329c <MX_DMA_Init>
  MX_ADC1_Init();
 80029f2:	f000 fb35 	bl	8003060 <MX_ADC1_Init>
  MX_TIM2_Init();
 80029f6:	f000 fbf9 	bl	80031ec <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80029fa:	f00a f875 	bl	800cae8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80029fe:	f000 fd01 	bl	8003404 <SSD1306_Init>
  HAL_ADC_Start_DMA(&hadc1, ADCout, 4);
 8002a02:	2204      	movs	r2, #4
 8002a04:	4999      	ldr	r1, [pc, #612]	; (8002c6c <main+0x29c>)
 8002a06:	489a      	ldr	r0, [pc, #616]	; (8002c70 <main+0x2a0>)
 8002a08:	f001 fbf4 	bl	80041f4 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4899      	ldr	r0, [pc, #612]	; (8002c74 <main+0x2a4>)
 8002a10:	f005 fea2 	bl	8008758 <HAL_TIM_PWM_Start>
  start();
 8002a14:	f7fe fb4c 	bl	80010b0 <start>
  for(uint8_t y; y<50;y++)
 8002a18:	e034      	b.n	8002a84 <main+0xb4>
  {
	  SMAU0 [y] = ADCtoVoltage(ADCout[0])*8;
 8002a1a:	4b94      	ldr	r3, [pc, #592]	; (8002c6c <main+0x29c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe ffd1 	bl	80019c8 <ADCtoVoltage>
 8002a26:	4603      	mov	r3, r0
 8002a28:	7fbc      	ldrb	r4, [r7, #30]
 8002a2a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe f958 	bl	8000ce4 <__aeabi_fmul>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b8f      	ldr	r3, [pc, #572]	; (8002c78 <main+0x2a8>)
 8002a3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	  SMAU1 [y] = ADCtoVoltage(ADCout[1])*8;
 8002a3e:	4b8b      	ldr	r3, [pc, #556]	; (8002c6c <main+0x29c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe ffbf 	bl	80019c8 <ADCtoVoltage>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	7fbc      	ldrb	r4, [r7, #30]
 8002a4e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe f946 	bl	8000ce4 <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <main+0x2ac>)
 8002a5e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	  SMAU2 [y] = ADCtoVoltage(ADCout[2]);
 8002a62:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <main+0x29c>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	7fbc      	ldrb	r4, [r7, #30]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe ffac 	bl	80019c8 <ADCtoVoltage>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a83      	ldr	r2, [pc, #524]	; (8002c80 <main+0x2b0>)
 8002a74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  HAL_Delay(2);
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f001 fabf 	bl	8003ffc <HAL_Delay>
  for(uint8_t y; y<50;y++)
 8002a7e:	7fbb      	ldrb	r3, [r7, #30]
 8002a80:	3301      	adds	r3, #1
 8002a82:	77bb      	strb	r3, [r7, #30]
 8002a84:	7fbb      	ldrb	r3, [r7, #30]
 8002a86:	2b31      	cmp	r3, #49	; 0x31
 8002a88:	d9c7      	bls.n	8002a1a <main+0x4a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SMAy++;
 8002a8a:	4b7e      	ldr	r3, [pc, #504]	; (8002c84 <main+0x2b4>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b7c      	ldr	r3, [pc, #496]	; (8002c84 <main+0x2b4>)
 8002a94:	701a      	strb	r2, [r3, #0]
	  if(SMAy > 49)
 8002a96:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <main+0x2b4>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b31      	cmp	r3, #49	; 0x31
 8002a9c:	d902      	bls.n	8002aa4 <main+0xd4>
	  {
		  SMAy = 0;
 8002a9e:	4b79      	ldr	r3, [pc, #484]	; (8002c84 <main+0x2b4>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
	  }
	  float U0 = 0;
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
	  float U1 = 0;
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
	  float U2 = 0;
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
	  SMAU0[SMAy] = ADCtoVoltage(ADCout[0])*8;
 8002ab6:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <main+0x29c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe ff83 	bl	80019c8 <ADCtoVoltage>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4a6f      	ldr	r2, [pc, #444]	; (8002c84 <main+0x2b4>)
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	4614      	mov	r4, r2
 8002aca:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f908 	bl	8000ce4 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <main+0x2a8>)
 8002ada:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	  SMAU1[SMAy] = ADCtoVoltage(ADCout[1])*8;
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <main+0x29c>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ff6f 	bl	80019c8 <ADCtoVoltage>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <main+0x2b4>)
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	4614      	mov	r4, r2
 8002af2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe f8f4 	bl	8000ce4 <__aeabi_fmul>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b5e      	ldr	r3, [pc, #376]	; (8002c7c <main+0x2ac>)
 8002b02:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	  SMAU2[SMAy] = ADCtoVoltage(ADCout[2]);
 8002b06:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <main+0x29c>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <main+0x2b4>)
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	4614      	mov	r4, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ff58 	bl	80019c8 <ADCtoVoltage>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <main+0x2b0>)
 8002b1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  for(uint8_t y = 0; y<50; y++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e020      	b.n	8002b68 <main+0x198>
	  {
		  U0 = U0 + SMAU0[y];
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	4a53      	ldr	r2, [pc, #332]	; (8002c78 <main+0x2a8>)
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	69b8      	ldr	r0, [r7, #24]
 8002b32:	f7fd ffcf 	bl	8000ad4 <__addsf3>
 8002b36:	4603      	mov	r3, r0
 8002b38:	61bb      	str	r3, [r7, #24]
		  U1 = U1 + SMAU1[y];
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <main+0x2ac>)
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	4619      	mov	r1, r3
 8002b44:	6978      	ldr	r0, [r7, #20]
 8002b46:	f7fd ffc5 	bl	8000ad4 <__addsf3>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	617b      	str	r3, [r7, #20]
		  U2 = U2 + SMAU2[y];
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	4a4b      	ldr	r2, [pc, #300]	; (8002c80 <main+0x2b0>)
 8002b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b56:	4619      	mov	r1, r3
 8002b58:	6938      	ldr	r0, [r7, #16]
 8002b5a:	f7fd ffbb 	bl	8000ad4 <__addsf3>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	613b      	str	r3, [r7, #16]
	  for(uint8_t y = 0; y<50; y++)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	3301      	adds	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b31      	cmp	r3, #49	; 0x31
 8002b6c:	d9db      	bls.n	8002b26 <main+0x156>

	  }
	  U0 = U0 / 50;
 8002b6e:	4946      	ldr	r1, [pc, #280]	; (8002c88 <main+0x2b8>)
 8002b70:	69b8      	ldr	r0, [r7, #24]
 8002b72:	f7fe f96b 	bl	8000e4c <__aeabi_fdiv>
 8002b76:	4603      	mov	r3, r0
 8002b78:	61bb      	str	r3, [r7, #24]
	  U1 = U1 / 50;
 8002b7a:	4943      	ldr	r1, [pc, #268]	; (8002c88 <main+0x2b8>)
 8002b7c:	6978      	ldr	r0, [r7, #20]
 8002b7e:	f7fe f965 	bl	8000e4c <__aeabi_fdiv>
 8002b82:	4603      	mov	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]
	  U2 = U2 / 50;
 8002b86:	4940      	ldr	r1, [pc, #256]	; (8002c88 <main+0x2b8>)
 8002b88:	6938      	ldr	r0, [r7, #16]
 8002b8a:	f7fe f95f 	bl	8000e4c <__aeabi_fdiv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]


	  readbuttons();
 8002b92:	f7fe fdaf 	bl	80016f4 <readbuttons>
	  if(setmodeflag>0) //display vstoupí do interaktivního módu
 8002b96:	4b3d      	ldr	r3, [pc, #244]	; (8002c8c <main+0x2bc>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d05a      	beq.n	8002c54 <main+0x284>
	  {
		  if(setmodeflag == 500)
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <main+0x2bc>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ba6:	d11e      	bne.n	8002be6 <main+0x216>
		  {
			  switch (menupage) {
 8002ba8:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <main+0x2c0>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <main+0x1e6>
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d007      	beq.n	8002bc4 <main+0x1f4>
 8002bb4:	e00d      	b.n	8002bd2 <main+0x202>
				case 1:
					drawmenu2();
 8002bb6:	f7ff fac5 	bl	8002144 <drawmenu2>
					setmodeflag = 750;
 8002bba:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <main+0x2bc>)
 8002bbc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002bc0:	801a      	strh	r2, [r3, #0]
					break;
 8002bc2:	e011      	b.n	8002be8 <main+0x218>
				case 2:
					drawmenu3();
 8002bc4:	f7ff fb5a 	bl	800227c <drawmenu3>
					setmodeflag = 750;
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <main+0x2bc>)
 8002bca:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002bce:	801a      	strh	r2, [r3, #0]
					break;
 8002bd0:	e00a      	b.n	8002be8 <main+0x218>
				default:
					drawmenu1(cursor, 0, setcurrent , setvoltage);
 8002bd2:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <main+0x2c4>)
 8002bd4:	7818      	ldrb	r0, [r3, #0]
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <main+0x2c8>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <main+0x2cc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	f7ff f892 	bl	8001d08 <drawmenu1>
					break;
 8002be4:	e000      	b.n	8002be8 <main+0x218>
			}
		  }
 8002be6:	bf00      	nop

		  if(setmodeflag > 0)
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <main+0x2bc>)
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <main+0x22c>
		  {
			  setmodeflag--;
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <main+0x2bc>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <main+0x2bc>)
 8002bfa:	801a      	strh	r2, [r3, #0]
		  }
		  for(uint8_t i = 0; i<5; i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73bb      	strb	r3, [r7, #14]
 8002c00:	e00e      	b.n	8002c20 <main+0x250>
		  {
			  if(debounce[i] > 0)
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <main+0x2d0>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <main+0x24a>
			  {
				  debounce[i]--;
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <main+0x2d0>)
 8002c10:	5cd2      	ldrb	r2, [r2, r3]
 8002c12:	3a01      	subs	r2, #1
 8002c14:	b2d1      	uxtb	r1, r2
 8002c16:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <main+0x2d0>)
 8002c18:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0; i<5; i++)
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	73bb      	strb	r3, [r7, #14]
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d9ed      	bls.n	8002c02 <main+0x232>
			  }
		  }
		  if(setmodeflag == 0)
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <main+0x2bc>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <main+0x27c>
		  {
			 menupage = 0;
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <main+0x2c0>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
			 setVout(setvoltage);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <main+0x2cc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fc51 	bl	80024e0 <setVout>
			 setIout(setcurrent);
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <main+0x2c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fce6 	bl	8002614 <setIout>
			 refreshflag = 1;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	77fb      	strb	r3, [r7, #31]
		  }
		  HAL_Delay(2);
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f001 f9d5 	bl	8003ffc <HAL_Delay>
 8002c52:	e11a      	b.n	8002e8a <main+0x4ba>
	  }
	  else
	  {
		  // není v setmode
		  uint8_t rezim;
		  if(U1>2)
 8002c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f7fe f9ff 	bl	800105c <__aeabi_fcmpgt>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01f      	beq.n	8002ca4 <main+0x2d4>
		  {
			  rezim = 2;
 8002c64:	2302      	movs	r3, #2
 8002c66:	737b      	strb	r3, [r7, #13]
 8002c68:	e01e      	b.n	8002ca8 <main+0x2d8>
 8002c6a:	bf00      	nop
 8002c6c:	20000c04 	.word	0x20000c04
 8002c70:	20000b0c 	.word	0x20000b0c
 8002c74:	20000c6c 	.word	0x20000c6c
 8002c78:	20000a44 	.word	0x20000a44
 8002c7c:	20000b3c 	.word	0x20000b3c
 8002c80:	2000097c 	.word	0x2000097c
 8002c84:	20000288 	.word	0x20000288
 8002c88:	42480000 	.word	0x42480000
 8002c8c:	2000028a 	.word	0x2000028a
 8002c90:	2000028d 	.word	0x2000028d
 8002c94:	2000028c 	.word	0x2000028c
 8002c98:	20000294 	.word	0x20000294
 8002c9c:	20000290 	.word	0x20000290
 8002ca0:	20000974 	.word	0x20000974

		  }
		  else
		  {
			  rezim = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	737b      	strb	r3, [r7, #13]
				  {
					  setVout((setvoltage+U1)-0.1);
				  }
			  }*/
		  }
		  if(U0>24)
 8002ca8:	49a5      	ldr	r1, [pc, #660]	; (8002f40 <main+0x570>)
 8002caa:	69b8      	ldr	r0, [r7, #24]
 8002cac:	f7fe f9d6 	bl	800105c <__aeabi_fcmpgt>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <main+0x2ec>
		  {
			  error(2);
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f7fe fc04 	bl	80014c4 <error>
		  }
		  if(U1>24)
 8002cbc:	49a0      	ldr	r1, [pc, #640]	; (8002f40 <main+0x570>)
 8002cbe:	6978      	ldr	r0, [r7, #20]
 8002cc0:	f7fe f9cc 	bl	800105c <__aeabi_fcmpgt>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <main+0x300>
		  {
			  error(3);
 8002cca:	2003      	movs	r0, #3
 8002ccc:	f7fe fbfa 	bl	80014c4 <error>
		  }
		  if(U2>3)
 8002cd0:	499c      	ldr	r1, [pc, #624]	; (8002f44 <main+0x574>)
 8002cd2:	6938      	ldr	r0, [r7, #16]
 8002cd4:	f7fe f9c2 	bl	800105c <__aeabi_fcmpgt>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <main+0x314>
		  {
			  error(4);
 8002cde:	2004      	movs	r0, #4
 8002ce0:	f7fe fbf0 	bl	80014c4 <error>
		  }
		  if(((Uzobrazene - (U0-U1))>0.05) | ((Uzobrazene - (U0-U1)) < -0.05))
 8002ce4:	4b98      	ldr	r3, [pc, #608]	; (8002f48 <main+0x578>)
 8002ce6:	681c      	ldr	r4, [r3, #0]
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	69b8      	ldr	r0, [r7, #24]
 8002cec:	f7fd fef0 	bl	8000ad0 <__aeabi_fsub>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7fd feeb 	bl	8000ad0 <__aeabi_fsub>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fb8b 	bl	8000418 <__aeabi_f2d>
 8002d02:	2301      	movs	r3, #1
 8002d04:	461c      	mov	r4, r3
 8002d06:	a386      	add	r3, pc, #536	; (adr r3, 8002f20 <main+0x550>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fe6c 	bl	80009e8 <__aeabi_dcmpgt>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <main+0x34a>
 8002d16:	2300      	movs	r3, #0
 8002d18:	461c      	mov	r4, r3
 8002d1a:	b2e4      	uxtb	r4, r4
 8002d1c:	4b8a      	ldr	r3, [pc, #552]	; (8002f48 <main+0x578>)
 8002d1e:	681d      	ldr	r5, [r3, #0]
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	69b8      	ldr	r0, [r7, #24]
 8002d24:	f7fd fed4 	bl	8000ad0 <__aeabi_fsub>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f7fd fecf 	bl	8000ad0 <__aeabi_fsub>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fb6f 	bl	8000418 <__aeabi_f2d>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	461d      	mov	r5, r3
 8002d3e:	a37a      	add	r3, pc, #488	; (adr r3, 8002f28 <main+0x558>)
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f7fd fe32 	bl	80009ac <__aeabi_dcmplt>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <main+0x382>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	461d      	mov	r5, r3
 8002d52:	b2eb      	uxtb	r3, r5
 8002d54:	4323      	orrs	r3, r4
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <main+0x390>
		  {refreshflag = 1;}
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	77fb      	strb	r3, [r7, #31]
		  if(((Izobrazene - U2)>0.02) | ((Izobrazene - U2) < -0.02))
 8002d60:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <main+0x57c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd feb2 	bl	8000ad0 <__aeabi_fsub>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb52 	bl	8000418 <__aeabi_f2d>
 8002d74:	2301      	movs	r3, #1
 8002d76:	461c      	mov	r4, r3
 8002d78:	a36d      	add	r3, pc, #436	; (adr r3, 8002f30 <main+0x560>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fe33 	bl	80009e8 <__aeabi_dcmpgt>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <main+0x3bc>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	461c      	mov	r4, r3
 8002d8c:	b2e4      	uxtb	r4, r4
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <main+0x57c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6939      	ldr	r1, [r7, #16]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fe9b 	bl	8000ad0 <__aeabi_fsub>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fb3b 	bl	8000418 <__aeabi_f2d>
 8002da2:	2301      	movs	r3, #1
 8002da4:	461d      	mov	r5, r3
 8002da6:	a364      	add	r3, pc, #400	; (adr r3, 8002f38 <main+0x568>)
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	f7fd fdfe 	bl	80009ac <__aeabi_dcmplt>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <main+0x3ea>
 8002db6:	2300      	movs	r3, #0
 8002db8:	461d      	mov	r5, r3
 8002dba:	b2eb      	uxtb	r3, r5
 8002dbc:	4323      	orrs	r3, r4
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <main+0x3f8>
		  {refreshflag = 1;}
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77fb      	strb	r3, [r7, #31]
		  if(rezim != Mzobrazene)
 8002dc8:	7b7b      	ldrb	r3, [r7, #13]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd ff36 	bl	8000c3c <__aeabi_i2f>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <main+0x580>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7fe f917 	bl	800100c <__aeabi_fcmpeq>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <main+0x418>
		  {refreshflag = 1;}
 8002de4:	2301      	movs	r3, #1
 8002de6:	77fb      	strb	r3, [r7, #31]
		  if(refreshflag > 0)  // pokud je příznak změny údajů na display obnoví display
 8002de8:	7ffb      	ldrb	r3, [r7, #31]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04a      	beq.n	8002e84 <main+0x4b4>
		  {
			  Mzobrazene = rezim;
 8002dee:	7b7b      	ldrb	r3, [r7, #13]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd ff1f 	bl	8000c34 <__aeabi_ui2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a55      	ldr	r2, [pc, #340]	; (8002f50 <main+0x580>)
 8002dfa:	6013      	str	r3, [r2, #0]
			  Uzobrazene = U0-U1;
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	69b8      	ldr	r0, [r7, #24]
 8002e00:	f7fd fe66 	bl	8000ad0 <__aeabi_fsub>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b4f      	ldr	r3, [pc, #316]	; (8002f48 <main+0x578>)
 8002e0a:	601a      	str	r2, [r3, #0]
			  Izobrazene = U2;
 8002e0c:	4a4f      	ldr	r2, [pc, #316]	; (8002f4c <main+0x57c>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	6013      	str	r3, [r2, #0]
			  drawmenu1(0, Mzobrazene, Izobrazene , Uzobrazene);
 8002e12:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <main+0x580>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f92a 	bl	8001070 <__aeabi_f2uiz>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	b2d9      	uxtb	r1, r3
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <main+0x57c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b48      	ldr	r3, [pc, #288]	; (8002f48 <main+0x578>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fe ff6d 	bl	8001d08 <drawmenu1>
			  create_mess(Uzobrazene, Izobrazene, Mzobrazene,99, teplota, ventilatorper);
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <main+0x578>)
 8002e30:	681c      	ldr	r4, [r3, #0]
 8002e32:	4b46      	ldr	r3, [pc, #280]	; (8002f4c <main+0x57c>)
 8002e34:	681d      	ldr	r5, [r3, #0]
 8002e36:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <main+0x580>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f918 	bl	8001070 <__aeabi_f2uiz>
 8002e40:	4603      	mov	r3, r0
 8002e42:	b2d9      	uxtb	r1, r3
 8002e44:	4b43      	ldr	r3, [pc, #268]	; (8002f54 <main+0x584>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <main+0x588>)
 8002e4a:	8812      	ldrh	r2, [r2, #0]
 8002e4c:	9201      	str	r2, [sp, #4]
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	2363      	movs	r3, #99	; 0x63
 8002e52:	460a      	mov	r2, r1
 8002e54:	4629      	mov	r1, r5
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7fe f9b6 	bl	80011c8 <create_mess>
			  int pokusy = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
			  while((CDC_Transmit_FS(message, len) != USBD_OK)&&(pokusy<100)){
 8002e60:	e002      	b.n	8002e68 <main+0x498>
				pokusy++;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
			  while((CDC_Transmit_FS(message, len) != USBD_OK)&&(pokusy<100)){
 8002e68:	4b3c      	ldr	r3, [pc, #240]	; (8002f5c <main+0x58c>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	483c      	ldr	r0, [pc, #240]	; (8002f60 <main+0x590>)
 8002e70:	f009 ff1a 	bl	800cca8 <CDC_Transmit_FS>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <main+0x4b0>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b63      	cmp	r3, #99	; 0x63
 8002e7e:	ddf0      	ble.n	8002e62 <main+0x492>
			  }
			  refreshflag = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
		  }
		  HAL_Delay(1);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f001 f8b9 	bl	8003ffc <HAL_Delay>
	  }
	  teplota = Voltagetoteperatur(ADCtoVoltage(ADCout[3]));
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <main+0x594>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fd99 	bl	80019c8 <ADCtoVoltage>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fdd9 	bl	8001a50 <Voltagetoteperatur>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <main+0x584>)
 8002ea2:	6013      	str	r3, [r2, #0]
	  ventilator(teplota);
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <main+0x584>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fa51 	bl	8002350 <ventilator>
	  if(receive == 1){
 8002eae:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <main+0x598>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d10e      	bne.n	8002ed4 <main+0x504>
		receive = 0;
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <main+0x598>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
		read_ser();
 8002ebc:	f7fe f920 	bl	8001100 <read_ser>
		 setVout(setvoltage);
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <main+0x59c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fb0b 	bl	80024e0 <setVout>
		 setIout(setcurrent);
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <main+0x5a0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fba0 	bl	8002614 <setIout>
	  }
	  loopcount++;
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <main+0x5a4>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <main+0x5a4>)
 8002ede:	701a      	strb	r2, [r3, #0]
	  if(loopcount==255){
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <main+0x5a4>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2bff      	cmp	r3, #255	; 0xff
 8002ee6:	f47f add0 	bne.w	8002a8a <main+0xba>
		  create_mess(Uzobrazene, Izobrazene, Mzobrazene,99, teplota, ventilatorper);
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <main+0x578>)
 8002eec:	681c      	ldr	r4, [r3, #0]
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <main+0x57c>)
 8002ef0:	681d      	ldr	r5, [r3, #0]
 8002ef2:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <main+0x580>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe f8ba 	bl	8001070 <__aeabi_f2uiz>
 8002efc:	4603      	mov	r3, r0
 8002efe:	b2d9      	uxtb	r1, r3
 8002f00:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <main+0x584>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <main+0x588>)
 8002f06:	8812      	ldrh	r2, [r2, #0]
 8002f08:	9201      	str	r2, [sp, #4]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2363      	movs	r3, #99	; 0x63
 8002f0e:	460a      	mov	r2, r1
 8002f10:	4629      	mov	r1, r5
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7fe f958 	bl	80011c8 <create_mess>
		  int pokusy = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	607b      	str	r3, [r7, #4]
		  while((CDC_Transmit_FS(message, len) != USBD_OK)&&(pokusy<100)){
 8002f1c:	e02f      	b.n	8002f7e <main+0x5ae>
 8002f1e:	bf00      	nop
 8002f20:	9999999a 	.word	0x9999999a
 8002f24:	3fa99999 	.word	0x3fa99999
 8002f28:	9999999a 	.word	0x9999999a
 8002f2c:	bfa99999 	.word	0xbfa99999
 8002f30:	47ae147b 	.word	0x47ae147b
 8002f34:	3f947ae1 	.word	0x3f947ae1
 8002f38:	47ae147b 	.word	0x47ae147b
 8002f3c:	bf947ae1 	.word	0xbf947ae1
 8002f40:	41c00000 	.word	0x41c00000
 8002f44:	40400000 	.word	0x40400000
 8002f48:	20000278 	.word	0x20000278
 8002f4c:	2000027c 	.word	0x2000027c
 8002f50:	20000280 	.word	0x20000280
 8002f54:	20000284 	.word	0x20000284
 8002f58:	20000298 	.word	0x20000298
 8002f5c:	20000022 	.word	0x20000022
 8002f60:	2000000c 	.word	0x2000000c
 8002f64:	20000c04 	.word	0x20000c04
 8002f68:	20000c68 	.word	0x20000c68
 8002f6c:	20000290 	.word	0x20000290
 8002f70:	20000294 	.word	0x20000294
 8002f74:	2000029b 	.word	0x2000029b
			pokusy++;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
		  while((CDC_Transmit_FS(message, len) != USBD_OK)&&(pokusy<100)){
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <main+0x5cc>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	4619      	mov	r1, r3
 8002f84:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <main+0x5d0>)
 8002f86:	f009 fe8f 	bl	800cca8 <CDC_Transmit_FS>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f43f ad7c 	beq.w	8002a8a <main+0xba>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b63      	cmp	r3, #99	; 0x63
 8002f96:	ddef      	ble.n	8002f78 <main+0x5a8>
  {
 8002f98:	e577      	b.n	8002a8a <main+0xba>
 8002f9a:	bf00      	nop
 8002f9c:	20000022 	.word	0x20000022
 8002fa0:	2000000c 	.word	0x2000000c

08002fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b094      	sub	sp, #80	; 0x50
 8002fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fae:	2228      	movs	r2, #40	; 0x28
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f00a faac 	bl	800d510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ff0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fea0 	bl	8007d40 <HAL_RCC_OscConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003006:	f000 f9f7 	bl	80033f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800300a:	230f      	movs	r3, #15
 800300c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800300e:	2302      	movs	r3, #2
 8003010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800301c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003020:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f005 f909 	bl	8008240 <HAL_RCC_ClockConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003034:	f000 f9e0 	bl	80033f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8003038:	2312      	movs	r3, #18
 800303a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800303c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003040:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	4618      	mov	r0, r3
 800304a:	f005 fa7f 	bl	800854c <HAL_RCCEx_PeriphCLKConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003054:	f000 f9d0 	bl	80033f8 <Error_Handler>
  }
}
 8003058:	bf00      	nop
 800305a:	3750      	adds	r7, #80	; 0x50
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <MX_ADC1_Init+0xcc>)
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <MX_ADC1_Init+0xd0>)
 8003074:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003076:	4b2d      	ldr	r3, [pc, #180]	; (800312c <MX_ADC1_Init+0xcc>)
 8003078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <MX_ADC1_Init+0xcc>)
 8003080:	2201      	movs	r2, #1
 8003082:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003084:	4b29      	ldr	r3, [pc, #164]	; (800312c <MX_ADC1_Init+0xcc>)
 8003086:	2200      	movs	r2, #0
 8003088:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <MX_ADC1_Init+0xcc>)
 800308c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <MX_ADC1_Init+0xcc>)
 8003094:	2200      	movs	r2, #0
 8003096:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <MX_ADC1_Init+0xcc>)
 800309a:	2204      	movs	r2, #4
 800309c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800309e:	4823      	ldr	r0, [pc, #140]	; (800312c <MX_ADC1_Init+0xcc>)
 80030a0:	f000 ffd0 	bl	8004044 <HAL_ADC_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80030aa:	f000 f9a5 	bl	80033f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030b2:	2301      	movs	r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80030b6:	2307      	movs	r3, #7
 80030b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	481b      	ldr	r0, [pc, #108]	; (800312c <MX_ADC1_Init+0xcc>)
 80030c0:	f001 f992 	bl	80043e8 <HAL_ADC_ConfigChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80030ca:	f000 f995 	bl	80033f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80030d2:	2302      	movs	r3, #2
 80030d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4814      	ldr	r0, [pc, #80]	; (800312c <MX_ADC1_Init+0xcc>)
 80030dc:	f001 f984 	bl	80043e8 <HAL_ADC_ConfigChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80030e6:	f000 f987 	bl	80033f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030ea:	2302      	movs	r3, #2
 80030ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80030ee:	2303      	movs	r3, #3
 80030f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030f2:	1d3b      	adds	r3, r7, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	480d      	ldr	r0, [pc, #52]	; (800312c <MX_ADC1_Init+0xcc>)
 80030f8:	f001 f976 	bl	80043e8 <HAL_ADC_ConfigChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003102:	f000 f979 	bl	80033f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003106:	2303      	movs	r3, #3
 8003108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800310a:	2304      	movs	r3, #4
 800310c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	4619      	mov	r1, r3
 8003112:	4806      	ldr	r0, [pc, #24]	; (800312c <MX_ADC1_Init+0xcc>)
 8003114:	f001 f968 	bl	80043e8 <HAL_ADC_ConfigChannel>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800311e:	f000 f96b 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000b0c 	.word	0x20000b0c
 8003130:	40012400 	.word	0x40012400

08003134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <MX_I2C1_Init+0x50>)
 800313a:	4a13      	ldr	r2, [pc, #76]	; (8003188 <MX_I2C1_Init+0x54>)
 800313c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <MX_I2C1_Init+0x50>)
 8003140:	4a12      	ldr	r2, [pc, #72]	; (800318c <MX_I2C1_Init+0x58>)
 8003142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <MX_I2C1_Init+0x50>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800314a:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <MX_I2C1_Init+0x50>)
 800314c:	2200      	movs	r2, #0
 800314e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <MX_I2C1_Init+0x50>)
 8003152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <MX_I2C1_Init+0x50>)
 800315a:	2200      	movs	r2, #0
 800315c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <MX_I2C1_Init+0x50>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003164:	4b07      	ldr	r3, [pc, #28]	; (8003184 <MX_I2C1_Init+0x50>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <MX_I2C1_Init+0x50>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <MX_I2C1_Init+0x50>)
 8003172:	f002 f889 	bl	8005288 <HAL_I2C_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800317c:	f000 f93c 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200008cc 	.word	0x200008cc
 8003188:	40005400 	.word	0x40005400
 800318c:	00061a80 	.word	0x00061a80

08003190 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <MX_I2C2_Init+0x50>)
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <MX_I2C2_Init+0x54>)
 8003198:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_I2C2_Init+0x50>)
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <MX_I2C2_Init+0x58>)
 800319e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <MX_I2C2_Init+0x50>)
 80031ce:	f002 f85b 	bl	8005288 <HAL_I2C_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80031d8:	f000 f90e 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80031dc:	bf00      	nop
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20000920 	.word	0x20000920
 80031e4:	40005800 	.word	0x40005800
 80031e8:	000186a0 	.word	0x000186a0

080031ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f2:	f107 0320 	add.w	r3, r7, #32
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	615a      	str	r2, [r3, #20]
 800320c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <MX_TIM2_Init+0xac>)
 8003210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003214:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <MX_TIM2_Init+0xac>)
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321c:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <MX_TIM2_Init+0xac>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8003222:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <MX_TIM2_Init+0xac>)
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <MX_TIM2_Init+0xac>)
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <MX_TIM2_Init+0xac>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003234:	4818      	ldr	r0, [pc, #96]	; (8003298 <MX_TIM2_Init+0xac>)
 8003236:	f005 fa3f 	bl	80086b8 <HAL_TIM_PWM_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003240:	f000 f8da 	bl	80033f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800324c:	f107 0320 	add.w	r3, r7, #32
 8003250:	4619      	mov	r1, r3
 8003252:	4811      	ldr	r0, [pc, #68]	; (8003298 <MX_TIM2_Init+0xac>)
 8003254:	f005 fdee 	bl	8008e34 <HAL_TIMEx_MasterConfigSynchronization>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800325e:	f000 f8cb 	bl	80033f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003262:	2360      	movs	r3, #96	; 0x60
 8003264:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	2200      	movs	r2, #0
 8003276:	4619      	mov	r1, r3
 8003278:	4807      	ldr	r0, [pc, #28]	; (8003298 <MX_TIM2_Init+0xac>)
 800327a:	f005 fb0f 	bl	800889c <HAL_TIM_PWM_ConfigChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003284:	f000 f8b8 	bl	80033f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003288:	4803      	ldr	r0, [pc, #12]	; (8003298 <MX_TIM2_Init+0xac>)
 800328a:	f000 fd8d 	bl	8003da8 <HAL_TIM_MspPostInit>

}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	20000c6c 	.word	0x20000c6c

0800329c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <MX_DMA_Init+0x38>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <MX_DMA_Init+0x38>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6153      	str	r3, [r2, #20]
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <MX_DMA_Init+0x38>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	200b      	movs	r0, #11
 80032c0:	f001 fb63 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032c4:	200b      	movs	r0, #11
 80032c6:	f001 fb7c 	bl	80049c2 <HAL_NVIC_EnableIRQ>

}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000

080032d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ec:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <MX_GPIO_Init+0x110>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a3d      	ldr	r2, [pc, #244]	; (80033e8 <MX_GPIO_Init+0x110>)
 80032f2:	f043 0320 	orr.w	r3, r3, #32
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <MX_GPIO_Init+0x110>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <MX_GPIO_Init+0x110>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4a37      	ldr	r2, [pc, #220]	; (80033e8 <MX_GPIO_Init+0x110>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6193      	str	r3, [r2, #24]
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <MX_GPIO_Init+0x110>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <MX_GPIO_Init+0x110>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <MX_GPIO_Init+0x110>)
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <MX_GPIO_Init+0x110>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800333a:	482c      	ldr	r0, [pc, #176]	; (80033ec <MX_GPIO_Init+0x114>)
 800333c:	f001 ff5b 	bl	80051f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8003340:	2200      	movs	r2, #0
 8003342:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003346:	482a      	ldr	r0, [pc, #168]	; (80033f0 <MX_GPIO_Init+0x118>)
 8003348:	f001 ff55 	bl	80051f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800334c:	23f0      	movs	r3, #240	; 0xf0
 800334e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003354:	2301      	movs	r3, #1
 8003356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4619      	mov	r1, r3
 800335e:	4824      	ldr	r0, [pc, #144]	; (80033f0 <MX_GPIO_Init+0x118>)
 8003360:	f001 fdae 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003364:	2301      	movs	r3, #1
 8003366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003368:	4b22      	ldr	r3, [pc, #136]	; (80033f4 <MX_GPIO_Init+0x11c>)
 800336a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800336c:	2301      	movs	r3, #1
 800336e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	4619      	mov	r1, r3
 8003376:	481d      	ldr	r0, [pc, #116]	; (80033ec <MX_GPIO_Init+0x114>)
 8003378:	f001 fda2 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800337c:	2302      	movs	r3, #2
 800337e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003384:	2301      	movs	r3, #1
 8003386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	4619      	mov	r1, r3
 800338e:	4817      	ldr	r0, [pc, #92]	; (80033ec <MX_GPIO_Init+0x114>)
 8003390:	f001 fd96 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003394:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2302      	movs	r3, #2
 80033a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4619      	mov	r1, r3
 80033ac:	480f      	ldr	r0, [pc, #60]	; (80033ec <MX_GPIO_Init+0x114>)
 80033ae:	f001 fd87 	bl	8004ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b8:	2301      	movs	r3, #1
 80033ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2302      	movs	r3, #2
 80033c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	4619      	mov	r1, r3
 80033ca:	4809      	ldr	r0, [pc, #36]	; (80033f0 <MX_GPIO_Init+0x118>)
 80033cc:	f001 fd78 	bl	8004ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2101      	movs	r1, #1
 80033d4:	2006      	movs	r0, #6
 80033d6:	f001 fad8 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80033da:	2006      	movs	r0, #6
 80033dc:	f001 faf1 	bl	80049c2 <HAL_NVIC_EnableIRQ>

}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010c00 	.word	0x40010c00
 80033f0:	40010800 	.word	0x40010800
 80033f4:	10210000 	.word	0x10210000

080033f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033fc:	b672      	cpsid	i
}
 80033fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003400:	e7fe      	b.n	8003400 <Error_Handler+0x8>
	...

08003404 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800340a:	f000 fb21 	bl	8003a50 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800340e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003412:	2201      	movs	r2, #1
 8003414:	2178      	movs	r1, #120	; 0x78
 8003416:	485b      	ldr	r0, [pc, #364]	; (8003584 <SSD1306_Init+0x180>)
 8003418:	f002 f978 	bl	800570c <HAL_I2C_IsDeviceReady>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003422:	2300      	movs	r3, #0
 8003424:	e0a9      	b.n	800357a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003426:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800342a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800342c:	e002      	b.n	8003434 <SSD1306_Init+0x30>
		p--;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3b01      	subs	r3, #1
 8003432:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800343a:	22ae      	movs	r2, #174	; 0xae
 800343c:	2100      	movs	r1, #0
 800343e:	2078      	movs	r0, #120	; 0x78
 8003440:	f000 fb62 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003444:	2220      	movs	r2, #32
 8003446:	2100      	movs	r1, #0
 8003448:	2078      	movs	r0, #120	; 0x78
 800344a:	f000 fb5d 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800344e:	2210      	movs	r2, #16
 8003450:	2100      	movs	r1, #0
 8003452:	2078      	movs	r0, #120	; 0x78
 8003454:	f000 fb58 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003458:	22b0      	movs	r2, #176	; 0xb0
 800345a:	2100      	movs	r1, #0
 800345c:	2078      	movs	r0, #120	; 0x78
 800345e:	f000 fb53 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003462:	22c8      	movs	r2, #200	; 0xc8
 8003464:	2100      	movs	r1, #0
 8003466:	2078      	movs	r0, #120	; 0x78
 8003468:	f000 fb4e 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	2078      	movs	r0, #120	; 0x78
 8003472:	f000 fb49 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003476:	2210      	movs	r2, #16
 8003478:	2100      	movs	r1, #0
 800347a:	2078      	movs	r0, #120	; 0x78
 800347c:	f000 fb44 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003480:	2240      	movs	r2, #64	; 0x40
 8003482:	2100      	movs	r1, #0
 8003484:	2078      	movs	r0, #120	; 0x78
 8003486:	f000 fb3f 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800348a:	2281      	movs	r2, #129	; 0x81
 800348c:	2100      	movs	r1, #0
 800348e:	2078      	movs	r0, #120	; 0x78
 8003490:	f000 fb3a 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	2100      	movs	r1, #0
 8003498:	2078      	movs	r0, #120	; 0x78
 800349a:	f000 fb35 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800349e:	22a1      	movs	r2, #161	; 0xa1
 80034a0:	2100      	movs	r1, #0
 80034a2:	2078      	movs	r0, #120	; 0x78
 80034a4:	f000 fb30 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80034a8:	22a6      	movs	r2, #166	; 0xa6
 80034aa:	2100      	movs	r1, #0
 80034ac:	2078      	movs	r0, #120	; 0x78
 80034ae:	f000 fb2b 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80034b2:	22a8      	movs	r2, #168	; 0xa8
 80034b4:	2100      	movs	r1, #0
 80034b6:	2078      	movs	r0, #120	; 0x78
 80034b8:	f000 fb26 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80034bc:	223f      	movs	r2, #63	; 0x3f
 80034be:	2100      	movs	r1, #0
 80034c0:	2078      	movs	r0, #120	; 0x78
 80034c2:	f000 fb21 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80034c6:	22a4      	movs	r2, #164	; 0xa4
 80034c8:	2100      	movs	r1, #0
 80034ca:	2078      	movs	r0, #120	; 0x78
 80034cc:	f000 fb1c 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80034d0:	22d3      	movs	r2, #211	; 0xd3
 80034d2:	2100      	movs	r1, #0
 80034d4:	2078      	movs	r0, #120	; 0x78
 80034d6:	f000 fb17 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	2078      	movs	r0, #120	; 0x78
 80034e0:	f000 fb12 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80034e4:	22d5      	movs	r2, #213	; 0xd5
 80034e6:	2100      	movs	r1, #0
 80034e8:	2078      	movs	r0, #120	; 0x78
 80034ea:	f000 fb0d 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80034ee:	22f0      	movs	r2, #240	; 0xf0
 80034f0:	2100      	movs	r1, #0
 80034f2:	2078      	movs	r0, #120	; 0x78
 80034f4:	f000 fb08 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80034f8:	22d9      	movs	r2, #217	; 0xd9
 80034fa:	2100      	movs	r1, #0
 80034fc:	2078      	movs	r0, #120	; 0x78
 80034fe:	f000 fb03 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003502:	2222      	movs	r2, #34	; 0x22
 8003504:	2100      	movs	r1, #0
 8003506:	2078      	movs	r0, #120	; 0x78
 8003508:	f000 fafe 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800350c:	22da      	movs	r2, #218	; 0xda
 800350e:	2100      	movs	r1, #0
 8003510:	2078      	movs	r0, #120	; 0x78
 8003512:	f000 faf9 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003516:	2212      	movs	r2, #18
 8003518:	2100      	movs	r1, #0
 800351a:	2078      	movs	r0, #120	; 0x78
 800351c:	f000 faf4 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003520:	22db      	movs	r2, #219	; 0xdb
 8003522:	2100      	movs	r1, #0
 8003524:	2078      	movs	r0, #120	; 0x78
 8003526:	f000 faef 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800352a:	2220      	movs	r2, #32
 800352c:	2100      	movs	r1, #0
 800352e:	2078      	movs	r0, #120	; 0x78
 8003530:	f000 faea 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003534:	228d      	movs	r2, #141	; 0x8d
 8003536:	2100      	movs	r1, #0
 8003538:	2078      	movs	r0, #120	; 0x78
 800353a:	f000 fae5 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800353e:	2214      	movs	r2, #20
 8003540:	2100      	movs	r1, #0
 8003542:	2078      	movs	r0, #120	; 0x78
 8003544:	f000 fae0 	bl	8003b08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003548:	22af      	movs	r2, #175	; 0xaf
 800354a:	2100      	movs	r1, #0
 800354c:	2078      	movs	r0, #120	; 0x78
 800354e:	f000 fadb 	bl	8003b08 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003552:	222e      	movs	r2, #46	; 0x2e
 8003554:	2100      	movs	r1, #0
 8003556:	2078      	movs	r0, #120	; 0x78
 8003558:	f000 fad6 	bl	8003b08 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800355c:	2000      	movs	r0, #0
 800355e:	f000 f843 	bl	80035e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003562:	f000 f813 	bl	800358c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <SSD1306_Init+0x184>)
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <SSD1306_Init+0x184>)
 800356e:	2200      	movs	r2, #0
 8003570:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <SSD1306_Init+0x184>)
 8003574:	2201      	movs	r2, #1
 8003576:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003578:	2301      	movs	r3, #1
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200008cc 	.word	0x200008cc
 8003588:	200006a0 	.word	0x200006a0

0800358c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003592:	2300      	movs	r3, #0
 8003594:	71fb      	strb	r3, [r7, #7]
 8003596:	e01d      	b.n	80035d4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	3b50      	subs	r3, #80	; 0x50
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	2100      	movs	r1, #0
 80035a2:	2078      	movs	r0, #120	; 0x78
 80035a4:	f000 fab0 	bl	8003b08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2078      	movs	r0, #120	; 0x78
 80035ae:	f000 faab 	bl	8003b08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80035b2:	2210      	movs	r2, #16
 80035b4:	2100      	movs	r1, #0
 80035b6:	2078      	movs	r0, #120	; 0x78
 80035b8:	f000 faa6 	bl	8003b08 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80035bc:	79fb      	ldrb	r3, [r7, #7]
 80035be:	01db      	lsls	r3, r3, #7
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <SSD1306_UpdateScreen+0x58>)
 80035c2:	441a      	add	r2, r3
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	2140      	movs	r1, #64	; 0x40
 80035c8:	2078      	movs	r0, #120	; 0x78
 80035ca:	f000 fa55 	bl	8003a78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	3301      	adds	r3, #1
 80035d2:	71fb      	strb	r3, [r7, #7]
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d9de      	bls.n	8003598 <SSD1306_UpdateScreen+0xc>
	}
}
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	200002a0 	.word	0x200002a0

080035e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <SSD1306_Fill+0x14>
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <SSD1306_Fill+0x16>
 80035fc:	23ff      	movs	r3, #255	; 0xff
 80035fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003602:	4619      	mov	r1, r3
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <SSD1306_Fill+0x2c>)
 8003606:	f009 ff83 	bl	800d510 <memset>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200002a0 	.word	0x200002a0

08003618 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
 8003622:	460b      	mov	r3, r1
 8003624:	80bb      	strh	r3, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	70fb      	strb	r3, [r7, #3]
	if (
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b7f      	cmp	r3, #127	; 0x7f
 800362e:	d848      	bhi.n	80036c2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003630:	88bb      	ldrh	r3, [r7, #4]
 8003632:	2b3f      	cmp	r3, #63	; 0x3f
 8003634:	d845      	bhi.n	80036c2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003636:	4b25      	ldr	r3, [pc, #148]	; (80036cc <SSD1306_DrawPixel+0xb4>)
 8003638:	791b      	ldrb	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d11a      	bne.n	8003688 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	88bb      	ldrh	r3, [r7, #4]
 8003656:	08db      	lsrs	r3, r3, #3
 8003658:	b298      	uxth	r0, r3
 800365a:	4603      	mov	r3, r0
 800365c:	01db      	lsls	r3, r3, #7
 800365e:	4413      	add	r3, r2
 8003660:	4a1b      	ldr	r2, [pc, #108]	; (80036d0 <SSD1306_DrawPixel+0xb8>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	b25a      	sxtb	r2, r3
 8003666:	88bb      	ldrh	r3, [r7, #4]
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	b25b      	sxtb	r3, r3
 8003674:	4313      	orrs	r3, r2
 8003676:	b259      	sxtb	r1, r3
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	4603      	mov	r3, r0
 800367c:	01db      	lsls	r3, r3, #7
 800367e:	4413      	add	r3, r2
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <SSD1306_DrawPixel+0xb8>)
 8003684:	54d1      	strb	r1, [r2, r3]
 8003686:	e01d      	b.n	80036c4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	88bb      	ldrh	r3, [r7, #4]
 800368c:	08db      	lsrs	r3, r3, #3
 800368e:	b298      	uxth	r0, r3
 8003690:	4603      	mov	r3, r0
 8003692:	01db      	lsls	r3, r3, #7
 8003694:	4413      	add	r3, r2
 8003696:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <SSD1306_DrawPixel+0xb8>)
 8003698:	5cd3      	ldrb	r3, [r2, r3]
 800369a:	b25a      	sxtb	r2, r3
 800369c:	88bb      	ldrh	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	2101      	movs	r1, #1
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	4013      	ands	r3, r2
 80036b0:	b259      	sxtb	r1, r3
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	4603      	mov	r3, r0
 80036b6:	01db      	lsls	r3, r3, #7
 80036b8:	4413      	add	r3, r2
 80036ba:	b2c9      	uxtb	r1, r1
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <SSD1306_DrawPixel+0xb8>)
 80036be:	54d1      	strb	r1, [r2, r3]
 80036c0:	e000      	b.n	80036c4 <SSD1306_DrawPixel+0xac>
		return;
 80036c2:	bf00      	nop
	}
}
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	200006a0 	.word	0x200006a0
 80036d0:	200002a0 	.word	0x200002a0

080036d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	460a      	mov	r2, r1
 80036de:	80fb      	strh	r3, [r7, #6]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80036e4:	4a05      	ldr	r2, [pc, #20]	; (80036fc <SSD1306_GotoXY+0x28>)
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80036ea:	4a04      	ldr	r2, [pc, #16]	; (80036fc <SSD1306_GotoXY+0x28>)
 80036ec:	88bb      	ldrh	r3, [r7, #4]
 80036ee:	8053      	strh	r3, [r2, #2]
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bc80      	pop	{r7}
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	200006a0 	.word	0x200006a0

08003700 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	71fb      	strb	r3, [r7, #7]
 800370c:	4613      	mov	r3, r2
 800370e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003710:	4b3a      	ldr	r3, [pc, #232]	; (80037fc <SSD1306_Putc+0xfc>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	4413      	add	r3, r2
	if (
 800371c:	2b7f      	cmp	r3, #127	; 0x7f
 800371e:	dc07      	bgt.n	8003730 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003720:	4b36      	ldr	r3, [pc, #216]	; (80037fc <SSD1306_Putc+0xfc>)
 8003722:	885b      	ldrh	r3, [r3, #2]
 8003724:	461a      	mov	r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800372c:	2b3f      	cmp	r3, #63	; 0x3f
 800372e:	dd01      	ble.n	8003734 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003730:	2300      	movs	r3, #0
 8003732:	e05e      	b.n	80037f2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e04b      	b.n	80037d2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	3b20      	subs	r3, #32
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	7849      	ldrb	r1, [r1, #1]
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4619      	mov	r1, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	440b      	add	r3, r1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	e030      	b.n	80037c0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d010      	beq.n	8003790 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <SSD1306_Putc+0xfc>)
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	b29b      	uxth	r3, r3
 8003776:	4413      	add	r3, r2
 8003778:	b298      	uxth	r0, r3
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <SSD1306_Putc+0xfc>)
 800377c:	885a      	ldrh	r2, [r3, #2]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	b29b      	uxth	r3, r3
 8003782:	4413      	add	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	79ba      	ldrb	r2, [r7, #6]
 8003788:	4619      	mov	r1, r3
 800378a:	f7ff ff45 	bl	8003618 <SSD1306_DrawPixel>
 800378e:	e014      	b.n	80037ba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <SSD1306_Putc+0xfc>)
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	b29b      	uxth	r3, r3
 8003798:	4413      	add	r3, r2
 800379a:	b298      	uxth	r0, r3
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <SSD1306_Putc+0xfc>)
 800379e:	885a      	ldrh	r2, [r3, #2]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	b299      	uxth	r1, r3
 80037a8:	79bb      	ldrb	r3, [r7, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	f7ff ff2f 	bl	8003618 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	3301      	adds	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d3c8      	bcc.n	800375e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	785b      	ldrb	r3, [r3, #1]
 80037d6:	461a      	mov	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	4293      	cmp	r3, r2
 80037dc:	d3ad      	bcc.n	800373a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <SSD1306_Putc+0xfc>)
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <SSD1306_Putc+0xfc>)
 80037ee:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80037f0:	79fb      	ldrb	r3, [r7, #7]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200006a0 	.word	0x200006a0

08003800 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800380e:	e012      	b.n	8003836 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	79fa      	ldrb	r2, [r7, #7]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff71 	bl	8003700 <SSD1306_Putc>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d002      	beq.n	8003830 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	e008      	b.n	8003842 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e8      	bne.n	8003810 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800384a:	b590      	push	{r4, r7, lr}
 800384c:	b087      	sub	sp, #28
 800384e:	af00      	add	r7, sp, #0
 8003850:	4604      	mov	r4, r0
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	461a      	mov	r2, r3
 8003858:	4623      	mov	r3, r4
 800385a:	80fb      	strh	r3, [r7, #6]
 800385c:	4603      	mov	r3, r0
 800385e:	80bb      	strh	r3, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
 8003864:	4613      	mov	r3, r2
 8003866:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b7f      	cmp	r3, #127	; 0x7f
 800386c:	d901      	bls.n	8003872 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800386e:	237f      	movs	r3, #127	; 0x7f
 8003870:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8003872:	887b      	ldrh	r3, [r7, #2]
 8003874:	2b7f      	cmp	r3, #127	; 0x7f
 8003876:	d901      	bls.n	800387c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8003878:	237f      	movs	r3, #127	; 0x7f
 800387a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800387c:	88bb      	ldrh	r3, [r7, #4]
 800387e:	2b3f      	cmp	r3, #63	; 0x3f
 8003880:	d901      	bls.n	8003886 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8003882:	233f      	movs	r3, #63	; 0x3f
 8003884:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8003886:	883b      	ldrh	r3, [r7, #0]
 8003888:	2b3f      	cmp	r3, #63	; 0x3f
 800388a:	d901      	bls.n	8003890 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800388c:	233f      	movs	r3, #63	; 0x3f
 800388e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	429a      	cmp	r2, r3
 8003896:	d205      	bcs.n	80038a4 <SSD1306_DrawLine+0x5a>
 8003898:	887a      	ldrh	r2, [r7, #2]
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b21b      	sxth	r3, r3
 80038a2:	e004      	b.n	80038ae <SSD1306_DrawLine+0x64>
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	b21b      	sxth	r3, r3
 80038ae:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80038b0:	88ba      	ldrh	r2, [r7, #4]
 80038b2:	883b      	ldrh	r3, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d205      	bcs.n	80038c4 <SSD1306_DrawLine+0x7a>
 80038b8:	883a      	ldrh	r2, [r7, #0]
 80038ba:	88bb      	ldrh	r3, [r7, #4]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	b29b      	uxth	r3, r3
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	e004      	b.n	80038ce <SSD1306_DrawLine+0x84>
 80038c4:	88ba      	ldrh	r2, [r7, #4]
 80038c6:	883b      	ldrh	r3, [r7, #0]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	b21b      	sxth	r3, r3
 80038ce:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80038d0:	88fa      	ldrh	r2, [r7, #6]
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d201      	bcs.n	80038dc <SSD1306_DrawLine+0x92>
 80038d8:	2301      	movs	r3, #1
 80038da:	e001      	b.n	80038e0 <SSD1306_DrawLine+0x96>
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80038e2:	88ba      	ldrh	r2, [r7, #4]
 80038e4:	883b      	ldrh	r3, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d201      	bcs.n	80038ee <SSD1306_DrawLine+0xa4>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e001      	b.n	80038f2 <SSD1306_DrawLine+0xa8>
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80038f4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	dd06      	ble.n	800390e <SSD1306_DrawLine+0xc4>
 8003900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003904:	0fda      	lsrs	r2, r3, #31
 8003906:	4413      	add	r3, r2
 8003908:	105b      	asrs	r3, r3, #1
 800390a:	b21b      	sxth	r3, r3
 800390c:	e006      	b.n	800391c <SSD1306_DrawLine+0xd2>
 800390e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003912:	0fda      	lsrs	r2, r3, #31
 8003914:	4413      	add	r3, r2
 8003916:	105b      	asrs	r3, r3, #1
 8003918:	425b      	negs	r3, r3
 800391a:	b21b      	sxth	r3, r3
 800391c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800391e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d129      	bne.n	800397a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8003926:	883a      	ldrh	r2, [r7, #0]
 8003928:	88bb      	ldrh	r3, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d205      	bcs.n	800393a <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800392e:	883b      	ldrh	r3, [r7, #0]
 8003930:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8003932:	88bb      	ldrh	r3, [r7, #4]
 8003934:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	429a      	cmp	r2, r3
 8003940:	d205      	bcs.n	800394e <SSD1306_DrawLine+0x104>
			tmp = x1;
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800394a:	893b      	ldrh	r3, [r7, #8]
 800394c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800394e:	88bb      	ldrh	r3, [r7, #4]
 8003950:	82bb      	strh	r3, [r7, #20]
 8003952:	e00c      	b.n	800396e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8003954:	8ab9      	ldrh	r1, [r7, #20]
 8003956:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff fe5b 	bl	8003618 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003966:	b29b      	uxth	r3, r3
 8003968:	3301      	adds	r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	82bb      	strh	r3, [r7, #20]
 800396e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003972:	883b      	ldrh	r3, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	dded      	ble.n	8003954 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8003978:	e05f      	b.n	8003a3a <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800397a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d129      	bne.n	80039d6 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8003982:	883a      	ldrh	r2, [r7, #0]
 8003984:	88bb      	ldrh	r3, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d205      	bcs.n	8003996 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800398a:	883b      	ldrh	r3, [r7, #0]
 800398c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800398e:	88bb      	ldrh	r3, [r7, #4]
 8003990:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	429a      	cmp	r2, r3
 800399c:	d205      	bcs.n	80039aa <SSD1306_DrawLine+0x160>
			tmp = x1;
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80039a6:	893b      	ldrh	r3, [r7, #8]
 80039a8:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	82bb      	strh	r3, [r7, #20]
 80039ae:	e00c      	b.n	80039ca <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80039b0:	8abb      	ldrh	r3, [r7, #20]
 80039b2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80039b6:	88b9      	ldrh	r1, [r7, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fe2d 	bl	8003618 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80039be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	82bb      	strh	r3, [r7, #20]
 80039ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80039ce:	887b      	ldrh	r3, [r7, #2]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	dded      	ble.n	80039b0 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80039d4:	e031      	b.n	8003a3a <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80039d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80039da:	88b9      	ldrh	r1, [r7, #4]
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fe1a 	bl	8003618 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d103      	bne.n	80039f4 <SSD1306_DrawLine+0x1aa>
 80039ec:	88ba      	ldrh	r2, [r7, #4]
 80039ee:	883b      	ldrh	r3, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d021      	beq.n	8003a38 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80039f4:	8afb      	ldrh	r3, [r7, #22]
 80039f6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80039f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80039fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a00:	425b      	negs	r3, r3
 8003a02:	429a      	cmp	r2, r3
 8003a04:	dd08      	ble.n	8003a18 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8003a06:	8afa      	ldrh	r2, [r7, #22]
 8003a08:	8a3b      	ldrh	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8003a10:	89fa      	ldrh	r2, [r7, #14]
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	4413      	add	r3, r2
 8003a16:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8003a18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a1c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	dad8      	bge.n	80039d6 <SSD1306_DrawLine+0x18c>
			err += dx;
 8003a24:	8afa      	ldrh	r2, [r7, #22]
 8003a26:	8a7b      	ldrh	r3, [r7, #18]
 8003a28:	4413      	add	r3, r2
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8003a2e:	89ba      	ldrh	r2, [r7, #12]
 8003a30:	88bb      	ldrh	r3, [r7, #4]
 8003a32:	4413      	add	r3, r2
 8003a34:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8003a36:	e7ce      	b.n	80039d6 <SSD1306_DrawLine+0x18c>
			break;
 8003a38:	bf00      	nop
		} 
	}
}
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff fdcf 	bl	80035e8 <SSD1306_Fill>
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <ssd1306_I2C_Init+0x24>)
 8003a58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003a5a:	e002      	b.n	8003a62 <ssd1306_I2C_Init+0x12>
		p--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f9      	bne.n	8003a5c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	0003d090 	.word	0x0003d090

08003a78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b0c7      	sub	sp, #284	; 0x11c
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	4639      	mov	r1, r7
 8003a84:	600a      	str	r2, [r1, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	1dbb      	adds	r3, r7, #6
 8003a90:	4602      	mov	r2, r0
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	460a      	mov	r2, r1
 8003a98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	1dba      	adds	r2, r7, #6
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003aaa:	e010      	b.n	8003ace <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003aac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ab0:	463a      	mov	r2, r7
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003aba:	3301      	adds	r3, #1
 8003abc:	7811      	ldrb	r1, [r2, #0]
 8003abe:	f107 020c 	add.w	r2, r7, #12
 8003ac2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003ac4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003ace:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	1d3a      	adds	r2, r7, #4
 8003ad6:	8812      	ldrh	r2, [r2, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d8e7      	bhi.n	8003aac <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003adc:	1dfb      	adds	r3, r7, #7
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	b299      	uxth	r1, r3
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	f107 020c 	add.w	r2, r7, #12
 8003aee:	200a      	movs	r0, #10
 8003af0:	9000      	str	r0, [sp, #0]
 8003af2:	4804      	ldr	r0, [pc, #16]	; (8003b04 <ssd1306_I2C_WriteMulti+0x8c>)
 8003af4:	f001 fd0c 	bl	8005510 <HAL_I2C_Master_Transmit>
}
 8003af8:	bf00      	nop
 8003afa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd90      	pop	{r4, r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200008cc 	.word	0x200008cc

08003b08 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
 8003b12:	460b      	mov	r3, r1
 8003b14:	71bb      	strb	r3, [r7, #6]
 8003b16:	4613      	mov	r3, r2
 8003b18:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003b1a:	79bb      	ldrb	r3, [r7, #6]
 8003b1c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003b1e:	797b      	ldrb	r3, [r7, #5]
 8003b20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	b299      	uxth	r1, r3
 8003b26:	f107 020c 	add.w	r2, r7, #12
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2302      	movs	r3, #2
 8003b30:	4803      	ldr	r0, [pc, #12]	; (8003b40 <ssd1306_I2C_Write+0x38>)
 8003b32:	f001 fced 	bl	8005510 <HAL_I2C_Master_Transmit>
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200008cc 	.word	0x200008cc

08003b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	61d3      	str	r3, [r2, #28]
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_MspInit+0x5c>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	607b      	str	r3, [r7, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_MspInit+0x60>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_MspInit+0x60>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40010000 	.word	0x40010000

08003ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0310 	add.w	r3, r7, #16
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <HAL_ADC_MspInit+0xbc>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d149      	bne.n	8003c5c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	6193      	str	r3, [r2, #24]
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	4b21      	ldr	r3, [pc, #132]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003be6:	f043 0304 	orr.w	r3, r3, #4
 8003bea:	6193      	str	r3, [r2, #24]
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_ADC_MspInit+0xc0>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c00:	f107 0310 	add.w	r3, r7, #16
 8003c04:	4619      	mov	r1, r3
 8003c06:	4819      	ldr	r0, [pc, #100]	; (8003c6c <HAL_ADC_MspInit+0xc4>)
 8003c08:	f001 f95a 	bl	8004ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c0e:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_ADC_MspInit+0xcc>)
 8003c10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c18:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c24:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c32:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c36:	2220      	movs	r2, #32
 8003c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c40:	480b      	ldr	r0, [pc, #44]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c42:	f000 fed9 	bl	80049f8 <HAL_DMA_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003c4c:	f7ff fbd4 	bl	80033f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c54:	621a      	str	r2, [r3, #32]
 8003c56:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <HAL_ADC_MspInit+0xc8>)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c5c:	bf00      	nop
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40012400 	.word	0x40012400
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010800 	.word	0x40010800
 8003c70:	20000c14 	.word	0x20000c14
 8003c74:	40020008 	.word	0x40020008

08003c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0318 	add.w	r3, r7, #24
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a33      	ldr	r2, [pc, #204]	; (8003d60 <HAL_I2C_MspInit+0xe8>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d12c      	bne.n	8003cf2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	4a31      	ldr	r2, [pc, #196]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003c9e:	f043 0308 	orr.w	r3, r3, #8
 8003ca2:	6193      	str	r3, [r2, #24]
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cb0:	23c0      	movs	r3, #192	; 0xc0
 8003cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cb4:	2312      	movs	r3, #18
 8003cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cbc:	f107 0318 	add.w	r3, r7, #24
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4829      	ldr	r0, [pc, #164]	; (8003d68 <HAL_I2C_MspInit+0xf0>)
 8003cc4:	f001 f8fc 	bl	8004ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003cc8:	4b26      	ldr	r3, [pc, #152]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003cce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cd2:	61d3      	str	r3, [r2, #28]
 8003cd4:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	2020      	movs	r0, #32
 8003ce6:	f000 fe50 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003cea:	2020      	movs	r0, #32
 8003cec:	f000 fe69 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003cf0:	e031      	b.n	8003d56 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <HAL_I2C_MspInit+0xf4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d12c      	bne.n	8003d56 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003d02:	f043 0308 	orr.w	r3, r3, #8
 8003d06:	6193      	str	r3, [r2, #24]
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d14:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d1a:	2312      	movs	r3, #18
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d22:	f107 0318 	add.w	r3, r7, #24
 8003d26:	4619      	mov	r1, r3
 8003d28:	480f      	ldr	r0, [pc, #60]	; (8003d68 <HAL_I2C_MspInit+0xf0>)
 8003d2a:	f001 f8c9 	bl	8004ec0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	4a0c      	ldr	r2, [pc, #48]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003d34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d38:	61d3      	str	r3, [r2, #28]
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_I2C_MspInit+0xec>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	2022      	movs	r0, #34	; 0x22
 8003d4c:	f000 fe1d 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003d50:	2022      	movs	r0, #34	; 0x22
 8003d52:	f000 fe36 	bl	80049c2 <HAL_NVIC_EnableIRQ>
}
 8003d56:	bf00      	nop
 8003d58:	3728      	adds	r7, #40	; 0x28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40005400 	.word	0x40005400
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010c00 	.word	0x40010c00
 8003d6c:	40005800 	.word	0x40005800

08003d70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d10b      	bne.n	8003d9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_TIM_PWM_MspInit+0x34>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <HAL_TIM_PWM_MspInit+0x34>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	61d3      	str	r3, [r2, #28]
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_TIM_PWM_MspInit+0x34>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d12a      	bne.n	8003e1e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <HAL_TIM_MspPostInit+0x80>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <HAL_TIM_MspPostInit+0x80>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	6193      	str	r3, [r2, #24]
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <HAL_TIM_MspPostInit+0x80>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de6:	2302      	movs	r3, #2
 8003de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2302      	movs	r3, #2
 8003dec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	4619      	mov	r1, r3
 8003df4:	480d      	ldr	r0, [pc, #52]	; (8003e2c <HAL_TIM_MspPostInit+0x84>)
 8003df6:	f001 f863 	bl	8004ec0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_TIM_MspPostInit+0x88>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <HAL_TIM_MspPostInit+0x88>)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e1e:	bf00      	nop
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	40010800 	.word	0x40010800
 8003e30:	40010000 	.word	0x40010000

08003e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e38:	e7fe      	b.n	8003e38 <NMI_Handler+0x4>

08003e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e3e:	e7fe      	b.n	8003e3e <HardFault_Handler+0x4>

08003e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <MemManage_Handler+0x4>

08003e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e4a:	e7fe      	b.n	8003e4a <BusFault_Handler+0x4>

08003e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e50:	e7fe      	b.n	8003e50 <UsageFault_Handler+0x4>

08003e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e52:	b480      	push	{r7}
 8003e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr

08003e76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e7a:	f000 f8a3 	bl	8003fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003e86:	2001      	movs	r0, #1
 8003e88:	f001 f9e6 	bl	8005258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <DMA1_Channel1_IRQHandler+0x10>)
 8003e96:	f000 fedf 	bl	8004c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000c14 	.word	0x20000c14

08003ea4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003eaa:	f002 fbb4 	bl	8006616 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20001954 	.word	0x20001954

08003eb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ebc:	4802      	ldr	r0, [pc, #8]	; (8003ec8 <I2C1_ER_IRQHandler+0x10>)
 8003ebe:	f001 fd53 	bl	8005968 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200008cc 	.word	0x200008cc

08003ecc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003ed0:	4802      	ldr	r0, [pc, #8]	; (8003edc <I2C2_ER_IRQHandler+0x10>)
 8003ed2:	f001 fd49 	bl	8005968 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000920 	.word	0x20000920

08003ee0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eec:	480c      	ldr	r0, [pc, #48]	; (8003f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eee:	490d      	ldr	r1, [pc, #52]	; (8003f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ef4:	e002      	b.n	8003efc <LoopCopyDataInit>

08003ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003efa:	3304      	adds	r3, #4

08003efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f00:	d3f9      	bcc.n	8003ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f04:	4c0a      	ldr	r4, [pc, #40]	; (8003f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f08:	e001      	b.n	8003f0e <LoopFillZerobss>

08003f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f0c:	3204      	adds	r2, #4

08003f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f10:	d3fb      	bcc.n	8003f0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f12:	f7ff ffe5 	bl	8003ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f16:	f009 faaf 	bl	800d478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f1a:	f7fe fd59 	bl	80029d0 <main>
  bx lr
 8003f1e:	4770      	bx	lr
  ldr r0, =_sdata
 8003f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f24:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 8003f28:	0800ea3c 	.word	0x0800ea3c
  ldr r2, =_sbss
 8003f2c:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8003f30:	20001c40 	.word	0x20001c40

08003f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f34:	e7fe      	b.n	8003f34 <ADC1_2_IRQHandler>
	...

08003f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_Init+0x28>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <HAL_Init+0x28>)
 8003f42:	f043 0310 	orr.w	r3, r3, #16
 8003f46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f48:	2003      	movs	r0, #3
 8003f4a:	f000 fd13 	bl	8004974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f4e:	200f      	movs	r0, #15
 8003f50:	f000 f808 	bl	8003f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f54:	f7ff fdf6 	bl	8003b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40022000 	.word	0x40022000

08003f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_InitTick+0x54>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_InitTick+0x58>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fd2b 	bl	80049de <HAL_SYSTICK_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e00e      	b.n	8003fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b0f      	cmp	r3, #15
 8003f96:	d80a      	bhi.n	8003fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	f000 fcf3 	bl	800498a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fa4:	4a06      	ldr	r2, [pc, #24]	; (8003fc0 <HAL_InitTick+0x5c>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20000078 	.word	0x20000078
 8003fbc:	20000080 	.word	0x20000080
 8003fc0:	2000007c 	.word	0x2000007c

08003fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_IncTick+0x1c>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_IncTick+0x20>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4a03      	ldr	r2, [pc, #12]	; (8003fe4 <HAL_IncTick+0x20>)
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	20000080 	.word	0x20000080
 8003fe4:	20000cb4 	.word	0x20000cb4

08003fe8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return uwTick;
 8003fec:	4b02      	ldr	r3, [pc, #8]	; (8003ff8 <HAL_GetTick+0x10>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000cb4 	.word	0x20000cb4

08003ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004004:	f7ff fff0 	bl	8003fe8 <HAL_GetTick>
 8004008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d005      	beq.n	8004022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_Delay+0x44>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004022:	bf00      	nop
 8004024:	f7ff ffe0 	bl	8003fe8 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	429a      	cmp	r2, r3
 8004032:	d8f7      	bhi.n	8004024 <HAL_Delay+0x28>
  {
  }
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000080 	.word	0x20000080

08004044 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0be      	b.n	80041e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fd90 	bl	8003ba8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 faff 	bl	800468c <ADC_ConversionStop_Disable>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 8099 	bne.w	80041d2 <HAL_ADC_Init+0x18e>
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 8095 	bne.w	80041d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040b0:	f023 0302 	bic.w	r3, r3, #2
 80040b4:	f043 0202 	orr.w	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7b1b      	ldrb	r3, [r3, #12]
 80040ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80040cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040dc:	d003      	beq.n	80040e6 <HAL_ADC_Init+0xa2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d102      	bne.n	80040ec <HAL_ADC_Init+0xa8>
 80040e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ea:	e000      	b.n	80040ee <HAL_ADC_Init+0xaa>
 80040ec:	2300      	movs	r3, #0
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7d1b      	ldrb	r3, [r3, #20]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d119      	bne.n	8004130 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	7b1b      	ldrb	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	3b01      	subs	r3, #1
 800410a:	035a      	lsls	r2, r3, #13
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	e00b      	b.n	8004130 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f043 0220 	orr.w	r2, r3, #32
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	f043 0201 	orr.w	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	4b28      	ldr	r3, [pc, #160]	; (80041ec <HAL_ADC_Init+0x1a8>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6812      	ldr	r2, [r2, #0]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	430b      	orrs	r3, r1
 8004156:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004160:	d003      	beq.n	800416a <HAL_ADC_Init+0x126>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d104      	bne.n	8004174 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	3b01      	subs	r3, #1
 8004170:	051b      	lsls	r3, r3, #20
 8004172:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	430a      	orrs	r2, r1
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <HAL_ADC_Init+0x1ac>)
 8004190:	4013      	ands	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	429a      	cmp	r2, r3
 8004196:	d10b      	bne.n	80041b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041ae:	e018      	b.n	80041e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f023 0312 	bic.w	r3, r3, #18
 80041b8:	f043 0210 	orr.w	r2, r3, #16
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f043 0201 	orr.w	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80041d0:	e007      	b.n	80041e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	ffe1f7fd 	.word	0xffe1f7fd
 80041f0:	ff1f0efe 	.word	0xff1f0efe

080041f4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a64      	ldr	r2, [pc, #400]	; (800439c <HAL_ADC_Start_DMA+0x1a8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_ADC_Start_DMA+0x24>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a63      	ldr	r2, [pc, #396]	; (80043a0 <HAL_ADC_Start_DMA+0x1ac>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d106      	bne.n	8004226 <HAL_ADC_Start_DMA+0x32>
 8004218:	4b60      	ldr	r3, [pc, #384]	; (800439c <HAL_ADC_Start_DMA+0x1a8>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f040 80b3 	bne.w	800438c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_ADC_Start_DMA+0x40>
 8004230:	2302      	movs	r3, #2
 8004232:	e0ae      	b.n	8004392 <HAL_ADC_Start_DMA+0x19e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 f9cb 	bl	80045d8 <ADC_Enable>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 809a 	bne.w	8004382 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a4e      	ldr	r2, [pc, #312]	; (80043a0 <HAL_ADC_Start_DMA+0x1ac>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d105      	bne.n	8004278 <HAL_ADC_Start_DMA+0x84>
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_ADC_Start_DMA+0x1a8>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d115      	bne.n	80042a4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	2b00      	cmp	r3, #0
 8004290:	d026      	beq.n	80042e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800429a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80042a2:	e01d      	b.n	80042e0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a39      	ldr	r2, [pc, #228]	; (800439c <HAL_ADC_Start_DMA+0x1a8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <HAL_ADC_Start_DMA+0xd0>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_ADC_Start_DMA+0x1ac>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10d      	bne.n	80042e0 <HAL_ADC_Start_DMA+0xec>
 80042c4:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_ADC_Start_DMA+0x1a8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80042d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d006      	beq.n	80042fa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f023 0206 	bic.w	r2, r3, #6
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042f8:	e002      	b.n	8004300 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4a25      	ldr	r2, [pc, #148]	; (80043a4 <HAL_ADC_Start_DMA+0x1b0>)
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4a24      	ldr	r2, [pc, #144]	; (80043a8 <HAL_ADC_Start_DMA+0x1b4>)
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a23      	ldr	r2, [pc, #140]	; (80043ac <HAL_ADC_Start_DMA+0x1b8>)
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0202 	mvn.w	r2, #2
 8004328:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004338:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a18      	ldr	r0, [r3, #32]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	334c      	adds	r3, #76	; 0x4c
 8004344:	4619      	mov	r1, r3
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f000 fbaf 	bl	8004aac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004358:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800435c:	d108      	bne.n	8004370 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800436c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800436e:	e00f      	b.n	8004390 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800437e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004380:	e006      	b.n	8004390 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800438a:	e001      	b.n	8004390 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40012400 	.word	0x40012400
 80043a0:	40012800 	.word	0x40012800
 80043a4:	0800470f 	.word	0x0800470f
 80043a8:	0800478b 	.word	0x0800478b
 80043ac:	080047a7 	.word	0x080047a7

080043b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x20>
 8004404:	2302      	movs	r3, #2
 8004406:	e0dc      	b.n	80045c2 <HAL_ADC_ConfigChannel+0x1da>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d81c      	bhi.n	8004452 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	3b05      	subs	r3, #5
 800442a:	221f      	movs	r2, #31
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	4019      	ands	r1, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	3b05      	subs	r3, #5
 8004444:	fa00 f203 	lsl.w	r2, r0, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	635a      	str	r2, [r3, #52]	; 0x34
 8004450:	e03c      	b.n	80044cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d81c      	bhi.n	8004494 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3b23      	subs	r3, #35	; 0x23
 800446c:	221f      	movs	r2, #31
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	4019      	ands	r1, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	3b23      	subs	r3, #35	; 0x23
 8004486:	fa00 f203 	lsl.w	r2, r0, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
 8004492:	e01b      	b.n	80044cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3b41      	subs	r3, #65	; 0x41
 80044a6:	221f      	movs	r2, #31
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	4019      	ands	r1, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	3b41      	subs	r3, #65	; 0x41
 80044c0:	fa00 f203 	lsl.w	r2, r0, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d91c      	bls.n	800450e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68d9      	ldr	r1, [r3, #12]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	4413      	add	r3, r2
 80044e4:	3b1e      	subs	r3, #30
 80044e6:	2207      	movs	r2, #7
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	4019      	ands	r1, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6898      	ldr	r0, [r3, #8]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	3b1e      	subs	r3, #30
 8004500:	fa00 f203 	lsl.w	r2, r0, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	60da      	str	r2, [r3, #12]
 800450c:	e019      	b.n	8004542 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6919      	ldr	r1, [r3, #16]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	4413      	add	r3, r2
 800451e:	2207      	movs	r2, #7
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	4019      	ands	r1, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	6898      	ldr	r0, [r3, #8]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	fa00 f203 	lsl.w	r2, r0, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b10      	cmp	r3, #16
 8004548:	d003      	beq.n	8004552 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800454e:	2b11      	cmp	r3, #17
 8004550:	d132      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <HAL_ADC_ConfigChannel+0x1e4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d125      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d126      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004578:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d11a      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004582:	4b13      	ldr	r3, [pc, #76]	; (80045d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	0c9a      	lsrs	r2, r3, #18
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004598:	e002      	b.n	80045a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	3b01      	subs	r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f9      	bne.n	800459a <HAL_ADC_ConfigChannel+0x1b2>
 80045a6:	e007      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr
 80045cc:	40012400 	.word	0x40012400
 80045d0:	20000078 	.word	0x20000078
 80045d4:	431bde83 	.word	0x431bde83

080045d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d040      	beq.n	8004678 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004606:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <ADC_Enable+0xac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <ADC_Enable+0xb0>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	0c9b      	lsrs	r3, r3, #18
 8004612:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004614:	e002      	b.n	800461c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	3b01      	subs	r3, #1
 800461a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f9      	bne.n	8004616 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004622:	f7ff fce1 	bl	8003fe8 <HAL_GetTick>
 8004626:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004628:	e01f      	b.n	800466a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800462a:	f7ff fcdd 	bl	8003fe8 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d918      	bls.n	800466a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b01      	cmp	r3, #1
 8004644:	d011      	beq.n	800466a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464a:	f043 0210 	orr.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e007      	b.n	800467a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d1d8      	bne.n	800462a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000078 	.word	0x20000078
 8004688:	431bde83 	.word	0x431bde83

0800468c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d12e      	bne.n	8004704 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046b6:	f7ff fc97 	bl	8003fe8 <HAL_GetTick>
 80046ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046bc:	e01b      	b.n	80046f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046be:	f7ff fc93 	bl	8003fe8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d914      	bls.n	80046f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10d      	bne.n	80046f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f043 0210 	orr.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b01      	cmp	r3, #1
 8004702:	d0dc      	beq.n	80046be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004724:	2b00      	cmp	r3, #0
 8004726:	d127      	bne.n	8004778 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800473e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004742:	d115      	bne.n	8004770 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004748:	2b00      	cmp	r3, #0
 800474a:	d111      	bne.n	8004770 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	f043 0201 	orr.w	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff fe1d 	bl	80043b0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004776:	e004      	b.n	8004782 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fe12 	bl	80043c2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f043 0204 	orr.w	r2, r3, #4
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fe01 	bl	80043d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <__NVIC_SetPriorityGrouping+0x44>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047f8:	4013      	ands	r3, r2
 80047fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800480c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800480e:	4a04      	ldr	r2, [pc, #16]	; (8004820 <__NVIC_SetPriorityGrouping+0x44>)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	60d3      	str	r3, [r2, #12]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004828:	4b04      	ldr	r3, [pc, #16]	; (800483c <__NVIC_GetPriorityGrouping+0x18>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 0307 	and.w	r3, r3, #7
}
 8004832:	4618      	mov	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	4603      	mov	r3, r0
 8004848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484e:	2b00      	cmp	r3, #0
 8004850:	db0b      	blt.n	800486a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	f003 021f 	and.w	r2, r3, #31
 8004858:	4906      	ldr	r1, [pc, #24]	; (8004874 <__NVIC_EnableIRQ+0x34>)
 800485a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2001      	movs	r0, #1
 8004862:	fa00 f202 	lsl.w	r2, r0, r2
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr
 8004874:	e000e100 	.word	0xe000e100

08004878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	2b00      	cmp	r3, #0
 800488a:	db0a      	blt.n	80048a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	490c      	ldr	r1, [pc, #48]	; (80048c4 <__NVIC_SetPriority+0x4c>)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	0112      	lsls	r2, r2, #4
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	440b      	add	r3, r1
 800489c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a0:	e00a      	b.n	80048b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	4908      	ldr	r1, [pc, #32]	; (80048c8 <__NVIC_SetPriority+0x50>)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3b04      	subs	r3, #4
 80048b0:	0112      	lsls	r2, r2, #4
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	440b      	add	r3, r1
 80048b6:	761a      	strb	r2, [r3, #24]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000e100 	.word	0xe000e100
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f1c3 0307 	rsb	r3, r3, #7
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf28      	it	cs
 80048ea:	2304      	movcs	r3, #4
 80048ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d902      	bls.n	80048fc <NVIC_EncodePriority+0x30>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3b03      	subs	r3, #3
 80048fa:	e000      	b.n	80048fe <NVIC_EncodePriority+0x32>
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	401a      	ands	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004914:	f04f 31ff 	mov.w	r1, #4294967295
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43d9      	mvns	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004924:	4313      	orrs	r3, r2
         );
}
 8004926:	4618      	mov	r0, r3
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004940:	d301      	bcc.n	8004946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004942:	2301      	movs	r3, #1
 8004944:	e00f      	b.n	8004966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <SysTick_Config+0x40>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800494e:	210f      	movs	r1, #15
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	f7ff ff90 	bl	8004878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <SysTick_Config+0x40>)
 800495a:	2200      	movs	r2, #0
 800495c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <SysTick_Config+0x40>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010

08004974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff2d 	bl	80047dc <__NVIC_SetPriorityGrouping>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800499c:	f7ff ff42 	bl	8004824 <__NVIC_GetPriorityGrouping>
 80049a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff ff90 	bl	80048cc <NVIC_EncodePriority>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff5f 	bl	8004878 <__NVIC_SetPriority>
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff35 	bl	8004840 <__NVIC_EnableIRQ>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7ff ffa2 	bl	8004930 <SysTick_Config>
 80049ec:	4603      	mov	r3, r0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e043      	b.n	8004a96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <HAL_DMA_Init+0xa8>)
 8004a16:	4413      	add	r3, r2
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <HAL_DMA_Init+0xac>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	009a      	lsls	r2, r3, #2
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_DMA_Init+0xb0>)
 8004a2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	bffdfff8 	.word	0xbffdfff8
 8004aa4:	cccccccd 	.word	0xcccccccd
 8004aa8:	40020000 	.word	0x40020000

08004aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_DMA_Start_IT+0x20>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e04a      	b.n	8004b62 <HAL_DMA_Start_IT+0xb6>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d13a      	bne.n	8004b54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f9ae 	bl	8004e64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 020e 	orr.w	r2, r2, #14
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e00f      	b.n	8004b42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0204 	bic.w	r2, r2, #4
 8004b30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 020a 	orr.w	r2, r2, #10
 8004b40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e005      	b.n	8004b60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d005      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2204      	movs	r2, #4
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	e051      	b.n	8004c32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 020e 	bic.w	r2, r2, #14
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <HAL_DMA_Abort_IT+0xd0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d029      	beq.n	8004c0c <HAL_DMA_Abort_IT+0xa0>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <HAL_DMA_Abort_IT+0xd4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d022      	beq.n	8004c08 <HAL_DMA_Abort_IT+0x9c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <HAL_DMA_Abort_IT+0xd8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d01a      	beq.n	8004c02 <HAL_DMA_Abort_IT+0x96>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <HAL_DMA_Abort_IT+0xdc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d012      	beq.n	8004bfc <HAL_DMA_Abort_IT+0x90>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_DMA_Abort_IT+0xe0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00a      	beq.n	8004bf6 <HAL_DMA_Abort_IT+0x8a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1a      	ldr	r2, [pc, #104]	; (8004c50 <HAL_DMA_Abort_IT+0xe4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d102      	bne.n	8004bf0 <HAL_DMA_Abort_IT+0x84>
 8004bea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bee:	e00e      	b.n	8004c0e <HAL_DMA_Abort_IT+0xa2>
 8004bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf4:	e00b      	b.n	8004c0e <HAL_DMA_Abort_IT+0xa2>
 8004bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bfa:	e008      	b.n	8004c0e <HAL_DMA_Abort_IT+0xa2>
 8004bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c00:	e005      	b.n	8004c0e <HAL_DMA_Abort_IT+0xa2>
 8004c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c06:	e002      	b.n	8004c0e <HAL_DMA_Abort_IT+0xa2>
 8004c08:	2310      	movs	r3, #16
 8004c0a:	e000      	b.n	8004c0e <HAL_DMA_Abort_IT+0xa2>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HAL_DMA_Abort_IT+0xe8>)
 8004c10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	4798      	blx	r3
    } 
  }
  return status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40020008 	.word	0x40020008
 8004c40:	4002001c 	.word	0x4002001c
 8004c44:	40020030 	.word	0x40020030
 8004c48:	40020044 	.word	0x40020044
 8004c4c:	40020058 	.word	0x40020058
 8004c50:	4002006c 	.word	0x4002006c
 8004c54:	40020000 	.word	0x40020000

08004c58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2204      	movs	r2, #4
 8004c76:	409a      	lsls	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d04f      	beq.n	8004d20 <HAL_DMA_IRQHandler+0xc8>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d04a      	beq.n	8004d20 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a66      	ldr	r2, [pc, #408]	; (8004e48 <HAL_DMA_IRQHandler+0x1f0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d029      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xae>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a65      	ldr	r2, [pc, #404]	; (8004e4c <HAL_DMA_IRQHandler+0x1f4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_DMA_IRQHandler+0xaa>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a63      	ldr	r2, [pc, #396]	; (8004e50 <HAL_DMA_IRQHandler+0x1f8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01a      	beq.n	8004cfc <HAL_DMA_IRQHandler+0xa4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a62      	ldr	r2, [pc, #392]	; (8004e54 <HAL_DMA_IRQHandler+0x1fc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d012      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x9e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a60      	ldr	r2, [pc, #384]	; (8004e58 <HAL_DMA_IRQHandler+0x200>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_DMA_IRQHandler+0x98>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a5f      	ldr	r2, [pc, #380]	; (8004e5c <HAL_DMA_IRQHandler+0x204>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d102      	bne.n	8004cea <HAL_DMA_IRQHandler+0x92>
 8004ce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ce8:	e00e      	b.n	8004d08 <HAL_DMA_IRQHandler+0xb0>
 8004cea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004cee:	e00b      	b.n	8004d08 <HAL_DMA_IRQHandler+0xb0>
 8004cf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004cf4:	e008      	b.n	8004d08 <HAL_DMA_IRQHandler+0xb0>
 8004cf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cfa:	e005      	b.n	8004d08 <HAL_DMA_IRQHandler+0xb0>
 8004cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d00:	e002      	b.n	8004d08 <HAL_DMA_IRQHandler+0xb0>
 8004d02:	2340      	movs	r3, #64	; 0x40
 8004d04:	e000      	b.n	8004d08 <HAL_DMA_IRQHandler+0xb0>
 8004d06:	2304      	movs	r3, #4
 8004d08:	4a55      	ldr	r2, [pc, #340]	; (8004e60 <HAL_DMA_IRQHandler+0x208>)
 8004d0a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8094 	beq.w	8004e3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004d1e:	e08e      	b.n	8004e3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	2202      	movs	r2, #2
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d056      	beq.n	8004dde <HAL_DMA_IRQHandler+0x186>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d051      	beq.n	8004dde <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 020a 	bic.w	r2, r2, #10
 8004d56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <HAL_DMA_IRQHandler+0x1f0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d029      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x166>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a37      	ldr	r2, [pc, #220]	; (8004e4c <HAL_DMA_IRQHandler+0x1f4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <HAL_DMA_IRQHandler+0x162>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <HAL_DMA_IRQHandler+0x1f8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x15c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a34      	ldr	r2, [pc, #208]	; (8004e54 <HAL_DMA_IRQHandler+0x1fc>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d012      	beq.n	8004dae <HAL_DMA_IRQHandler+0x156>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a32      	ldr	r2, [pc, #200]	; (8004e58 <HAL_DMA_IRQHandler+0x200>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00a      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x150>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a31      	ldr	r2, [pc, #196]	; (8004e5c <HAL_DMA_IRQHandler+0x204>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d102      	bne.n	8004da2 <HAL_DMA_IRQHandler+0x14a>
 8004d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004da0:	e00e      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x168>
 8004da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da6:	e00b      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x168>
 8004da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dac:	e008      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x168>
 8004dae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004db2:	e005      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x168>
 8004db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004db8:	e002      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x168>
 8004dba:	2320      	movs	r3, #32
 8004dbc:	e000      	b.n	8004dc0 <HAL_DMA_IRQHandler+0x168>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	4a27      	ldr	r2, [pc, #156]	; (8004e60 <HAL_DMA_IRQHandler+0x208>)
 8004dc2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d034      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ddc:	e02f      	b.n	8004e3e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2208      	movs	r2, #8
 8004de4:	409a      	lsls	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d028      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x1e8>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 020e 	bic.w	r2, r2, #14
 8004e06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f202 	lsl.w	r2, r1, r2
 8004e16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
    }
  }
  return;
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
}
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40020008 	.word	0x40020008
 8004e4c:	4002001c 	.word	0x4002001c
 8004e50:	40020030 	.word	0x40020030
 8004e54:	40020044 	.word	0x40020044
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	4002006c 	.word	0x4002006c
 8004e60:	40020000 	.word	0x40020000

08004e64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d108      	bne.n	8004ea4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ea2:	e007      	b.n	8004eb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b08b      	sub	sp, #44	; 0x2c
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ed2:	e169      	b.n	80051a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f040 8158 	bne.w	80051a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	4a9a      	ldr	r2, [pc, #616]	; (8005160 <HAL_GPIO_Init+0x2a0>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d05e      	beq.n	8004fba <HAL_GPIO_Init+0xfa>
 8004efc:	4a98      	ldr	r2, [pc, #608]	; (8005160 <HAL_GPIO_Init+0x2a0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d875      	bhi.n	8004fee <HAL_GPIO_Init+0x12e>
 8004f02:	4a98      	ldr	r2, [pc, #608]	; (8005164 <HAL_GPIO_Init+0x2a4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d058      	beq.n	8004fba <HAL_GPIO_Init+0xfa>
 8004f08:	4a96      	ldr	r2, [pc, #600]	; (8005164 <HAL_GPIO_Init+0x2a4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d86f      	bhi.n	8004fee <HAL_GPIO_Init+0x12e>
 8004f0e:	4a96      	ldr	r2, [pc, #600]	; (8005168 <HAL_GPIO_Init+0x2a8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d052      	beq.n	8004fba <HAL_GPIO_Init+0xfa>
 8004f14:	4a94      	ldr	r2, [pc, #592]	; (8005168 <HAL_GPIO_Init+0x2a8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d869      	bhi.n	8004fee <HAL_GPIO_Init+0x12e>
 8004f1a:	4a94      	ldr	r2, [pc, #592]	; (800516c <HAL_GPIO_Init+0x2ac>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d04c      	beq.n	8004fba <HAL_GPIO_Init+0xfa>
 8004f20:	4a92      	ldr	r2, [pc, #584]	; (800516c <HAL_GPIO_Init+0x2ac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d863      	bhi.n	8004fee <HAL_GPIO_Init+0x12e>
 8004f26:	4a92      	ldr	r2, [pc, #584]	; (8005170 <HAL_GPIO_Init+0x2b0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d046      	beq.n	8004fba <HAL_GPIO_Init+0xfa>
 8004f2c:	4a90      	ldr	r2, [pc, #576]	; (8005170 <HAL_GPIO_Init+0x2b0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d85d      	bhi.n	8004fee <HAL_GPIO_Init+0x12e>
 8004f32:	2b12      	cmp	r3, #18
 8004f34:	d82a      	bhi.n	8004f8c <HAL_GPIO_Init+0xcc>
 8004f36:	2b12      	cmp	r3, #18
 8004f38:	d859      	bhi.n	8004fee <HAL_GPIO_Init+0x12e>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_GPIO_Init+0x80>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004fbb 	.word	0x08004fbb
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004fa7 	.word	0x08004fa7
 8004f4c:	08004fe9 	.word	0x08004fe9
 8004f50:	08004fef 	.word	0x08004fef
 8004f54:	08004fef 	.word	0x08004fef
 8004f58:	08004fef 	.word	0x08004fef
 8004f5c:	08004fef 	.word	0x08004fef
 8004f60:	08004fef 	.word	0x08004fef
 8004f64:	08004fef 	.word	0x08004fef
 8004f68:	08004fef 	.word	0x08004fef
 8004f6c:	08004fef 	.word	0x08004fef
 8004f70:	08004fef 	.word	0x08004fef
 8004f74:	08004fef 	.word	0x08004fef
 8004f78:	08004fef 	.word	0x08004fef
 8004f7c:	08004fef 	.word	0x08004fef
 8004f80:	08004fef 	.word	0x08004fef
 8004f84:	08004f9d 	.word	0x08004f9d
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	4a79      	ldr	r2, [pc, #484]	; (8005174 <HAL_GPIO_Init+0x2b4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004f92:	e02c      	b.n	8004fee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	623b      	str	r3, [r7, #32]
          break;
 8004f9a:	e029      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	623b      	str	r3, [r7, #32]
          break;
 8004fa4:	e024      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	3308      	adds	r3, #8
 8004fac:	623b      	str	r3, [r7, #32]
          break;
 8004fae:	e01f      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	623b      	str	r3, [r7, #32]
          break;
 8004fb8:	e01a      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	623b      	str	r3, [r7, #32]
          break;
 8004fc6:	e013      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	611a      	str	r2, [r3, #16]
          break;
 8004fda:	e009      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fdc:	2308      	movs	r3, #8
 8004fde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	615a      	str	r2, [r3, #20]
          break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	623b      	str	r3, [r7, #32]
          break;
 8004fec:	e000      	b.n	8004ff0 <HAL_GPIO_Init+0x130>
          break;
 8004fee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2bff      	cmp	r3, #255	; 0xff
 8004ff4:	d801      	bhi.n	8004ffa <HAL_GPIO_Init+0x13a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	e001      	b.n	8004ffe <HAL_GPIO_Init+0x13e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2bff      	cmp	r3, #255	; 0xff
 8005004:	d802      	bhi.n	800500c <HAL_GPIO_Init+0x14c>
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	e002      	b.n	8005012 <HAL_GPIO_Init+0x152>
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	3b08      	subs	r3, #8
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	210f      	movs	r1, #15
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	401a      	ands	r2, r3
 8005024:	6a39      	ldr	r1, [r7, #32]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	431a      	orrs	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80b1 	beq.w	80051a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005040:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <HAL_GPIO_Init+0x2b8>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	4a4c      	ldr	r2, [pc, #304]	; (8005178 <HAL_GPIO_Init+0x2b8>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6193      	str	r3, [r2, #24]
 800504c:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <HAL_GPIO_Init+0x2b8>)
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005058:	4a48      	ldr	r2, [pc, #288]	; (800517c <HAL_GPIO_Init+0x2bc>)
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	3302      	adds	r3, #2
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	220f      	movs	r2, #15
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	43db      	mvns	r3, r3
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a40      	ldr	r2, [pc, #256]	; (8005180 <HAL_GPIO_Init+0x2c0>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d013      	beq.n	80050ac <HAL_GPIO_Init+0x1ec>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a3f      	ldr	r2, [pc, #252]	; (8005184 <HAL_GPIO_Init+0x2c4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00d      	beq.n	80050a8 <HAL_GPIO_Init+0x1e8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a3e      	ldr	r2, [pc, #248]	; (8005188 <HAL_GPIO_Init+0x2c8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <HAL_GPIO_Init+0x1e4>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a3d      	ldr	r2, [pc, #244]	; (800518c <HAL_GPIO_Init+0x2cc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d101      	bne.n	80050a0 <HAL_GPIO_Init+0x1e0>
 800509c:	2303      	movs	r3, #3
 800509e:	e006      	b.n	80050ae <HAL_GPIO_Init+0x1ee>
 80050a0:	2304      	movs	r3, #4
 80050a2:	e004      	b.n	80050ae <HAL_GPIO_Init+0x1ee>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e002      	b.n	80050ae <HAL_GPIO_Init+0x1ee>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_GPIO_Init+0x1ee>
 80050ac:	2300      	movs	r3, #0
 80050ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b0:	f002 0203 	and.w	r2, r2, #3
 80050b4:	0092      	lsls	r2, r2, #2
 80050b6:	4093      	lsls	r3, r2
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80050be:	492f      	ldr	r1, [pc, #188]	; (800517c <HAL_GPIO_Init+0x2bc>)
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	089b      	lsrs	r3, r3, #2
 80050c4:	3302      	adds	r3, #2
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d006      	beq.n	80050e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050d8:	4b2d      	ldr	r3, [pc, #180]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	492c      	ldr	r1, [pc, #176]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	e006      	b.n	80050f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80050e6:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	4928      	ldr	r1, [pc, #160]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005100:	4b23      	ldr	r3, [pc, #140]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4922      	ldr	r1, [pc, #136]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	e006      	b.n	800511c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800510e:	4b20      	ldr	r3, [pc, #128]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	43db      	mvns	r3, r3
 8005116:	491e      	ldr	r1, [pc, #120]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005118:	4013      	ands	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005128:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	4918      	ldr	r1, [pc, #96]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	608b      	str	r3, [r1, #8]
 8005134:	e006      	b.n	8005144 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005136:	4b16      	ldr	r3, [pc, #88]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	43db      	mvns	r3, r3
 800513e:	4914      	ldr	r1, [pc, #80]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005140:	4013      	ands	r3, r2
 8005142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d021      	beq.n	8005194 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005150:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	490e      	ldr	r1, [pc, #56]	; (8005190 <HAL_GPIO_Init+0x2d0>)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	60cb      	str	r3, [r1, #12]
 800515c:	e021      	b.n	80051a2 <HAL_GPIO_Init+0x2e2>
 800515e:	bf00      	nop
 8005160:	10320000 	.word	0x10320000
 8005164:	10310000 	.word	0x10310000
 8005168:	10220000 	.word	0x10220000
 800516c:	10210000 	.word	0x10210000
 8005170:	10120000 	.word	0x10120000
 8005174:	10110000 	.word	0x10110000
 8005178:	40021000 	.word	0x40021000
 800517c:	40010000 	.word	0x40010000
 8005180:	40010800 	.word	0x40010800
 8005184:	40010c00 	.word	0x40010c00
 8005188:	40011000 	.word	0x40011000
 800518c:	40011400 	.word	0x40011400
 8005190:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005194:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <HAL_GPIO_Init+0x304>)
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	43db      	mvns	r3, r3
 800519c:	4909      	ldr	r1, [pc, #36]	; (80051c4 <HAL_GPIO_Init+0x304>)
 800519e:	4013      	ands	r3, r2
 80051a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	3301      	adds	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f47f ae8e 	bne.w	8004ed4 <HAL_GPIO_Init+0x14>
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	372c      	adds	r7, #44	; 0x2c
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	40010400 	.word	0x40010400

080051c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	887b      	ldrh	r3, [r7, #2]
 80051da:	4013      	ands	r3, r2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e001      	b.n	80051ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	460b      	mov	r3, r1
 8005200:	807b      	strh	r3, [r7, #2]
 8005202:	4613      	mov	r3, r2
 8005204:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005206:	787b      	ldrb	r3, [r7, #1]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005212:	e003      	b.n	800521c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005214:	887b      	ldrh	r3, [r7, #2]
 8005216:	041a      	lsls	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	611a      	str	r2, [r3, #16]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005226:	b480      	push	{r7}
 8005228:	b085      	sub	sp, #20
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005238:	887a      	ldrh	r2, [r7, #2]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	041a      	lsls	r2, r3, #16
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	43d9      	mvns	r1, r3
 8005244:	887b      	ldrh	r3, [r7, #2]
 8005246:	400b      	ands	r3, r1
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	611a      	str	r2, [r3, #16]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d006      	beq.n	800527c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800526e:	4a05      	ldr	r2, [pc, #20]	; (8005284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd f9ee 	bl	8002658 <HAL_GPIO_EXTI_Callback>
  }
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40010400 	.word	0x40010400

08005288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e12b      	b.n	80054f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fe fce2 	bl	8003c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	; 0x24
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052ec:	f003 f8fc 	bl	80084e8 <HAL_RCC_GetPCLK1Freq>
 80052f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4a81      	ldr	r2, [pc, #516]	; (80054fc <HAL_I2C_Init+0x274>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d807      	bhi.n	800530c <HAL_I2C_Init+0x84>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a80      	ldr	r2, [pc, #512]	; (8005500 <HAL_I2C_Init+0x278>)
 8005300:	4293      	cmp	r3, r2
 8005302:	bf94      	ite	ls
 8005304:	2301      	movls	r3, #1
 8005306:	2300      	movhi	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e006      	b.n	800531a <HAL_I2C_Init+0x92>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a7d      	ldr	r2, [pc, #500]	; (8005504 <HAL_I2C_Init+0x27c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	bf94      	ite	ls
 8005314:	2301      	movls	r3, #1
 8005316:	2300      	movhi	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e0e7      	b.n	80054f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a78      	ldr	r2, [pc, #480]	; (8005508 <HAL_I2C_Init+0x280>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0c9b      	lsrs	r3, r3, #18
 800532c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a6a      	ldr	r2, [pc, #424]	; (80054fc <HAL_I2C_Init+0x274>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d802      	bhi.n	800535c <HAL_I2C_Init+0xd4>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	3301      	adds	r3, #1
 800535a:	e009      	b.n	8005370 <HAL_I2C_Init+0xe8>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	4a69      	ldr	r2, [pc, #420]	; (800550c <HAL_I2C_Init+0x284>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	099b      	lsrs	r3, r3, #6
 800536e:	3301      	adds	r3, #1
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	430b      	orrs	r3, r1
 8005376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	495c      	ldr	r1, [pc, #368]	; (80054fc <HAL_I2C_Init+0x274>)
 800538c:	428b      	cmp	r3, r1
 800538e:	d819      	bhi.n	80053c4 <HAL_I2C_Init+0x13c>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1e59      	subs	r1, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	fbb1 f3f3 	udiv	r3, r1, r3
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053a4:	400b      	ands	r3, r1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_I2C_Init+0x138>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1e59      	subs	r1, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053b8:	3301      	adds	r3, #1
 80053ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053be:	e051      	b.n	8005464 <HAL_I2C_Init+0x1dc>
 80053c0:	2304      	movs	r3, #4
 80053c2:	e04f      	b.n	8005464 <HAL_I2C_Init+0x1dc>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d111      	bne.n	80053f0 <HAL_I2C_Init+0x168>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1e58      	subs	r0, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	440b      	add	r3, r1
 80053da:	fbb0 f3f3 	udiv	r3, r0, r3
 80053de:	3301      	adds	r3, #1
 80053e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e012      	b.n	8005416 <HAL_I2C_Init+0x18e>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1e58      	subs	r0, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	0099      	lsls	r1, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	fbb0 f3f3 	udiv	r3, r0, r3
 8005406:	3301      	adds	r3, #1
 8005408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_I2C_Init+0x196>
 800541a:	2301      	movs	r3, #1
 800541c:	e022      	b.n	8005464 <HAL_I2C_Init+0x1dc>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10e      	bne.n	8005444 <HAL_I2C_Init+0x1bc>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1e58      	subs	r0, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	440b      	add	r3, r1
 8005434:	fbb0 f3f3 	udiv	r3, r0, r3
 8005438:	3301      	adds	r3, #1
 800543a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	e00f      	b.n	8005464 <HAL_I2C_Init+0x1dc>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e58      	subs	r0, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	0099      	lsls	r1, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	fbb0 f3f3 	udiv	r3, r0, r3
 800545a:	3301      	adds	r3, #1
 800545c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	6809      	ldr	r1, [r1, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6911      	ldr	r1, [r2, #16]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d2      	ldr	r2, [r2, #12]
 800549e:	4311      	orrs	r1, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	000186a0 	.word	0x000186a0
 8005500:	001e847f 	.word	0x001e847f
 8005504:	003d08ff 	.word	0x003d08ff
 8005508:	431bde83 	.word	0x431bde83
 800550c:	10624dd3 	.word	0x10624dd3

08005510 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	461a      	mov	r2, r3
 800551c:	460b      	mov	r3, r1
 800551e:	817b      	strh	r3, [r7, #10]
 8005520:	4613      	mov	r3, r2
 8005522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005524:	f7fe fd60 	bl	8003fe8 <HAL_GetTick>
 8005528:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b20      	cmp	r3, #32
 8005534:	f040 80e0 	bne.w	80056f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	2319      	movs	r3, #25
 800553e:	2201      	movs	r2, #1
 8005540:	4970      	ldr	r1, [pc, #448]	; (8005704 <HAL_I2C_Master_Transmit+0x1f4>)
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 fdb0 	bl	80060a8 <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800554e:	2302      	movs	r3, #2
 8005550:	e0d3      	b.n	80056fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_I2C_Master_Transmit+0x50>
 800555c:	2302      	movs	r3, #2
 800555e:	e0cc      	b.n	80056fa <HAL_I2C_Master_Transmit+0x1ea>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d007      	beq.n	8005586 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2221      	movs	r2, #33	; 0x21
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2210      	movs	r2, #16
 80055a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	893a      	ldrh	r2, [r7, #8]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a50      	ldr	r2, [pc, #320]	; (8005708 <HAL_I2C_Master_Transmit+0x1f8>)
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6a3a      	ldr	r2, [r7, #32]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fc40 	bl	8005e54 <I2C_MasterRequestWrite>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e08d      	b.n	80056fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055f4:	e066      	b.n	80056c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	6a39      	ldr	r1, [r7, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fe2a 	bl	8006254 <I2C_WaitOnTXEFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b04      	cmp	r3, #4
 800560c:	d107      	bne.n	800561e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e06b      	b.n	80056fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005632:	1c5a      	adds	r2, r3, #1
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	3b01      	subs	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b04      	cmp	r3, #4
 800565e:	d11b      	bne.n	8005698 <HAL_I2C_Master_Transmit+0x188>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005664:	2b00      	cmp	r3, #0
 8005666:	d017      	beq.n	8005698 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fe1a 	bl	80062d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d107      	bne.n	80056c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e01a      	b.n	80056fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d194      	bne.n	80055f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e000      	b.n	80056fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
  }
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	00100002 	.word	0x00100002
 8005708:	ffff0000 	.word	0xffff0000

0800570c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08a      	sub	sp, #40	; 0x28
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	460b      	mov	r3, r1
 800571a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800571c:	f7fe fc64 	bl	8003fe8 <HAL_GetTick>
 8005720:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005722:	2301      	movs	r3, #1
 8005724:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b20      	cmp	r3, #32
 8005730:	f040 8111 	bne.w	8005956 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2319      	movs	r3, #25
 800573a:	2201      	movs	r2, #1
 800573c:	4988      	ldr	r1, [pc, #544]	; (8005960 <HAL_I2C_IsDeviceReady+0x254>)
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fcb2 	bl	80060a8 <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800574a:	2302      	movs	r3, #2
 800574c:	e104      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_I2C_IsDeviceReady+0x50>
 8005758:	2302      	movs	r3, #2
 800575a:	e0fd      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b01      	cmp	r3, #1
 8005770:	d007      	beq.n	8005782 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005790:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2224      	movs	r2, #36	; 0x24
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a70      	ldr	r2, [pc, #448]	; (8005964 <HAL_I2C_IsDeviceReady+0x258>)
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fc70 	bl	80060a8 <I2C_WaitOnFlagUntilTimeout>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00d      	beq.n	80057ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057dc:	d103      	bne.n	80057e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0b6      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057fa:	f7fe fbf5 	bl	8003fe8 <HAL_GetTick>
 80057fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b02      	cmp	r3, #2
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800582e:	e025      	b.n	800587c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fe fbda 	bl	8003fe8 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <HAL_I2C_IsDeviceReady+0x13a>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	22a0      	movs	r2, #160	; 0xa0
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2ba0      	cmp	r3, #160	; 0xa0
 8005886:	d005      	beq.n	8005894 <HAL_I2C_IsDeviceReady+0x188>
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_I2C_IsDeviceReady+0x188>
 800588e:	7dbb      	ldrb	r3, [r7, #22]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0cd      	beq.n	8005830 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d129      	bne.n	80058fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2319      	movs	r3, #25
 80058d6:	2201      	movs	r2, #1
 80058d8:	4921      	ldr	r1, [pc, #132]	; (8005960 <HAL_I2C_IsDeviceReady+0x254>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fbe4 	bl	80060a8 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e036      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	e02c      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005916:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2319      	movs	r3, #25
 800591e:	2201      	movs	r2, #1
 8005920:	490f      	ldr	r1, [pc, #60]	; (8005960 <HAL_I2C_IsDeviceReady+0x254>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fbc0 	bl	80060a8 <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e012      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	3301      	adds	r3, #1
 8005936:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	f4ff af32 	bcc.w	80057a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005956:	2302      	movs	r3, #2
  }
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	00100002 	.word	0x00100002
 8005964:	ffff0000 	.word	0xffff0000

08005968 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005980:	2300      	movs	r3, #0
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d016      	beq.n	80059c6 <HAL_I2C_ER_IRQHandler+0x5e>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d010      	beq.n	80059c6 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059b4:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c4:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	0a5b      	lsrs	r3, r3, #9
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <HAL_I2C_ER_IRQHandler+0x88>
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	0a1b      	lsrs	r3, r3, #8
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	f043 0302 	orr.w	r3, r3, #2
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80059ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	0a9b      	lsrs	r3, r3, #10
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d03f      	beq.n	8005a7c <HAL_I2C_ER_IRQHandler+0x114>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d039      	beq.n	8005a7c <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005a08:	7efb      	ldrb	r3, [r7, #27]
 8005a0a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a22:	7ebb      	ldrb	r3, [r7, #26]
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d112      	bne.n	8005a4e <HAL_I2C_ER_IRQHandler+0xe6>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10f      	bne.n	8005a4e <HAL_I2C_ER_IRQHandler+0xe6>
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b21      	cmp	r3, #33	; 0x21
 8005a32:	d008      	beq.n	8005a46 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	2b29      	cmp	r3, #41	; 0x29
 8005a38:	d005      	beq.n	8005a46 <HAL_I2C_ER_IRQHandler+0xde>
 8005a3a:	7cfb      	ldrb	r3, [r7, #19]
 8005a3c:	2b28      	cmp	r3, #40	; 0x28
 8005a3e:	d106      	bne.n	8005a4e <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b21      	cmp	r3, #33	; 0x21
 8005a44:	d103      	bne.n	8005a4e <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f862 	bl	8005b10 <I2C_Slave_AF>
 8005a4c:	e016      	b.n	8005a7c <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a56:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a60:	7efb      	ldrb	r3, [r7, #27]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d002      	beq.n	8005a6c <HAL_I2C_ER_IRQHandler+0x104>
 8005a66:	7efb      	ldrb	r3, [r7, #27]
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d107      	bne.n	8005a7c <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	0adb      	lsrs	r3, r3, #11
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x13e>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	f043 0308 	orr.w	r3, r3, #8
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005aa4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f899 	bl	8005bf0 <I2C_ITError>
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr
	...

08005b10 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d002      	beq.n	8005b32 <I2C_Slave_AF+0x22>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d129      	bne.n	8005b86 <I2C_Slave_AF+0x76>
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b28      	cmp	r3, #40	; 0x28
 8005b36:	d126      	bne.n	8005b86 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a2c      	ldr	r2, [pc, #176]	; (8005bec <I2C_Slave_AF+0xdc>)
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b4c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b56:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b66:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff ffaa 	bl	8005ad8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b84:	e02e      	b.n	8005be4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b21      	cmp	r3, #33	; 0x21
 8005b8a:	d126      	bne.n	8005bda <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a17      	ldr	r2, [pc, #92]	; (8005bec <I2C_Slave_AF+0xdc>)
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bb6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff ff77 	bl	8005ac6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005bd8:	e004      	b.n	8005be4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005be2:	615a      	str	r2, [r3, #20]
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	ffff0000 	.word	0xffff0000

08005bf0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c08:	7bbb      	ldrb	r3, [r7, #14]
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d002      	beq.n	8005c14 <I2C_ITError+0x24>
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d10a      	bne.n	8005c2a <I2C_ITError+0x3a>
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b22      	cmp	r3, #34	; 0x22
 8005c18:	d107      	bne.n	8005c2a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c30:	2b28      	cmp	r3, #40	; 0x28
 8005c32:	d107      	bne.n	8005c44 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2228      	movs	r2, #40	; 0x28
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c42:	e015      	b.n	8005c70 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c52:	d00a      	beq.n	8005c6a <I2C_ITError+0x7a>
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b60      	cmp	r3, #96	; 0x60
 8005c58:	d007      	beq.n	8005c6a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7e:	d161      	bne.n	8005d44 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d020      	beq.n	8005cde <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	4a6a      	ldr	r2, [pc, #424]	; (8005e4c <I2C_ITError+0x25c>)
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe ff5f 	bl	8004b6c <HAL_DMA_Abort_IT>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8089 	beq.w	8005dc8 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	e074      	b.n	8005dc8 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	4a5a      	ldr	r2, [pc, #360]	; (8005e4c <I2C_ITError+0x25c>)
 8005ce4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fe ff3e 	bl	8004b6c <HAL_DMA_Abort_IT>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d068      	beq.n	8005dc8 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d10b      	bne.n	8005d1c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4798      	blx	r3
 8005d42:	e041      	b.n	8005dc8 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b60      	cmp	r3, #96	; 0x60
 8005d4e:	d125      	bne.n	8005d9c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d10b      	bne.n	8005d84 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691a      	ldr	r2, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff feb1 	bl	8005afc <HAL_I2C_AbortCpltCallback>
 8005d9a:	e015      	b.n	8005dc8 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d10b      	bne.n	8005dc2 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691a      	ldr	r2, [r3, #16]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fe91 	bl	8005aea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10e      	bne.n	8005df6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e04:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f003 0304 	and.w	r3, r3, #4
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d113      	bne.n	8005e42 <I2C_ITError+0x252>
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
 8005e1c:	2b28      	cmp	r3, #40	; 0x28
 8005e1e:	d110      	bne.n	8005e42 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0b      	ldr	r2, [pc, #44]	; (8005e50 <I2C_ITError+0x260>)
 8005e24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fe4b 	bl	8005ad8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08005f59 	.word	0x08005f59
 8005e50:	ffff0000 	.word	0xffff0000

08005e54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	460b      	mov	r3, r1
 8005e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d006      	beq.n	8005e7e <I2C_MasterRequestWrite+0x2a>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d003      	beq.n	8005e7e <I2C_MasterRequestWrite+0x2a>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e7c:	d108      	bne.n	8005e90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e00b      	b.n	8005ea8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b12      	cmp	r3, #18
 8005e96:	d107      	bne.n	8005ea8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f8f7 	bl	80060a8 <I2C_WaitOnFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00d      	beq.n	8005edc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d103      	bne.n	8005ed8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e035      	b.n	8005f48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee4:	d108      	bne.n	8005ef8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ef4:	611a      	str	r2, [r3, #16]
 8005ef6:	e01b      	b.n	8005f30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ef8:	897b      	ldrh	r3, [r7, #10]
 8005efa:	11db      	asrs	r3, r3, #7
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 0306 	and.w	r3, r3, #6
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f063 030f 	orn	r3, r3, #15
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	490e      	ldr	r1, [pc, #56]	; (8005f50 <I2C_MasterRequestWrite+0xfc>)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f91d 	bl	8006156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e010      	b.n	8005f48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4907      	ldr	r1, [pc, #28]	; (8005f54 <I2C_MasterRequestWrite+0x100>)
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f90d 	bl	8006156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	00010008 	.word	0x00010008
 8005f54:	00010002 	.word	0x00010002

08005f58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f72:	4b4b      	ldr	r3, [pc, #300]	; (80060a0 <I2C_DMAAbort+0x148>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	4a4a      	ldr	r2, [pc, #296]	; (80060a4 <I2C_DMAAbort+0x14c>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	0a1a      	lsrs	r2, r3, #8
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00da      	lsls	r2, r3, #3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005f9e:	e00a      	b.n	8005fb6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb4:	d0ea      	beq.n	8005f8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	2200      	movs	r2, #0
 800600a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d10e      	bne.n	8006046 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800603e:	6978      	ldr	r0, [r7, #20]
 8006040:	f7ff fd5c 	bl	8005afc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006044:	e027      	b.n	8006096 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006046:	7cfb      	ldrb	r3, [r7, #19]
 8006048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800604c:	2b28      	cmp	r3, #40	; 0x28
 800604e:	d117      	bne.n	8006080 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800606e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2200      	movs	r2, #0
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2228      	movs	r2, #40	; 0x28
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800607e:	e007      	b.n	8006090 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006090:	6978      	ldr	r0, [r7, #20]
 8006092:	f7ff fd2a 	bl	8005aea <HAL_I2C_ErrorCallback>
}
 8006096:	bf00      	nop
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000078 	.word	0x20000078
 80060a4:	14f8b589 	.word	0x14f8b589

080060a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b8:	e025      	b.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d021      	beq.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fd ff91 	bl	8003fe8 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d116      	bne.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e023      	b.n	800614e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	d10d      	bne.n	800612c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	43da      	mvns	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	4013      	ands	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	bf0c      	ite	eq
 8006122:	2301      	moveq	r3, #1
 8006124:	2300      	movne	r3, #0
 8006126:	b2db      	uxtb	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	e00c      	b.n	8006146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	43da      	mvns	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	429a      	cmp	r2, r3
 800614a:	d0b6      	beq.n	80060ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
 8006162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006164:	e051      	b.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d123      	bne.n	80061be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800618e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0204 	orr.w	r2, r3, #4
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e046      	b.n	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d021      	beq.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fd ff0f 	bl	8003fe8 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d116      	bne.n	800620a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2220      	movs	r2, #32
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0220 	orr.w	r2, r3, #32
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e020      	b.n	800624c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	0c1b      	lsrs	r3, r3, #16
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d10c      	bne.n	800622e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	43da      	mvns	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4013      	ands	r3, r2
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e00b      	b.n	8006246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	43da      	mvns	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4013      	ands	r3, r2
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d18d      	bne.n	8006166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006260:	e02d      	b.n	80062be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 f878 	bl	8006358 <I2C_IsAcknowledgeFailed>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e02d      	b.n	80062ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d021      	beq.n	80062be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627a:	f7fd feb5 	bl	8003fe8 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	429a      	cmp	r2, r3
 8006288:	d302      	bcc.n	8006290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d116      	bne.n	80062be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e007      	b.n	80062ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d1ca      	bne.n	8006262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062e2:	e02d      	b.n	8006340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f837 	bl	8006358 <I2C_IsAcknowledgeFailed>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e02d      	b.n	8006350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fa:	d021      	beq.n	8006340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fc:	f7fd fe74 	bl	8003fe8 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d116      	bne.n	8006340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	f043 0220 	orr.w	r2, r3, #32
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e007      	b.n	8006350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b04      	cmp	r3, #4
 800634c:	d1ca      	bne.n	80062e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d11b      	bne.n	80063a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	f043 0204 	orr.w	r2, r3, #4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e000      	b.n	80063aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	b08b      	sub	sp, #44	; 0x2c
 80063b8:	af06      	add	r7, sp, #24
 80063ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0fd      	b.n	80065c2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f006 fd98 	bl	800cf10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2203      	movs	r2, #3
 80063e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f002 fda5 	bl	8008f3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	687e      	ldr	r6, [r7, #4]
 80063fa:	466d      	mov	r5, sp
 80063fc:	f106 0410 	add.w	r4, r6, #16
 8006400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	1d33      	adds	r3, r6, #4
 800640a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800640c:	6838      	ldr	r0, [r7, #0]
 800640e:	f002 fd6f 	bl	8008ef0 <USB_CoreInit>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e0ce      	b.n	80065c2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f002 fda0 	bl	8008f70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
 8006434:	e04c      	b.n	80064d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	4613      	mov	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	440b      	add	r3, r1
 8006446:	3301      	adds	r3, #1
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	440b      	add	r3, r1
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006460:	7bfa      	ldrb	r2, [r7, #15]
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	b298      	uxth	r0, r3
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	440b      	add	r3, r1
 8006472:	3336      	adds	r3, #54	; 0x36
 8006474:	4602      	mov	r2, r0
 8006476:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	440b      	add	r3, r1
 8006488:	3303      	adds	r3, #3
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	3338      	adds	r3, #56	; 0x38
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	440b      	add	r3, r1
 80064b0:	333c      	adds	r3, #60	; 0x3c
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80064b6:	7bfa      	ldrb	r2, [r7, #15]
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	440b      	add	r3, r1
 80064c4:	3340      	adds	r3, #64	; 0x40
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	3301      	adds	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
 80064d0:	7bfa      	ldrb	r2, [r7, #15]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d3ad      	bcc.n	8006436 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064da:	2300      	movs	r3, #0
 80064dc:	73fb      	strb	r3, [r7, #15]
 80064de:	e044      	b.n	800656a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80064e0:	7bfa      	ldrb	r2, [r7, #15]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	440b      	add	r3, r1
 80064ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	440b      	add	r3, r1
 8006504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006508:	7bfa      	ldrb	r2, [r7, #15]
 800650a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800650c:	7bfa      	ldrb	r2, [r7, #15]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	440b      	add	r3, r1
 800651a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800651e:	2200      	movs	r2, #0
 8006520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006522:	7bfa      	ldrb	r2, [r7, #15]
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	440b      	add	r3, r1
 8006530:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006538:	7bfa      	ldrb	r2, [r7, #15]
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	440b      	add	r3, r1
 8006546:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800654e:	7bfa      	ldrb	r2, [r7, #15]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	3301      	adds	r3, #1
 8006568:	73fb      	strb	r3, [r7, #15]
 800656a:	7bfa      	ldrb	r2, [r7, #15]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	429a      	cmp	r2, r3
 8006572:	d3b5      	bcc.n	80064e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	603b      	str	r3, [r7, #0]
 800657a:	687e      	ldr	r6, [r7, #4]
 800657c:	466d      	mov	r5, sp
 800657e:	f106 0410 	add.w	r4, r6, #16
 8006582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	1d33      	adds	r3, r6, #4
 800658c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f002 fcfa 	bl	8008f88 <USB_DevInit>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e00d      	b.n	80065c2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f004 fe6b 	bl	800b296 <USB_DevDisconnect>

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_PCD_Start+0x16>
 80065dc:	2302      	movs	r3, #2
 80065de:	e016      	b.n	800660e <HAL_PCD_Start+0x44>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f002 fc8f 	bl	8008f10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80065f2:	2101      	movs	r1, #1
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f006 fefe 	bl	800d3f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f004 fe3f 	bl	800b282 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b088      	sub	sp, #32
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f004 fe41 	bl	800b2aa <USB_ReadInterrupts>
 8006628:	4603      	mov	r3, r0
 800662a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d102      	bne.n	800663a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fb61 	bl	8006cfc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f004 fe33 	bl	800b2aa <USB_ReadInterrupts>
 8006644:	4603      	mov	r3, r0
 8006646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d112      	bne.n	8006676 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006658:	b29a      	uxth	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006662:	b292      	uxth	r2, r2
 8006664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f006 fccc 	bl	800d006 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800666e:	2100      	movs	r1, #0
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f925 	bl	80068c0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f004 fe15 	bl	800b2aa <USB_ReadInterrupts>
 8006680:	4603      	mov	r3, r0
 8006682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800668a:	d10b      	bne.n	80066a4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006694:	b29a      	uxth	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800669e:	b292      	uxth	r2, r2
 80066a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f004 fdfe 	bl	800b2aa <USB_ReadInterrupts>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b8:	d10b      	bne.n	80066d2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066cc:	b292      	uxth	r2, r2
 80066ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 fde7 	bl	800b2aa <USB_ReadInterrupts>
 80066dc:	4603      	mov	r3, r0
 80066de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e6:	d126      	bne.n	8006736 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	b292      	uxth	r2, r2
 80066fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0208 	bic.w	r2, r2, #8
 8006712:	b292      	uxth	r2, r2
 8006714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f006 fcad 	bl	800d078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006730:	b292      	uxth	r2, r2
 8006732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f004 fdb5 	bl	800b2aa <USB_ReadInterrupts>
 8006740:	4603      	mov	r3, r0
 8006742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674a:	f040 8084 	bne.w	8006856 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800674e:	2300      	movs	r3, #0
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	e011      	b.n	8006778 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	7ffb      	ldrb	r3, [r7, #31]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	7ffb      	ldrb	r3, [r7, #31]
 8006762:	8812      	ldrh	r2, [r2, #0]
 8006764:	b292      	uxth	r2, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	f107 0120 	add.w	r1, r7, #32
 800676c:	440b      	add	r3, r1
 800676e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	3301      	adds	r3, #1
 8006776:	77fb      	strb	r3, [r7, #31]
 8006778:	7ffb      	ldrb	r3, [r7, #31]
 800677a:	2b07      	cmp	r3, #7
 800677c:	d9ea      	bls.n	8006754 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	b292      	uxth	r2, r2
 8006792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	b292      	uxth	r2, r2
 80067aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80067ae:	bf00      	nop
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f6      	beq.n	80067b0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d4:	b292      	uxth	r2, r2
 80067d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e010      	b.n	8006802 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	4611      	mov	r1, r2
 80067e8:	7ffa      	ldrb	r2, [r7, #31]
 80067ea:	0092      	lsls	r2, r2, #2
 80067ec:	440a      	add	r2, r1
 80067ee:	005b      	lsls	r3, r3, #1
 80067f0:	f107 0120 	add.w	r1, r7, #32
 80067f4:	440b      	add	r3, r1
 80067f6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80067fa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80067fc:	7ffb      	ldrb	r3, [r7, #31]
 80067fe:	3301      	adds	r3, #1
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	7ffb      	ldrb	r3, [r7, #31]
 8006804:	2b07      	cmp	r3, #7
 8006806:	d9eb      	bls.n	80067e0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006810:	b29a      	uxth	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0208 	orr.w	r2, r2, #8
 800681a:	b292      	uxth	r2, r2
 800681c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006832:	b292      	uxth	r2, r2
 8006834:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006840:	b29a      	uxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0204 	orr.w	r2, r2, #4
 800684a:	b292      	uxth	r2, r2
 800684c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f006 fbf7 	bl	800d044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f004 fd25 	bl	800b2aa <USB_ReadInterrupts>
 8006860:	4603      	mov	r3, r0
 8006862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800686a:	d10e      	bne.n	800688a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800687e:	b292      	uxth	r2, r2
 8006880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f006 fbb0 	bl	800cfea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f004 fd0b 	bl	800b2aa <USB_ReadInterrupts>
 8006894:	4603      	mov	r3, r0
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800689e:	d10b      	bne.n	80068b8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b2:	b292      	uxth	r2, r2
 80068b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80068b8:	bf00      	nop
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_PCD_SetAddress+0x1a>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e013      	b.n	8006902 <HAL_PCD_SetAddress+0x42>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f004 fcb2 	bl	800b25c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	4608      	mov	r0, r1
 8006914:	4611      	mov	r1, r2
 8006916:	461a      	mov	r2, r3
 8006918:	4603      	mov	r3, r0
 800691a:	70fb      	strb	r3, [r7, #3]
 800691c:	460b      	mov	r3, r1
 800691e:	803b      	strh	r3, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800692c:	2b00      	cmp	r3, #0
 800692e:	da0e      	bge.n	800694e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	705a      	strb	r2, [r3, #1]
 800694c:	e00e      	b.n	800696c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	f003 0207 	and.w	r2, r3, #7
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	4413      	add	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800696c:	78fb      	ldrb	r3, [r7, #3]
 800696e:	f003 0307 	and.w	r3, r3, #7
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006978:	883a      	ldrh	r2, [r7, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	78ba      	ldrb	r2, [r7, #2]
 8006982:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006996:	78bb      	ldrb	r3, [r7, #2]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d102      	bne.n	80069a2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_PCD_EP_Open+0xa6>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e00e      	b.n	80069ce <HAL_PCD_EP_Open+0xc4>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 fb02 	bl	8008fc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b084      	sub	sp, #16
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da0e      	bge.n	8006a08 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	705a      	strb	r2, [r3, #1]
 8006a06:	e00e      	b.n	8006a26 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 0207 	and.w	r2, r3, #7
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_PCD_EP_Close+0x6a>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e00e      	b.n	8006a5e <HAL_PCD_EP_Close+0x88>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68f9      	ldr	r1, [r7, #12]
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f002 fe24 	bl	800969c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	460b      	mov	r3, r1
 8006a74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	f003 0207 	and.w	r2, r3, #7
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	00db      	lsls	r3, r3, #3
 8006a84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aa6:	7afb      	ldrb	r3, [r7, #11]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 ffd6 	bl	8009a74 <USB_EPStartXfer>
 8006ac8:	e005      	b.n	8006ad6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6979      	ldr	r1, [r7, #20]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f002 ffcf 	bl	8009a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006aec:	78fb      	ldrb	r3, [r7, #3]
 8006aee:	f003 0207 	and.w	r2, r3, #7
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4413      	add	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	440b      	add	r3, r1
 8006afe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	603b      	str	r3, [r7, #0]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b1e:	7afb      	ldrb	r3, [r7, #11]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2201      	movs	r2, #1
 8006b58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b66:	7afb      	ldrb	r3, [r7, #11]
 8006b68:	f003 0307 	and.w	r3, r3, #7
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6979      	ldr	r1, [r7, #20]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f002 ff7c 	bl	8009a74 <USB_EPStartXfer>
 8006b7c:	e005      	b.n	8006b8a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6979      	ldr	r1, [r7, #20]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f002 ff75 	bl	8009a74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	f003 0207 	and.w	r2, r3, #7
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d901      	bls.n	8006bb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e04c      	b.n	8006c4c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da0e      	bge.n	8006bd8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	705a      	strb	r2, [r3, #1]
 8006bd6:	e00c      	b.n	8006bf2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_PCD_EP_SetStall+0x7e>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e01c      	b.n	8006c4c <HAL_PCD_EP_SetStall+0xb8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f004 fa1e 	bl	800b062 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d108      	bne.n	8006c42 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	f004 fb43 	bl	800b2c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	f003 020f 	and.w	r2, r3, #15
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d901      	bls.n	8006c72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e040      	b.n	8006cf4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da0e      	bge.n	8006c98 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	705a      	strb	r2, [r3, #1]
 8006c96:	e00e      	b.n	8006cb6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	f003 0207 	and.w	r2, r3, #7
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4413      	add	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <HAL_PCD_EP_ClrStall+0x82>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e00e      	b.n	8006cf4 <HAL_PCD_EP_ClrStall+0xa0>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68f9      	ldr	r1, [r7, #12]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f004 fa0c 	bl	800b102 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	; 0x38
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d04:	e2ec      	b.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d0e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006d1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f040 8161 	bne.w	8006fe8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d152      	bne.n	8006dd6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d40:	81fb      	strh	r3, [r7, #14]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	89fb      	ldrh	r3, [r7, #14]
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3328      	adds	r3, #40	; 0x28
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3302      	adds	r3, #2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	441a      	add	r2, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f006 f90d 	bl	800cfb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 829b 	beq.w	80072e0 <PCD_EP_ISR_Handler+0x5e4>
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 8296 	bne.w	80072e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006dd4:	e284      	b.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006de6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d034      	beq.n	8006e5a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	4413      	add	r3, r2
 8006e04:	3306      	adds	r3, #6
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f004 fa9a 	bl	800b368 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e40:	4013      	ands	r3, r2
 8006e42:	823b      	strh	r3, [r7, #16]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	8a3a      	ldrh	r2, [r7, #16]
 8006e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e4e:	b292      	uxth	r2, r2
 8006e50:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f006 f882 	bl	800cf5c <HAL_PCD_SetupStageCallback>
 8006e58:	e242      	b.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e5a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f280 823e 	bge.w	80072e0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e70:	4013      	ands	r3, r2
 8006e72:	83bb      	strh	r3, [r7, #28]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	8bba      	ldrh	r2, [r7, #28]
 8006e7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e7e:	b292      	uxth	r2, r2
 8006e80:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	3306      	adds	r3, #6
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6812      	ldr	r2, [r2, #0]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d019      	beq.n	8006eea <PCD_EP_ISR_Handler+0x1ee>
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d015      	beq.n	8006eea <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	6959      	ldr	r1, [r3, #20]
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f004 fa4a 	bl	800b368 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	695a      	ldr	r2, [r3, #20]
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	441a      	add	r2, r3
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f006 f84b 	bl	800cf80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f040 81f2 	bne.w	80072e0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	4413      	add	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d112      	bne.n	8006f4a <PCD_EP_ISR_Handler+0x24e>
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e02f      	b.n	8006faa <PCD_EP_ISR_Handler+0x2ae>
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006f50:	d813      	bhi.n	8006f7a <PCD_EP_ISR_Handler+0x27e>
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	633b      	str	r3, [r7, #48]	; 0x30
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <PCD_EP_ISR_Handler+0x270>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	3301      	adds	r3, #1
 8006f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	029b      	lsls	r3, r3, #10
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	e017      	b.n	8006faa <PCD_EP_ISR_Handler+0x2ae>
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	633b      	str	r3, [r7, #48]	; 0x30
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <PCD_EP_ISR_Handler+0x298>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	3b01      	subs	r3, #1
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	029b      	lsls	r3, r3, #10
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fba:	827b      	strh	r3, [r7, #18]
 8006fbc:	8a7b      	ldrh	r3, [r7, #18]
 8006fbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006fc2:	827b      	strh	r3, [r7, #18]
 8006fc4:	8a7b      	ldrh	r3, [r7, #18]
 8006fc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006fca:	827b      	strh	r3, [r7, #18]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	8a7b      	ldrh	r3, [r7, #18]
 8006fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8013      	strh	r3, [r2, #0]
 8006fe6:	e17b      	b.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ffa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f280 80ea 	bge.w	80071d8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	b29a      	uxth	r2, r3
 8007016:	f640 738f 	movw	r3, #3983	; 0xf8f
 800701a:	4013      	ands	r3, r2
 800701c:	853b      	strh	r3, [r7, #40]	; 0x28
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800702e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007032:	b292      	uxth	r2, r2
 8007034:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007036:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	7b1b      	ldrb	r3, [r3, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d122      	bne.n	800709a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	4413      	add	r3, r2
 8007068:	3306      	adds	r3, #6
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800707e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8087 	beq.w	8007194 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	6959      	ldr	r1, [r3, #20]
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	88da      	ldrh	r2, [r3, #6]
 8007092:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007094:	f004 f968 	bl	800b368 <USB_ReadPMA>
 8007098:	e07c      	b.n	8007194 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	78db      	ldrb	r3, [r3, #3]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d108      	bne.n	80070b4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80070a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070a4:	461a      	mov	r2, r3
 80070a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f927 	bl	80072fc <HAL_PCD_EP_DB_Receive>
 80070ae:	4603      	mov	r3, r0
 80070b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80070b2:	e06f      	b.n	8007194 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	461a      	mov	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d021      	beq.n	8007152 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4413      	add	r3, r2
 8007122:	3302      	adds	r3, #2
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007136:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8007138:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02a      	beq.n	8007194 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	6959      	ldr	r1, [r3, #20]
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	891a      	ldrh	r2, [r3, #8]
 800714a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800714c:	f004 f90c 	bl	800b368 <USB_ReadPMA>
 8007150:	e020      	b.n	8007194 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	3306      	adds	r3, #6
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800717a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800717c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6959      	ldr	r1, [r3, #20]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	895a      	ldrh	r2, [r3, #10]
 800718e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007190:	f004 f8ea 	bl	800b368 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800719a:	441a      	add	r2, r3
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071a6:	441a      	add	r2, r3
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <PCD_EP_ISR_Handler+0x4c2>
 80071b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d206      	bcs.n	80071cc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f005 fedb 	bl	800cf80 <HAL_PCD_DataOutStageCallback>
 80071ca:	e005      	b.n	80071d8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f002 fc4e 	bl	8009a74 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80071d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80071da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d07e      	beq.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80071e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	843b      	strh	r3, [r7, #32]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	441a      	add	r2, r3
 8007220:	8c3b      	ldrh	r3, [r7, #32]
 8007222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722a:	b29b      	uxth	r3, r3
 800722c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	78db      	ldrb	r3, [r3, #3]
 8007232:	2b03      	cmp	r3, #3
 8007234:	d00c      	beq.n	8007250 <PCD_EP_ISR_Handler+0x554>
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	78db      	ldrb	r3, [r3, #3]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8007242:	2b02      	cmp	r3, #2
 8007244:	d146      	bne.n	80072d4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8007246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d141      	bne.n	80072d4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	3302      	adds	r3, #2
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007278:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	8bfb      	ldrh	r3, [r7, #30]
 8007280:	429a      	cmp	r2, r3
 8007282:	d906      	bls.n	8007292 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	8bfb      	ldrh	r3, [r7, #30]
 800728a:	1ad2      	subs	r2, r2, r3
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	619a      	str	r2, [r3, #24]
 8007290:	e002      	b.n	8007298 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	2200      	movs	r2, #0
 8007296:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d106      	bne.n	80072ae <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f005 fe85 	bl	800cfb6 <HAL_PCD_DataInStageCallback>
 80072ac:	e018      	b.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	8bfb      	ldrh	r3, [r7, #30]
 80072b4:	441a      	add	r2, r3
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	8bfb      	ldrh	r3, [r7, #30]
 80072c0:	441a      	add	r2, r3
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f002 fbd1 	bl	8009a74 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80072d2:	e005      	b.n	80072e0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80072d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f91b 	bl	8007516 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	b21b      	sxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f6ff ad0a 	blt.w	8006d06 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3738      	adds	r7, #56	; 0x38
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d07e      	beq.n	8007412 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731c:	b29b      	uxth	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	4413      	add	r3, r2
 8007328:	3302      	adds	r3, #2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800733c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	8b7b      	ldrh	r3, [r7, #26]
 8007344:	429a      	cmp	r2, r3
 8007346:	d306      	bcc.n	8007356 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	699a      	ldr	r2, [r3, #24]
 800734c:	8b7b      	ldrh	r3, [r7, #26]
 800734e:	1ad2      	subs	r2, r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	619a      	str	r2, [r3, #24]
 8007354:	e002      	b.n	800735c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d123      	bne.n	80073ac <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800737a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800737e:	833b      	strh	r3, [r7, #24]
 8007380:	8b3b      	ldrh	r3, [r7, #24]
 8007382:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007386:	833b      	strh	r3, [r7, #24]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	441a      	add	r2, r3
 8007396:	8b3b      	ldrh	r3, [r7, #24]
 8007398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01f      	beq.n	80073f6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d0:	82fb      	strh	r3, [r7, #22]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	441a      	add	r2, r3
 80073e0:	8afb      	ldrh	r3, [r7, #22]
 80073e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80073f6:	8b7b      	ldrh	r3, [r7, #26]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 8087 	beq.w	800750c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6959      	ldr	r1, [r3, #20]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	891a      	ldrh	r2, [r3, #8]
 800740a:	8b7b      	ldrh	r3, [r7, #26]
 800740c:	f003 ffac 	bl	800b368 <USB_ReadPMA>
 8007410:	e07c      	b.n	800750c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800741a:	b29b      	uxth	r3, r3
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4413      	add	r3, r2
 8007426:	3306      	adds	r3, #6
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800743a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	8b7b      	ldrh	r3, [r7, #26]
 8007442:	429a      	cmp	r2, r3
 8007444:	d306      	bcc.n	8007454 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	8b7b      	ldrh	r3, [r7, #26]
 800744c:	1ad2      	subs	r2, r2, r3
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	619a      	str	r2, [r3, #24]
 8007452:	e002      	b.n	800745a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d123      	bne.n	80074aa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	b29b      	uxth	r3, r3
 8007474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747c:	83fb      	strh	r3, [r7, #30]
 800747e:	8bfb      	ldrh	r3, [r7, #30]
 8007480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007484:	83fb      	strh	r3, [r7, #30]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	441a      	add	r2, r3
 8007494:	8bfb      	ldrh	r3, [r7, #30]
 8007496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800749a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800749e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d11f      	bne.n	80074f4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ce:	83bb      	strh	r3, [r7, #28]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	441a      	add	r2, r3
 80074de:	8bbb      	ldrh	r3, [r7, #28]
 80074e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80074f4:	8b7b      	ldrh	r3, [r7, #26]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d008      	beq.n	800750c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6959      	ldr	r1, [r3, #20]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	895a      	ldrh	r2, [r3, #10]
 8007506:	8b7b      	ldrh	r3, [r7, #26]
 8007508:	f003 ff2e 	bl	800b368 <USB_ReadPMA>
    }
  }

  return count;
 800750c:	8b7b      	ldrh	r3, [r7, #26]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3720      	adds	r7, #32
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b0a2      	sub	sp, #136	; 0x88
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	4613      	mov	r3, r2
 8007522:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 81c7 	beq.w	80078be <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007538:	b29b      	uxth	r3, r3
 800753a:	461a      	mov	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	3302      	adds	r3, #2
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	6812      	ldr	r2, [r2, #0]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007558:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007564:	429a      	cmp	r2, r3
 8007566:	d907      	bls.n	8007578 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	619a      	str	r2, [r3, #24]
 8007576:	e002      	b.n	800757e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f040 80b9 	bne.w	80076fa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d126      	bne.n	80075de <HAL_PCD_EP_DB_Transmit+0xc8>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	62bb      	str	r3, [r7, #40]	; 0x28
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759e:	b29b      	uxth	r3, r3
 80075a0:	461a      	mov	r2, r3
 80075a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a4:	4413      	add	r3, r2
 80075a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	011a      	lsls	r2, r3, #4
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	4413      	add	r3, r2
 80075b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	801a      	strh	r2, [r3, #0]
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e01a      	b.n	8007614 <HAL_PCD_EP_DB_Transmit+0xfe>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d116      	bne.n	8007614 <HAL_PCD_EP_DB_Transmit+0xfe>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	4413      	add	r3, r2
 80075fc:	633b      	str	r3, [r7, #48]	; 0x30
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	011a      	lsls	r2, r3, #4
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	4413      	add	r3, r2
 8007608:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	2200      	movs	r2, #0
 8007612:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	623b      	str	r3, [r7, #32]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	785b      	ldrb	r3, [r3, #1]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d126      	bne.n	8007670 <HAL_PCD_EP_DB_Transmit+0x15a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007630:	b29b      	uxth	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	4413      	add	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	011a      	lsls	r2, r3, #4
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	4413      	add	r3, r2
 8007644:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007654:	b29a      	uxth	r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007668:	b29a      	uxth	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e017      	b.n	80076a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d113      	bne.n	80076a0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007680:	b29b      	uxth	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	4413      	add	r3, r2
 8007688:	623b      	str	r3, [r7, #32]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	011a      	lsls	r2, r3, #4
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	4413      	add	r3, r2
 8007694:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007698:	61fb      	str	r3, [r7, #28]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	2200      	movs	r2, #0
 800769e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	4619      	mov	r1, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f005 fc85 	bl	800cfb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 82d4 	beq.w	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	461a      	mov	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	827b      	strh	r3, [r7, #18]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	441a      	add	r2, r3
 80076e2:	8a7b      	ldrh	r3, [r7, #18]
 80076e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	8013      	strh	r3, [r2, #0]
 80076f8:	e2b2      	b.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d021      	beq.n	8007748 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800771a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800771e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	441a      	add	r2, r3
 8007730:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	b29b      	uxth	r3, r3
 8007746:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800774e:	2b01      	cmp	r3, #1
 8007750:	f040 8286 	bne.w	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	695a      	ldr	r2, [r3, #20]
 8007758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800775c:	441a      	add	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800776a:	441a      	add	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a1a      	ldr	r2, [r3, #32]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	429a      	cmp	r2, r3
 800777a:	d309      	bcc.n	8007790 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6a1a      	ldr	r2, [r3, #32]
 8007786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007788:	1ad2      	subs	r2, r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	621a      	str	r2, [r3, #32]
 800778e:	e015      	b.n	80077bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d107      	bne.n	80077a8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8007798:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800779c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80077a6:	e009      	b.n	80077bc <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	785b      	ldrb	r3, [r3, #1]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d155      	bne.n	8007870 <HAL_PCD_EP_DB_Transmit+0x35a>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	4413      	add	r3, r2
 80077da:	63bb      	str	r3, [r7, #56]	; 0x38
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	011a      	lsls	r2, r3, #4
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	4413      	add	r3, r2
 80077e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d112      	bne.n	8007818 <HAL_PCD_EP_DB_Transmit+0x302>
 80077f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29b      	uxth	r3, r3
 8007808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007810:	b29a      	uxth	r2, r3
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e047      	b.n	80078a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8007818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800781a:	2b3e      	cmp	r3, #62	; 0x3e
 800781c:	d811      	bhi.n	8007842 <HAL_PCD_EP_DB_Transmit+0x32c>
 800781e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007820:	085b      	lsrs	r3, r3, #1
 8007822:	64bb      	str	r3, [r7, #72]	; 0x48
 8007824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_PCD_EP_DB_Transmit+0x31e>
 800782e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007830:	3301      	adds	r3, #1
 8007832:	64bb      	str	r3, [r7, #72]	; 0x48
 8007834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007836:	b29b      	uxth	r3, r3
 8007838:	029b      	lsls	r3, r3, #10
 800783a:	b29a      	uxth	r2, r3
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	801a      	strh	r2, [r3, #0]
 8007840:	e032      	b.n	80078a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8007842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	64bb      	str	r3, [r7, #72]	; 0x48
 8007848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784a:	f003 031f 	and.w	r3, r3, #31
 800784e:	2b00      	cmp	r3, #0
 8007850:	d102      	bne.n	8007858 <HAL_PCD_EP_DB_Transmit+0x342>
 8007852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007854:	3b01      	subs	r3, #1
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
 8007858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785a:	b29b      	uxth	r3, r3
 800785c:	029b      	lsls	r3, r3, #10
 800785e:	b29b      	uxth	r3, r3
 8007860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007868:	b29a      	uxth	r2, r3
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e01b      	b.n	80078a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	785b      	ldrb	r3, [r3, #1]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d117      	bne.n	80078a8 <HAL_PCD_EP_DB_Transmit+0x392>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	643b      	str	r3, [r7, #64]	; 0x40
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007886:	b29b      	uxth	r3, r3
 8007888:	461a      	mov	r2, r3
 800788a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800788c:	4413      	add	r3, r2
 800788e:	643b      	str	r3, [r7, #64]	; 0x40
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	011a      	lsls	r2, r3, #4
 8007896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007898:	4413      	add	r3, r2
 800789a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6959      	ldr	r1, [r3, #20]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	891a      	ldrh	r2, [r3, #8]
 80078b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f003 fd11 	bl	800b2de <USB_WritePMA>
 80078bc:	e1d0      	b.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	4413      	add	r3, r2
 80078d2:	3306      	adds	r3, #6
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d307      	bcc.n	8007906 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	619a      	str	r2, [r3, #24]
 8007904:	e002      	b.n	800790c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2200      	movs	r2, #0
 800790a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	f040 80c4 	bne.w	8007a9e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d126      	bne.n	800796c <HAL_PCD_EP_DB_Transmit+0x456>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800792c:	b29b      	uxth	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007932:	4413      	add	r3, r2
 8007934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	011a      	lsls	r2, r3, #4
 800793c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793e:	4413      	add	r3, r2
 8007940:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007944:	66bb      	str	r3, [r7, #104]	; 0x68
 8007946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007950:	b29a      	uxth	r2, r3
 8007952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007964:	b29a      	uxth	r2, r3
 8007966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	e01a      	b.n	80079a2 <HAL_PCD_EP_DB_Transmit+0x48c>
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d116      	bne.n	80079a2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	677b      	str	r3, [r7, #116]	; 0x74
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007982:	b29b      	uxth	r3, r3
 8007984:	461a      	mov	r2, r3
 8007986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007988:	4413      	add	r3, r2
 800798a:	677b      	str	r3, [r7, #116]	; 0x74
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	011a      	lsls	r2, r3, #4
 8007992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007994:	4413      	add	r3, r2
 8007996:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800799a:	673b      	str	r3, [r7, #112]	; 0x70
 800799c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800799e:	2200      	movs	r2, #0
 80079a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	785b      	ldrb	r3, [r3, #1]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d12f      	bne.n	8007a10 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079c8:	4413      	add	r3, r2
 80079ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	011a      	lsls	r2, r3, #4
 80079d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079d8:	4413      	add	r3, r2
 80079da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079e6:	881b      	ldrh	r3, [r3, #0]
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a0c:	801a      	strh	r2, [r3, #0]
 8007a0e:	e017      	b.n	8007a40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d113      	bne.n	8007a40 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a26:	4413      	add	r3, r2
 8007a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	011a      	lsls	r2, r3, #4
 8007a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	4619      	mov	r1, r3
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f005 fab5 	bl	800cfb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f040 8104 	bne.w	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8013      	strh	r3, [r2, #0]
 8007a9c:	e0e0      	b.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d121      	bne.n	8007aec <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	461a      	mov	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	441a      	add	r2, r3
 8007ad4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	f040 80b4 	bne.w	8007c60 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b00:	441a      	add	r2, r3
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	69da      	ldr	r2, [r3, #28]
 8007b0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b0e:	441a      	add	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6a1a      	ldr	r2, [r3, #32]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d309      	bcc.n	8007b34 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	6a1a      	ldr	r2, [r3, #32]
 8007b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b2c:	1ad2      	subs	r2, r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	621a      	str	r2, [r3, #32]
 8007b32:	e015      	b.n	8007b60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d107      	bne.n	8007b4c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8007b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b4a:	e009      	b.n	8007b60 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	667b      	str	r3, [r7, #100]	; 0x64
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	785b      	ldrb	r3, [r3, #1]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d155      	bne.n	8007c1a <HAL_PCD_EP_DB_Transmit+0x704>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b82:	4413      	add	r3, r2
 8007b84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	011a      	lsls	r2, r3, #4
 8007b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d112      	bne.n	8007bc2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8007b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	e044      	b.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x736>
 8007bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc6:	d811      	bhi.n	8007bec <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8007bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_PCD_EP_DB_Transmit+0x6c8>
 8007bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bda:	3301      	adds	r3, #1
 8007bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8007bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	029b      	lsls	r3, r3, #10
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007be8:	801a      	strh	r2, [r3, #0]
 8007bea:	e02f      	b.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x736>
 8007bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8007bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	657b      	str	r3, [r7, #84]	; 0x54
 8007c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	029b      	lsls	r3, r3, #10
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e018      	b.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x736>
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d114      	bne.n	8007c4c <HAL_PCD_EP_DB_Transmit+0x736>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c30:	4413      	add	r3, r2
 8007c32:	667b      	str	r3, [r7, #100]	; 0x64
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c42:	663b      	str	r3, [r7, #96]	; 0x60
 8007c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c4a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6959      	ldr	r1, [r3, #20]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	895a      	ldrh	r2, [r3, #10]
 8007c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f003 fb3f 	bl	800b2de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7a:	823b      	strh	r3, [r7, #16]
 8007c7c:	8a3b      	ldrh	r3, [r7, #16]
 8007c7e:	f083 0310 	eor.w	r3, r3, #16
 8007c82:	823b      	strh	r3, [r7, #16]
 8007c84:	8a3b      	ldrh	r3, [r7, #16]
 8007c86:	f083 0320 	eor.w	r3, r3, #32
 8007c8a:	823b      	strh	r3, [r7, #16]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	8a3b      	ldrh	r3, [r7, #16]
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3788      	adds	r7, #136	; 0x88
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b087      	sub	sp, #28
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	607b      	str	r3, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	817b      	strh	r3, [r7, #10]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007ccc:	897b      	ldrh	r3, [r7, #10]
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cd8:	897b      	ldrh	r3, [r7, #10]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	e009      	b.n	8007d04 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007cf0:	897a      	ldrh	r2, [r7, #10]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	4413      	add	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007d04:	893b      	ldrh	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d107      	bne.n	8007d1a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	80da      	strh	r2, [r3, #6]
 8007d18:	e00b      	b.n	8007d32 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	371c      	adds	r7, #28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr
	...

08007d40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e26c      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 8087 	beq.w	8007e6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d60:	4b92      	ldr	r3, [pc, #584]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f003 030c 	and.w	r3, r3, #12
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d00c      	beq.n	8007d86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007d6c:	4b8f      	ldr	r3, [pc, #572]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f003 030c 	and.w	r3, r3, #12
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d112      	bne.n	8007d9e <HAL_RCC_OscConfig+0x5e>
 8007d78:	4b8c      	ldr	r3, [pc, #560]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d84:	d10b      	bne.n	8007d9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d86:	4b89      	ldr	r3, [pc, #548]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d06c      	beq.n	8007e6c <HAL_RCC_OscConfig+0x12c>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d168      	bne.n	8007e6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e246      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da6:	d106      	bne.n	8007db6 <HAL_RCC_OscConfig+0x76>
 8007da8:	4b80      	ldr	r3, [pc, #512]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a7f      	ldr	r2, [pc, #508]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	e02e      	b.n	8007e14 <HAL_RCC_OscConfig+0xd4>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10c      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x98>
 8007dbe:	4b7b      	ldr	r3, [pc, #492]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a7a      	ldr	r2, [pc, #488]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	4b78      	ldr	r3, [pc, #480]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a77      	ldr	r2, [pc, #476]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	e01d      	b.n	8007e14 <HAL_RCC_OscConfig+0xd4>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de0:	d10c      	bne.n	8007dfc <HAL_RCC_OscConfig+0xbc>
 8007de2:	4b72      	ldr	r3, [pc, #456]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a71      	ldr	r2, [pc, #452]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	4b6f      	ldr	r3, [pc, #444]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a6e      	ldr	r2, [pc, #440]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	e00b      	b.n	8007e14 <HAL_RCC_OscConfig+0xd4>
 8007dfc:	4b6b      	ldr	r3, [pc, #428]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a6a      	ldr	r2, [pc, #424]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	4b68      	ldr	r3, [pc, #416]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a67      	ldr	r2, [pc, #412]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d013      	beq.n	8007e44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e1c:	f7fc f8e4 	bl	8003fe8 <HAL_GetTick>
 8007e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e24:	f7fc f8e0 	bl	8003fe8 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b64      	cmp	r3, #100	; 0x64
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e1fa      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e36:	4b5d      	ldr	r3, [pc, #372]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f0      	beq.n	8007e24 <HAL_RCC_OscConfig+0xe4>
 8007e42:	e014      	b.n	8007e6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e44:	f7fc f8d0 	bl	8003fe8 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e4c:	f7fc f8cc 	bl	8003fe8 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b64      	cmp	r3, #100	; 0x64
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e1e6      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e5e:	4b53      	ldr	r3, [pc, #332]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1f0      	bne.n	8007e4c <HAL_RCC_OscConfig+0x10c>
 8007e6a:	e000      	b.n	8007e6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d063      	beq.n	8007f42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e7a:	4b4c      	ldr	r3, [pc, #304]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f003 030c 	and.w	r3, r3, #12
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00b      	beq.n	8007e9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007e86:	4b49      	ldr	r3, [pc, #292]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f003 030c 	and.w	r3, r3, #12
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d11c      	bne.n	8007ecc <HAL_RCC_OscConfig+0x18c>
 8007e92:	4b46      	ldr	r3, [pc, #280]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d116      	bne.n	8007ecc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9e:	4b43      	ldr	r3, [pc, #268]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x176>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d001      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e1ba      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb6:	4b3d      	ldr	r3, [pc, #244]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	4939      	ldr	r1, [pc, #228]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eca:	e03a      	b.n	8007f42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d020      	beq.n	8007f16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ed4:	4b36      	ldr	r3, [pc, #216]	; (8007fb0 <HAL_RCC_OscConfig+0x270>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eda:	f7fc f885 	bl	8003fe8 <HAL_GetTick>
 8007ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ee0:	e008      	b.n	8007ef4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ee2:	f7fc f881 	bl	8003fe8 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e19b      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ef4:	4b2d      	ldr	r3, [pc, #180]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d0f0      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f00:	4b2a      	ldr	r3, [pc, #168]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	4927      	ldr	r1, [pc, #156]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	600b      	str	r3, [r1, #0]
 8007f14:	e015      	b.n	8007f42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f16:	4b26      	ldr	r3, [pc, #152]	; (8007fb0 <HAL_RCC_OscConfig+0x270>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f1c:	f7fc f864 	bl	8003fe8 <HAL_GetTick>
 8007f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f22:	e008      	b.n	8007f36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f24:	f7fc f860 	bl	8003fe8 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e17a      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f36:	4b1d      	ldr	r3, [pc, #116]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f0      	bne.n	8007f24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d03a      	beq.n	8007fc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d019      	beq.n	8007f8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f56:	4b17      	ldr	r3, [pc, #92]	; (8007fb4 <HAL_RCC_OscConfig+0x274>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f5c:	f7fc f844 	bl	8003fe8 <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f64:	f7fc f840 	bl	8003fe8 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e15a      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f76:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <HAL_RCC_OscConfig+0x26c>)
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f0      	beq.n	8007f64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007f82:	2001      	movs	r0, #1
 8007f84:	f000 fac4 	bl	8008510 <RCC_Delay>
 8007f88:	e01c      	b.n	8007fc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <HAL_RCC_OscConfig+0x274>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f90:	f7fc f82a 	bl	8003fe8 <HAL_GetTick>
 8007f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f96:	e00f      	b.n	8007fb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f98:	f7fc f826 	bl	8003fe8 <HAL_GetTick>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d908      	bls.n	8007fb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e140      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
 8007faa:	bf00      	nop
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	42420000 	.word	0x42420000
 8007fb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fb8:	4b9e      	ldr	r3, [pc, #632]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e9      	bne.n	8007f98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80a6 	beq.w	800811e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fd6:	4b97      	ldr	r3, [pc, #604]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10d      	bne.n	8007ffe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fe2:	4b94      	ldr	r3, [pc, #592]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	4a93      	ldr	r2, [pc, #588]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8007fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fec:	61d3      	str	r3, [r2, #28]
 8007fee:	4b91      	ldr	r3, [pc, #580]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff6:	60bb      	str	r3, [r7, #8]
 8007ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffe:	4b8e      	ldr	r3, [pc, #568]	; (8008238 <HAL_RCC_OscConfig+0x4f8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008006:	2b00      	cmp	r3, #0
 8008008:	d118      	bne.n	800803c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800800a:	4b8b      	ldr	r3, [pc, #556]	; (8008238 <HAL_RCC_OscConfig+0x4f8>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a8a      	ldr	r2, [pc, #552]	; (8008238 <HAL_RCC_OscConfig+0x4f8>)
 8008010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008016:	f7fb ffe7 	bl	8003fe8 <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801c:	e008      	b.n	8008030 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801e:	f7fb ffe3 	bl	8003fe8 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b64      	cmp	r3, #100	; 0x64
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e0fd      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008030:	4b81      	ldr	r3, [pc, #516]	; (8008238 <HAL_RCC_OscConfig+0x4f8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0f0      	beq.n	800801e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d106      	bne.n	8008052 <HAL_RCC_OscConfig+0x312>
 8008044:	4b7b      	ldr	r3, [pc, #492]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	4a7a      	ldr	r2, [pc, #488]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800804a:	f043 0301 	orr.w	r3, r3, #1
 800804e:	6213      	str	r3, [r2, #32]
 8008050:	e02d      	b.n	80080ae <HAL_RCC_OscConfig+0x36e>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <HAL_RCC_OscConfig+0x334>
 800805a:	4b76      	ldr	r3, [pc, #472]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	4a75      	ldr	r2, [pc, #468]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	6213      	str	r3, [r2, #32]
 8008066:	4b73      	ldr	r3, [pc, #460]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	4a72      	ldr	r2, [pc, #456]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800806c:	f023 0304 	bic.w	r3, r3, #4
 8008070:	6213      	str	r3, [r2, #32]
 8008072:	e01c      	b.n	80080ae <HAL_RCC_OscConfig+0x36e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b05      	cmp	r3, #5
 800807a:	d10c      	bne.n	8008096 <HAL_RCC_OscConfig+0x356>
 800807c:	4b6d      	ldr	r3, [pc, #436]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	4a6c      	ldr	r2, [pc, #432]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008082:	f043 0304 	orr.w	r3, r3, #4
 8008086:	6213      	str	r3, [r2, #32]
 8008088:	4b6a      	ldr	r3, [pc, #424]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	4a69      	ldr	r2, [pc, #420]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	6213      	str	r3, [r2, #32]
 8008094:	e00b      	b.n	80080ae <HAL_RCC_OscConfig+0x36e>
 8008096:	4b67      	ldr	r3, [pc, #412]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	4a66      	ldr	r2, [pc, #408]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	6213      	str	r3, [r2, #32]
 80080a2:	4b64      	ldr	r3, [pc, #400]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	4a63      	ldr	r2, [pc, #396]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d015      	beq.n	80080e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080b6:	f7fb ff97 	bl	8003fe8 <HAL_GetTick>
 80080ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080bc:	e00a      	b.n	80080d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080be:	f7fb ff93 	bl	8003fe8 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e0ab      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080d4:	4b57      	ldr	r3, [pc, #348]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d0ee      	beq.n	80080be <HAL_RCC_OscConfig+0x37e>
 80080e0:	e014      	b.n	800810c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e2:	f7fb ff81 	bl	8003fe8 <HAL_GetTick>
 80080e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080e8:	e00a      	b.n	8008100 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080ea:	f7fb ff7d 	bl	8003fe8 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d901      	bls.n	8008100 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e095      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008100:	4b4c      	ldr	r3, [pc, #304]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1ee      	bne.n	80080ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d105      	bne.n	800811e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008112:	4b48      	ldr	r3, [pc, #288]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	4a47      	ldr	r2, [pc, #284]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800811c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8081 	beq.w	800822a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008128:	4b42      	ldr	r3, [pc, #264]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f003 030c 	and.w	r3, r3, #12
 8008130:	2b08      	cmp	r3, #8
 8008132:	d061      	beq.n	80081f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d146      	bne.n	80081ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800813c:	4b3f      	ldr	r3, [pc, #252]	; (800823c <HAL_RCC_OscConfig+0x4fc>)
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008142:	f7fb ff51 	bl	8003fe8 <HAL_GetTick>
 8008146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800814a:	f7fb ff4d 	bl	8003fe8 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e067      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800815c:	4b35      	ldr	r3, [pc, #212]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f0      	bne.n	800814a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008170:	d108      	bne.n	8008184 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008172:	4b30      	ldr	r3, [pc, #192]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	492d      	ldr	r1, [pc, #180]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008180:	4313      	orrs	r3, r2
 8008182:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008184:	4b2b      	ldr	r3, [pc, #172]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a19      	ldr	r1, [r3, #32]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	430b      	orrs	r3, r1
 8008196:	4927      	ldr	r1, [pc, #156]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008198:	4313      	orrs	r3, r2
 800819a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800819c:	4b27      	ldr	r3, [pc, #156]	; (800823c <HAL_RCC_OscConfig+0x4fc>)
 800819e:	2201      	movs	r2, #1
 80081a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081a2:	f7fb ff21 	bl	8003fe8 <HAL_GetTick>
 80081a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081aa:	f7fb ff1d 	bl	8003fe8 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e037      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80081bc:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0f0      	beq.n	80081aa <HAL_RCC_OscConfig+0x46a>
 80081c8:	e02f      	b.n	800822a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ca:	4b1c      	ldr	r3, [pc, #112]	; (800823c <HAL_RCC_OscConfig+0x4fc>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081d0:	f7fb ff0a 	bl	8003fe8 <HAL_GetTick>
 80081d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081d8:	f7fb ff06 	bl	8003fe8 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e020      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081ea:	4b12      	ldr	r3, [pc, #72]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f0      	bne.n	80081d8 <HAL_RCC_OscConfig+0x498>
 80081f6:	e018      	b.n	800822a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e013      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <HAL_RCC_OscConfig+0x4f4>)
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	429a      	cmp	r2, r3
 8008216:	d106      	bne.n	8008226 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008222:	429a      	cmp	r2, r3
 8008224:	d001      	beq.n	800822a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40021000 	.word	0x40021000
 8008238:	40007000 	.word	0x40007000
 800823c:	42420060 	.word	0x42420060

08008240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0d0      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008254:	4b6a      	ldr	r3, [pc, #424]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d910      	bls.n	8008284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	4b67      	ldr	r3, [pc, #412]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f023 0207 	bic.w	r2, r3, #7
 800826a:	4965      	ldr	r1, [pc, #404]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	4313      	orrs	r3, r2
 8008270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008272:	4b63      	ldr	r3, [pc, #396]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d001      	beq.n	8008284 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0b8      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d020      	beq.n	80082d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800829c:	4b59      	ldr	r3, [pc, #356]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4a58      	ldr	r2, [pc, #352]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80082a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082b4:	4b53      	ldr	r3, [pc, #332]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4a52      	ldr	r2, [pc, #328]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80082be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082c0:	4b50      	ldr	r3, [pc, #320]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	494d      	ldr	r1, [pc, #308]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d040      	beq.n	8008360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d107      	bne.n	80082f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e6:	4b47      	ldr	r3, [pc, #284]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d115      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e07f      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d107      	bne.n	800830e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082fe:	4b41      	ldr	r3, [pc, #260]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e073      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800830e:	4b3d      	ldr	r3, [pc, #244]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e06b      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800831e:	4b39      	ldr	r3, [pc, #228]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f023 0203 	bic.w	r2, r3, #3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4936      	ldr	r1, [pc, #216]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 800832c:	4313      	orrs	r3, r2
 800832e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008330:	f7fb fe5a 	bl	8003fe8 <HAL_GetTick>
 8008334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008336:	e00a      	b.n	800834e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008338:	f7fb fe56 	bl	8003fe8 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	f241 3288 	movw	r2, #5000	; 0x1388
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e053      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800834e:	4b2d      	ldr	r3, [pc, #180]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f003 020c 	and.w	r2, r3, #12
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	429a      	cmp	r2, r3
 800835e:	d1eb      	bne.n	8008338 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008360:	4b27      	ldr	r3, [pc, #156]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d210      	bcs.n	8008390 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800836e:	4b24      	ldr	r3, [pc, #144]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f023 0207 	bic.w	r2, r3, #7
 8008376:	4922      	ldr	r1, [pc, #136]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	4313      	orrs	r3, r2
 800837c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800837e:	4b20      	ldr	r3, [pc, #128]	; (8008400 <HAL_RCC_ClockConfig+0x1c0>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d001      	beq.n	8008390 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e032      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	4916      	ldr	r1, [pc, #88]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d009      	beq.n	80083ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	490e      	ldr	r1, [pc, #56]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083ce:	f000 f821 	bl	8008414 <HAL_RCC_GetSysClockFreq>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <HAL_RCC_ClockConfig+0x1c4>)
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	091b      	lsrs	r3, r3, #4
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	490a      	ldr	r1, [pc, #40]	; (8008408 <HAL_RCC_ClockConfig+0x1c8>)
 80083e0:	5ccb      	ldrb	r3, [r1, r3]
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	4a09      	ldr	r2, [pc, #36]	; (800840c <HAL_RCC_ClockConfig+0x1cc>)
 80083e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80083ea:	4b09      	ldr	r3, [pc, #36]	; (8008410 <HAL_RCC_ClockConfig+0x1d0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fb fdb8 	bl	8003f64 <HAL_InitTick>

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40022000 	.word	0x40022000
 8008404:	40021000 	.word	0x40021000
 8008408:	0800e8f4 	.word	0x0800e8f4
 800840c:	20000078 	.word	0x20000078
 8008410:	2000007c 	.word	0x2000007c

08008414 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008414:	b490      	push	{r4, r7}
 8008416:	b08a      	sub	sp, #40	; 0x28
 8008418:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800841a:	4b2a      	ldr	r3, [pc, #168]	; (80084c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800841c:	1d3c      	adds	r4, r7, #4
 800841e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008424:	f240 2301 	movw	r3, #513	; 0x201
 8008428:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	2300      	movs	r3, #0
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	2300      	movs	r3, #0
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800843e:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f003 030c 	and.w	r3, r3, #12
 800844a:	2b04      	cmp	r3, #4
 800844c:	d002      	beq.n	8008454 <HAL_RCC_GetSysClockFreq+0x40>
 800844e:	2b08      	cmp	r3, #8
 8008450:	d003      	beq.n	800845a <HAL_RCC_GetSysClockFreq+0x46>
 8008452:	e02d      	b.n	80084b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008454:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008456:	623b      	str	r3, [r7, #32]
      break;
 8008458:	e02d      	b.n	80084b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	0c9b      	lsrs	r3, r3, #18
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008466:	4413      	add	r3, r2
 8008468:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800846c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d013      	beq.n	80084a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008478:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	0c5b      	lsrs	r3, r3, #17
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008486:	4413      	add	r3, r2
 8008488:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800848c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	4a0e      	ldr	r2, [pc, #56]	; (80084cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008492:	fb02 f203 	mul.w	r2, r2, r3
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	fbb2 f3f3 	udiv	r3, r2, r3
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
 800849e:	e004      	b.n	80084aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4a0b      	ldr	r2, [pc, #44]	; (80084d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80084a4:	fb02 f303 	mul.w	r3, r2, r3
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	623b      	str	r3, [r7, #32]
      break;
 80084ae:	e002      	b.n	80084b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80084b0:	4b06      	ldr	r3, [pc, #24]	; (80084cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80084b2:	623b      	str	r3, [r7, #32]
      break;
 80084b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084b6:	6a3b      	ldr	r3, [r7, #32]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3728      	adds	r7, #40	; 0x28
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc90      	pop	{r4, r7}
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	0800db40 	.word	0x0800db40
 80084c8:	40021000 	.word	0x40021000
 80084cc:	007a1200 	.word	0x007a1200
 80084d0:	003d0900 	.word	0x003d0900

080084d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084d8:	4b02      	ldr	r3, [pc, #8]	; (80084e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80084da:	681b      	ldr	r3, [r3, #0]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	20000078 	.word	0x20000078

080084e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084ec:	f7ff fff2 	bl	80084d4 <HAL_RCC_GetHCLKFreq>
 80084f0:	4602      	mov	r2, r0
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	0a1b      	lsrs	r3, r3, #8
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	4903      	ldr	r1, [pc, #12]	; (800850c <HAL_RCC_GetPCLK1Freq+0x24>)
 80084fe:	5ccb      	ldrb	r3, [r1, r3]
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008504:	4618      	mov	r0, r3
 8008506:	bd80      	pop	{r7, pc}
 8008508:	40021000 	.word	0x40021000
 800850c:	0800e904 	.word	0x0800e904

08008510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008518:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <RCC_Delay+0x34>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a0a      	ldr	r2, [pc, #40]	; (8008548 <RCC_Delay+0x38>)
 800851e:	fba2 2303 	umull	r2, r3, r2, r3
 8008522:	0a5b      	lsrs	r3, r3, #9
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800852c:	bf00      	nop
  }
  while (Delay --);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1e5a      	subs	r2, r3, #1
 8008532:	60fa      	str	r2, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f9      	bne.n	800852c <RCC_Delay+0x1c>
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr
 8008544:	20000078 	.word	0x20000078
 8008548:	10624dd3 	.word	0x10624dd3

0800854c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	2300      	movs	r3, #0
 800855a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d07d      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008568:	2300      	movs	r3, #0
 800856a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800856c:	4b4f      	ldr	r3, [pc, #316]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10d      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008578:	4b4c      	ldr	r3, [pc, #304]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	4a4b      	ldr	r2, [pc, #300]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800857e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008582:	61d3      	str	r3, [r2, #28]
 8008584:	4b49      	ldr	r3, [pc, #292]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858c:	60bb      	str	r3, [r7, #8]
 800858e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008590:	2301      	movs	r3, #1
 8008592:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008594:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d118      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085a0:	4b43      	ldr	r3, [pc, #268]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a42      	ldr	r2, [pc, #264]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085ac:	f7fb fd1c 	bl	8003fe8 <HAL_GetTick>
 80085b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b2:	e008      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085b4:	f7fb fd18 	bl	8003fe8 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b64      	cmp	r3, #100	; 0x64
 80085c0:	d901      	bls.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e06d      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c6:	4b3a      	ldr	r3, [pc, #232]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0f0      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085d2:	4b36      	ldr	r3, [pc, #216]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d02e      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d027      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085f0:	4b2e      	ldr	r3, [pc, #184]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085fa:	4b2e      	ldr	r3, [pc, #184]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008600:	4b2c      	ldr	r3, [pc, #176]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008606:	4a29      	ldr	r2, [pc, #164]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	d014      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008616:	f7fb fce7 	bl	8003fe8 <HAL_GetTick>
 800861a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861c:	e00a      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800861e:	f7fb fce3 	bl	8003fe8 <HAL_GetTick>
 8008622:	4602      	mov	r2, r0
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	f241 3288 	movw	r2, #5000	; 0x1388
 800862c:	4293      	cmp	r3, r2
 800862e:	d901      	bls.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e036      	b.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008634:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0ee      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008640:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	4917      	ldr	r1, [pc, #92]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800864e:	4313      	orrs	r3, r2
 8008650:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d105      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008658:	4b14      	ldr	r3, [pc, #80]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	4a13      	ldr	r2, [pc, #76]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800865e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008662:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008670:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	490b      	ldr	r1, [pc, #44]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800867e:	4313      	orrs	r3, r2
 8008680:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0310 	and.w	r3, r3, #16
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800868e:	4b07      	ldr	r3, [pc, #28]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	4904      	ldr	r1, [pc, #16]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800869c:	4313      	orrs	r3, r2
 800869e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	40021000 	.word	0x40021000
 80086b0:	40007000 	.word	0x40007000
 80086b4:	42420440 	.word	0x42420440

080086b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e041      	b.n	800874e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fb fb46 	bl	8003d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f000 f98e 	bl	8008a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
	...

08008758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d109      	bne.n	800877c <HAL_TIM_PWM_Start+0x24>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800876e:	b2db      	uxtb	r3, r3
 8008770:	2b01      	cmp	r3, #1
 8008772:	bf14      	ite	ne
 8008774:	2301      	movne	r3, #1
 8008776:	2300      	moveq	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	e022      	b.n	80087c2 <HAL_TIM_PWM_Start+0x6a>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b04      	cmp	r3, #4
 8008780:	d109      	bne.n	8008796 <HAL_TIM_PWM_Start+0x3e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b01      	cmp	r3, #1
 800878c:	bf14      	ite	ne
 800878e:	2301      	movne	r3, #1
 8008790:	2300      	moveq	r3, #0
 8008792:	b2db      	uxtb	r3, r3
 8008794:	e015      	b.n	80087c2 <HAL_TIM_PWM_Start+0x6a>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b08      	cmp	r3, #8
 800879a:	d109      	bne.n	80087b0 <HAL_TIM_PWM_Start+0x58>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	bf14      	ite	ne
 80087a8:	2301      	movne	r3, #1
 80087aa:	2300      	moveq	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	e008      	b.n	80087c2 <HAL_TIM_PWM_Start+0x6a>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e05e      	b.n	8008888 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <HAL_TIM_PWM_Start+0x82>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087d8:	e013      	b.n	8008802 <HAL_TIM_PWM_Start+0xaa>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d104      	bne.n	80087ea <HAL_TIM_PWM_Start+0x92>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087e8:	e00b      	b.n	8008802 <HAL_TIM_PWM_Start+0xaa>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d104      	bne.n	80087fa <HAL_TIM_PWM_Start+0xa2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087f8:	e003      	b.n	8008802 <HAL_TIM_PWM_Start+0xaa>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2201      	movs	r2, #1
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f000 faee 	bl	8008dec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <HAL_TIM_PWM_Start+0x138>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d107      	bne.n	800882a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a18      	ldr	r2, [pc, #96]	; (8008890 <HAL_TIM_PWM_Start+0x138>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d00e      	beq.n	8008852 <HAL_TIM_PWM_Start+0xfa>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883c:	d009      	beq.n	8008852 <HAL_TIM_PWM_Start+0xfa>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a14      	ldr	r2, [pc, #80]	; (8008894 <HAL_TIM_PWM_Start+0x13c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d004      	beq.n	8008852 <HAL_TIM_PWM_Start+0xfa>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a12      	ldr	r2, [pc, #72]	; (8008898 <HAL_TIM_PWM_Start+0x140>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d111      	bne.n	8008876 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b06      	cmp	r3, #6
 8008862:	d010      	beq.n	8008886 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f042 0201 	orr.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008874:	e007      	b.n	8008886 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 0201 	orr.w	r2, r2, #1
 8008884:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800

0800889c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d101      	bne.n	80088b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80088b2:	2302      	movs	r3, #2
 80088b4:	e0ac      	b.n	8008a10 <HAL_TIM_PWM_ConfigChannel+0x174>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b0c      	cmp	r3, #12
 80088c2:	f200 809f 	bhi.w	8008a04 <HAL_TIM_PWM_ConfigChannel+0x168>
 80088c6:	a201      	add	r2, pc, #4	; (adr r2, 80088cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	08008901 	.word	0x08008901
 80088d0:	08008a05 	.word	0x08008a05
 80088d4:	08008a05 	.word	0x08008a05
 80088d8:	08008a05 	.word	0x08008a05
 80088dc:	08008941 	.word	0x08008941
 80088e0:	08008a05 	.word	0x08008a05
 80088e4:	08008a05 	.word	0x08008a05
 80088e8:	08008a05 	.word	0x08008a05
 80088ec:	08008983 	.word	0x08008983
 80088f0:	08008a05 	.word	0x08008a05
 80088f4:	08008a05 	.word	0x08008a05
 80088f8:	08008a05 	.word	0x08008a05
 80088fc:	080089c3 	.word	0x080089c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f8e8 	bl	8008adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0204 	bic.w	r2, r2, #4
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	619a      	str	r2, [r3, #24]
      break;
 800893e:	e062      	b.n	8008a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f92e 	bl	8008ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	021a      	lsls	r2, r3, #8
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	619a      	str	r2, [r3, #24]
      break;
 8008980:	e041      	b.n	8008a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 f977 	bl	8008c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0208 	orr.w	r2, r2, #8
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0204 	bic.w	r2, r2, #4
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	61da      	str	r2, [r3, #28]
      break;
 80089c0:	e021      	b.n	8008a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 f9c1 	bl	8008d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69d9      	ldr	r1, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	021a      	lsls	r2, r3, #8
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	61da      	str	r2, [r3, #28]
      break;
 8008a02:	e000      	b.n	8008a06 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008a04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a29      	ldr	r2, [pc, #164]	; (8008ad0 <TIM_Base_SetConfig+0xb8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00b      	beq.n	8008a48 <TIM_Base_SetConfig+0x30>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a36:	d007      	beq.n	8008a48 <TIM_Base_SetConfig+0x30>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <TIM_Base_SetConfig+0xbc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_Base_SetConfig+0x30>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a25      	ldr	r2, [pc, #148]	; (8008ad8 <TIM_Base_SetConfig+0xc0>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d108      	bne.n	8008a5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ad0 <TIM_Base_SetConfig+0xb8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d00b      	beq.n	8008a7a <TIM_Base_SetConfig+0x62>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a68:	d007      	beq.n	8008a7a <TIM_Base_SetConfig+0x62>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a19      	ldr	r2, [pc, #100]	; (8008ad4 <TIM_Base_SetConfig+0xbc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_Base_SetConfig+0x62>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <TIM_Base_SetConfig+0xc0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d108      	bne.n	8008a8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a07      	ldr	r2, [pc, #28]	; (8008ad0 <TIM_Base_SetConfig+0xb8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d103      	bne.n	8008ac0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	691a      	ldr	r2, [r3, #16]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	615a      	str	r2, [r3, #20]
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800

08008adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	f023 0201 	bic.w	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0303 	bic.w	r3, r3, #3
 8008b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f023 0302 	bic.w	r3, r3, #2
 8008b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a1c      	ldr	r2, [pc, #112]	; (8008ba4 <TIM_OC1_SetConfig+0xc8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d10c      	bne.n	8008b52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0308 	bic.w	r3, r3, #8
 8008b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f023 0304 	bic.w	r3, r3, #4
 8008b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a13      	ldr	r2, [pc, #76]	; (8008ba4 <TIM_OC1_SetConfig+0xc8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d111      	bne.n	8008b7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	621a      	str	r2, [r3, #32]
}
 8008b98:	bf00      	nop
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40012c00 	.word	0x40012c00

08008ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0210 	bic.w	r2, r3, #16
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f023 0320 	bic.w	r3, r3, #32
 8008bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a1d      	ldr	r2, [pc, #116]	; (8008c78 <TIM_OC2_SetConfig+0xd0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d10d      	bne.n	8008c24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	011b      	lsls	r3, r3, #4
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a14      	ldr	r2, [pc, #80]	; (8008c78 <TIM_OC2_SetConfig+0xd0>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d113      	bne.n	8008c54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	621a      	str	r2, [r3, #32]
}
 8008c6e:	bf00      	nop
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bc80      	pop	{r7}
 8008c76:	4770      	bx	lr
 8008c78:	40012c00 	.word	0x40012c00

08008c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a1d      	ldr	r2, [pc, #116]	; (8008d4c <TIM_OC3_SetConfig+0xd0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d10d      	bne.n	8008cf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	021b      	lsls	r3, r3, #8
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <TIM_OC3_SetConfig+0xd0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d113      	bne.n	8008d26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	693a      	ldr	r2, [r7, #16]
 8008d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	621a      	str	r2, [r3, #32]
}
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40012c00 	.word	0x40012c00

08008d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a1b      	ldr	r3, [r3, #32]
 8008d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	031b      	lsls	r3, r3, #12
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a0f      	ldr	r2, [pc, #60]	; (8008de8 <TIM_OC4_SetConfig+0x98>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d109      	bne.n	8008dc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	019b      	lsls	r3, r3, #6
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	621a      	str	r2, [r3, #32]
}
 8008dde:	bf00      	nop
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bc80      	pop	{r7}
 8008de6:	4770      	bx	lr
 8008de8:	40012c00 	.word	0x40012c00

08008dec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b087      	sub	sp, #28
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 031f 	and.w	r3, r3, #31
 8008dfe:	2201      	movs	r2, #1
 8008e00:	fa02 f303 	lsl.w	r3, r2, r3
 8008e04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1a      	ldr	r2, [r3, #32]
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	401a      	ands	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a1a      	ldr	r2, [r3, #32]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 031f 	and.w	r3, r3, #31
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	fa01 f303 	lsl.w	r3, r1, r3
 8008e24:	431a      	orrs	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	621a      	str	r2, [r3, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	371c      	adds	r7, #28
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bc80      	pop	{r7}
 8008e32:	4770      	bx	lr

08008e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e046      	b.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a16      	ldr	r2, [pc, #88]	; (8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e98:	d009      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a12      	ldr	r2, [pc, #72]	; (8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a10      	ldr	r2, [pc, #64]	; (8008eec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d10c      	bne.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bc80      	pop	{r7}
 8008ee2:	4770      	bx	lr
 8008ee4:	40012c00 	.word	0x40012c00
 8008ee8:	40000400 	.word	0x40000400
 8008eec:	40000800 	.word	0x40000800

08008ef0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	f107 0014 	add.w	r0, r7, #20
 8008efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bc80      	pop	{r7}
 8008f0c:	b004      	add	sp, #16
 8008f0e:	4770      	bx	lr

08008f10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008f24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bc80      	pop	{r7}
 8008f3a:	4770      	bx	lr

08008f3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008f48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	43db      	mvns	r3, r3
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bc80      	pop	{r7}
 8008f6e:	4770      	bx	lr

08008f70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr

08008f88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f88:	b084      	sub	sp, #16
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	f107 0014 	add.w	r0, r7, #20
 8008f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	b004      	add	sp, #16
 8008fc6:	4770      	bx	lr

08008fc8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b09b      	sub	sp, #108	; 0x6c
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	78db      	ldrb	r3, [r3, #3]
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d81f      	bhi.n	800903a <USB_ActivateEndpoint+0x72>
 8008ffa:	a201      	add	r2, pc, #4	; (adr r2, 8009000 <USB_ActivateEndpoint+0x38>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009011 	.word	0x08009011
 8009004:	0800902d 	.word	0x0800902d
 8009008:	08009043 	.word	0x08009043
 800900c:	0800901f 	.word	0x0800901f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009010:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009018:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800901c:	e012      	b.n	8009044 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800901e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009022:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009026:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800902a:	e00b      	b.n	8009044 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800902c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009034:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009038:	e004      	b.n	8009044 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009040:	e000      	b.n	8009044 <USB_ActivateEndpoint+0x7c>
      break;
 8009042:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009062:	b29b      	uxth	r3, r3
 8009064:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800907c:	b29a      	uxth	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	b29b      	uxth	r3, r3
 8009084:	4313      	orrs	r3, r2
 8009086:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	441a      	add	r2, r3
 8009094:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800909c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	7b1b      	ldrb	r3, [r3, #12]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f040 8149 	bne.w	8009348 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	785b      	ldrb	r3, [r3, #1]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 8084 	beq.w	80091c8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	4413      	add	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	011a      	lsls	r2, r3, #4
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090e2:	613b      	str	r3, [r7, #16]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	88db      	ldrh	r3, [r3, #6]
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	81fb      	strh	r3, [r7, #14]
 8009102:	89fb      	ldrh	r3, [r7, #14]
 8009104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01b      	beq.n	8009144 <USB_ActivateEndpoint+0x17c>
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009122:	81bb      	strh	r3, [r7, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	441a      	add	r2, r3
 800912e:	89bb      	ldrh	r3, [r7, #12]
 8009130:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009134:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800913c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009140:	b29b      	uxth	r3, r3
 8009142:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	78db      	ldrb	r3, [r3, #3]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d020      	beq.n	800918e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009162:	813b      	strh	r3, [r7, #8]
 8009164:	893b      	ldrh	r3, [r7, #8]
 8009166:	f083 0320 	eor.w	r3, r3, #32
 800916a:	813b      	strh	r3, [r7, #8]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	441a      	add	r2, r3
 8009176:	893b      	ldrh	r3, [r7, #8]
 8009178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009188:	b29b      	uxth	r3, r3
 800918a:	8013      	strh	r3, [r2, #0]
 800918c:	e27f      	b.n	800968e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091a4:	817b      	strh	r3, [r7, #10]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	441a      	add	r2, r3
 80091b0:	897b      	ldrh	r3, [r7, #10]
 80091b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	8013      	strh	r3, [r2, #0]
 80091c6:	e262      	b.n	800968e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d8:	4413      	add	r3, r2
 80091da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	011a      	lsls	r2, r3, #4
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80091ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	88db      	ldrh	r3, [r3, #6]
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009206:	b29b      	uxth	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	4413      	add	r3, r2
 800920e:	627b      	str	r3, [r7, #36]	; 0x24
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	011a      	lsls	r2, r3, #4
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	4413      	add	r3, r2
 800921a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800921e:	623b      	str	r3, [r7, #32]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d112      	bne.n	800924e <USB_ActivateEndpoint+0x286>
 8009228:	6a3b      	ldr	r3, [r7, #32]
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009232:	b29a      	uxth	r2, r3
 8009234:	6a3b      	ldr	r3, [r7, #32]
 8009236:	801a      	strh	r2, [r3, #0]
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009246:	b29a      	uxth	r2, r3
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	e02f      	b.n	80092ae <USB_ActivateEndpoint+0x2e6>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b3e      	cmp	r3, #62	; 0x3e
 8009254:	d813      	bhi.n	800927e <USB_ActivateEndpoint+0x2b6>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	663b      	str	r3, [r7, #96]	; 0x60
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <USB_ActivateEndpoint+0x2a8>
 800926a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800926c:	3301      	adds	r3, #1
 800926e:	663b      	str	r3, [r7, #96]	; 0x60
 8009270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009272:	b29b      	uxth	r3, r3
 8009274:	029b      	lsls	r3, r3, #10
 8009276:	b29a      	uxth	r2, r3
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	e017      	b.n	80092ae <USB_ActivateEndpoint+0x2e6>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	095b      	lsrs	r3, r3, #5
 8009284:	663b      	str	r3, [r7, #96]	; 0x60
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 031f 	and.w	r3, r3, #31
 800928e:	2b00      	cmp	r3, #0
 8009290:	d102      	bne.n	8009298 <USB_ActivateEndpoint+0x2d0>
 8009292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009294:	3b01      	subs	r3, #1
 8009296:	663b      	str	r3, [r7, #96]	; 0x60
 8009298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800929a:	b29b      	uxth	r3, r3
 800929c:	029b      	lsls	r3, r3, #10
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	83fb      	strh	r3, [r7, #30]
 80092bc:	8bfb      	ldrh	r3, [r7, #30]
 80092be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01b      	beq.n	80092fe <USB_ActivateEndpoint+0x336>
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092dc:	83bb      	strh	r3, [r7, #28]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	441a      	add	r2, r3
 80092e8:	8bbb      	ldrh	r3, [r7, #28]
 80092ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009314:	837b      	strh	r3, [r7, #26]
 8009316:	8b7b      	ldrh	r3, [r7, #26]
 8009318:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800931c:	837b      	strh	r3, [r7, #26]
 800931e:	8b7b      	ldrh	r3, [r7, #26]
 8009320:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009324:	837b      	strh	r3, [r7, #26]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	441a      	add	r2, r3
 8009330:	8b7b      	ldrh	r3, [r7, #26]
 8009332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800933a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800933e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009342:	b29b      	uxth	r3, r3
 8009344:	8013      	strh	r3, [r2, #0]
 8009346:	e1a2      	b.n	800968e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800935a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	441a      	add	r2, r3
 800936c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009378:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800937c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009380:	b29b      	uxth	r3, r3
 8009382:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	65bb      	str	r3, [r7, #88]	; 0x58
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800938e:	b29b      	uxth	r3, r3
 8009390:	461a      	mov	r2, r3
 8009392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009394:	4413      	add	r3, r2
 8009396:	65bb      	str	r3, [r7, #88]	; 0x58
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	011a      	lsls	r2, r3, #4
 800939e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093a6:	657b      	str	r3, [r7, #84]	; 0x54
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	891b      	ldrh	r3, [r3, #8]
 80093ac:	085b      	lsrs	r3, r3, #1
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093b6:	801a      	strh	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	653b      	str	r3, [r7, #80]	; 0x50
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c8:	4413      	add	r3, r2
 80093ca:	653b      	str	r3, [r7, #80]	; 0x50
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	011a      	lsls	r2, r3, #4
 80093d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80093da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	895b      	ldrh	r3, [r3, #10]
 80093e0:	085b      	lsrs	r3, r3, #1
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	785b      	ldrb	r3, [r3, #1]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f040 8091 	bne.w	8009518 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01b      	beq.n	8009446 <USB_ActivateEndpoint+0x47e>
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29b      	uxth	r3, r3
 800941c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009424:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	441a      	add	r2, r3
 8009430:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800943a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800943e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009442:	b29b      	uxth	r3, r3
 8009444:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	873b      	strh	r3, [r7, #56]	; 0x38
 8009454:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01b      	beq.n	8009496 <USB_ActivateEndpoint+0x4ce>
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009474:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	441a      	add	r2, r3
 8009480:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800948a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800948e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009492:	b29b      	uxth	r3, r3
 8009494:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80094ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80094b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80094b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80094b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80094b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80094bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	441a      	add	r2, r3
 80094c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80094ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	b29b      	uxth	r3, r3
 80094dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f4:	867b      	strh	r3, [r7, #50]	; 0x32
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	441a      	add	r2, r3
 8009500:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800950a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800950e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009512:	b29b      	uxth	r3, r3
 8009514:	8013      	strh	r3, [r2, #0]
 8009516:	e0ba      	b.n	800968e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800952c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01d      	beq.n	8009570 <USB_ActivateEndpoint+0x5a8>
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4413      	add	r3, r2
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	441a      	add	r2, r3
 8009558:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800955c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800956c:	b29b      	uxth	r3, r3
 800956e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009580:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01d      	beq.n	80095c8 <USB_ActivateEndpoint+0x600>
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800959e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	441a      	add	r2, r3
 80095b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80095b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	78db      	ldrb	r3, [r3, #3]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d024      	beq.n	800961a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80095ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80095ee:	f083 0320 	eor.w	r3, r3, #32
 80095f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	441a      	add	r2, r3
 8009600:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800960c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009614:	b29b      	uxth	r3, r3
 8009616:	8013      	strh	r3, [r2, #0]
 8009618:	e01d      	b.n	8009656 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800962c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009630:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	441a      	add	r2, r3
 800963e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800964a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800964e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009652:	b29b      	uxth	r3, r3
 8009654:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	441a      	add	r2, r3
 8009678:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800967a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968a:	b29b      	uxth	r3, r3
 800968c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800968e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009692:	4618      	mov	r0, r3
 8009694:	376c      	adds	r7, #108	; 0x6c
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr

0800969c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800969c:	b480      	push	{r7}
 800969e:	b08d      	sub	sp, #52	; 0x34
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	7b1b      	ldrb	r3, [r3, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f040 808e 	bne.w	80097cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d044      	beq.n	8009742 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	881b      	ldrh	r3, [r3, #0]
 80096c4:	81bb      	strh	r3, [r7, #12]
 80096c6:	89bb      	ldrh	r3, [r7, #12]
 80096c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01b      	beq.n	8009708 <USB_DeactivateEndpoint+0x6c>
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096e6:	817b      	strh	r3, [r7, #10]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	441a      	add	r2, r3
 80096f2:	897b      	ldrh	r3, [r7, #10]
 80096f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009700:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009704:	b29b      	uxth	r3, r3
 8009706:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4413      	add	r3, r2
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	b29b      	uxth	r3, r3
 8009716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800971e:	813b      	strh	r3, [r7, #8]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	441a      	add	r2, r3
 800972a:	893b      	ldrh	r3, [r7, #8]
 800972c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	b29b      	uxth	r3, r3
 800973e:	8013      	strh	r3, [r2, #0]
 8009740:	e192      	b.n	8009a68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	827b      	strh	r3, [r7, #18]
 8009750:	8a7b      	ldrh	r3, [r7, #18]
 8009752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01b      	beq.n	8009792 <USB_DeactivateEndpoint+0xf6>
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	b29b      	uxth	r3, r3
 8009768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800976c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009770:	823b      	strh	r3, [r7, #16]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	441a      	add	r2, r3
 800977c:	8a3b      	ldrh	r3, [r7, #16]
 800977e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800978a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800978e:	b29b      	uxth	r3, r3
 8009790:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	881b      	ldrh	r3, [r3, #0]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097a8:	81fb      	strh	r3, [r7, #14]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	441a      	add	r2, r3
 80097b4:	89fb      	ldrh	r3, [r7, #14]
 80097b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	8013      	strh	r3, [r2, #0]
 80097ca:	e14d      	b.n	8009a68 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f040 80a5 	bne.w	8009920 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	843b      	strh	r3, [r7, #32]
 80097e4:	8c3b      	ldrh	r3, [r7, #32]
 80097e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01b      	beq.n	8009826 <USB_DeactivateEndpoint+0x18a>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009804:	83fb      	strh	r3, [r7, #30]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	441a      	add	r2, r3
 8009810:	8bfb      	ldrh	r3, [r7, #30]
 8009812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800981a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800981e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009822:	b29b      	uxth	r3, r3
 8009824:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	83bb      	strh	r3, [r7, #28]
 8009834:	8bbb      	ldrh	r3, [r7, #28]
 8009836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01b      	beq.n	8009876 <USB_DeactivateEndpoint+0x1da>
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	b29b      	uxth	r3, r3
 800984c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009854:	837b      	strh	r3, [r7, #26]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	441a      	add	r2, r3
 8009860:	8b7b      	ldrh	r3, [r7, #26]
 8009862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800986a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009872:	b29b      	uxth	r3, r3
 8009874:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988c:	833b      	strh	r3, [r7, #24]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	441a      	add	r2, r3
 8009898:	8b3b      	ldrh	r3, [r7, #24]
 800989a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800989e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c4:	82fb      	strh	r3, [r7, #22]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	441a      	add	r2, r3
 80098d0:	8afb      	ldrh	r3, [r7, #22]
 80098d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098fc:	82bb      	strh	r3, [r7, #20]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	441a      	add	r2, r3
 8009908:	8abb      	ldrh	r3, [r7, #20]
 800990a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800990e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800991a:	b29b      	uxth	r3, r3
 800991c:	8013      	strh	r3, [r2, #0]
 800991e:	e0a3      	b.n	8009a68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	881b      	ldrh	r3, [r3, #0]
 800992c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800992e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01b      	beq.n	8009970 <USB_DeactivateEndpoint+0x2d4>
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800994a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	441a      	add	r2, r3
 800995a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800995c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996c:	b29b      	uxth	r3, r3
 800996e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800997e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d01b      	beq.n	80099c0 <USB_DeactivateEndpoint+0x324>
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800999a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999e:	853b      	strh	r3, [r7, #40]	; 0x28
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	441a      	add	r2, r3
 80099aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80099ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099bc:	b29b      	uxth	r3, r3
 80099be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	441a      	add	r2, r3
 80099e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	881b      	ldrh	r3, [r3, #0]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	441a      	add	r2, r3
 8009a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a46:	847b      	strh	r3, [r7, #34]	; 0x22
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3734      	adds	r7, #52	; 0x34
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc80      	pop	{r7}
 8009a72:	4770      	bx	lr

08009a74 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b0cc      	sub	sp, #304	; 0x130
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	1d3b      	adds	r3, r7, #4
 8009a7c:	6018      	str	r0, [r3, #0]
 8009a7e:	463b      	mov	r3, r7
 8009a80:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a82:	463b      	mov	r3, r7
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	785b      	ldrb	r3, [r3, #1]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	f040 872e 	bne.w	800a8ea <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009a8e:	463b      	mov	r3, r7
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699a      	ldr	r2, [r3, #24]
 8009a94:	463b      	mov	r3, r7
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d905      	bls.n	8009aaa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009a9e:	463b      	mov	r3, r7
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009aa8:	e004      	b.n	8009ab4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009aaa:	463b      	mov	r3, r7
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ab4:	463b      	mov	r3, r7
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	7b1b      	ldrb	r3, [r3, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d134      	bne.n	8009b28 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009abe:	463b      	mov	r3, r7
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6959      	ldr	r1, [r3, #20]
 8009ac4:	463b      	mov	r3, r7
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	88da      	ldrh	r2, [r3, #6]
 8009aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	1d38      	adds	r0, r7, #4
 8009ad2:	6800      	ldr	r0, [r0, #0]
 8009ad4:	f001 fc03 	bl	800b2de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009ad8:	f107 0310 	add.w	r3, r7, #16
 8009adc:	1d3a      	adds	r2, r7, #4
 8009ade:	6812      	ldr	r2, [r2, #0]
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	1d3b      	adds	r3, r7, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	4619      	mov	r1, r3
 8009aee:	f107 0310 	add.w	r3, r7, #16
 8009af2:	f107 0210 	add.w	r2, r7, #16
 8009af6:	6812      	ldr	r2, [r2, #0]
 8009af8:	440a      	add	r2, r1
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	463b      	mov	r3, r7
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	011a      	lsls	r2, r3, #4
 8009b04:	f107 0310 	add.w	r3, r7, #16
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009b10:	f107 030c 	add.w	r3, r7, #12
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	f107 030c 	add.w	r3, r7, #12
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	801a      	strh	r2, [r3, #0]
 8009b24:	f000 beac 	b.w	800a880 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009b28:	463b      	mov	r3, r7
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	f040 838c 	bne.w	800a24c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009b34:	463b      	mov	r3, r7
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	f240 8330 	bls.w	800a1a6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009b46:	1d3b      	adds	r3, r7, #4
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	463b      	mov	r3, r7
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b60:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	463b      	mov	r3, r7
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	441a      	add	r2, r3
 8009b72:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b7e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009b8a:	463b      	mov	r3, r7
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	6a1a      	ldr	r2, [r3, #32]
 8009b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	463b      	mov	r3, r7
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b9c:	1d3b      	adds	r3, r7, #4
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	463b      	mov	r3, r7
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4413      	add	r3, r2
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	f000 819e 	beq.w	8009ef4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bbc:	1d3a      	adds	r2, r7, #4
 8009bbe:	6812      	ldr	r2, [r2, #0]
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	463b      	mov	r3, r7
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d17a      	bne.n	8009cc2 <USB_EPStartXfer+0x24e>
 8009bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bd0:	1d3a      	adds	r2, r7, #4
 8009bd2:	6812      	ldr	r2, [r2, #0]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	1d3b      	adds	r3, r7, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	4619      	mov	r1, r3
 8009be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009bea:	6812      	ldr	r2, [r2, #0]
 8009bec:	440a      	add	r2, r1
 8009bee:	601a      	str	r2, [r3, #0]
 8009bf0:	463b      	mov	r3, r7
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	011a      	lsls	r2, r3, #4
 8009bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4413      	add	r3, r2
 8009c00:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c08:	601a      	str	r2, [r3, #0]
 8009c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d11a      	bne.n	8009c48 <USB_EPStartXfer+0x1d4>
 8009c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	801a      	strh	r2, [r3, #0]
 8009c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	801a      	strh	r2, [r3, #0]
 8009c46:	e062      	b.n	8009d0e <USB_EPStartXfer+0x29a>
 8009c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4c:	2b3e      	cmp	r3, #62	; 0x3e
 8009c4e:	d819      	bhi.n	8009c84 <USB_EPStartXfer+0x210>
 8009c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <USB_EPStartXfer+0x1fc>
 8009c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	029b      	lsls	r3, r3, #10
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	801a      	strh	r2, [r3, #0]
 8009c82:	e044      	b.n	8009d0e <USB_EPStartXfer+0x29a>
 8009c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c88:	095b      	lsrs	r3, r3, #5
 8009c8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c92:	f003 031f 	and.w	r3, r3, #31
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d104      	bne.n	8009ca4 <USB_EPStartXfer+0x230>
 8009c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	029b      	lsls	r3, r3, #10
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	e025      	b.n	8009d0e <USB_EPStartXfer+0x29a>
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	785b      	ldrb	r3, [r3, #1]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d120      	bne.n	8009d0e <USB_EPStartXfer+0x29a>
 8009ccc:	1d3b      	adds	r3, r7, #4
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8009ce0:	6812      	ldr	r2, [r2, #0]
 8009ce2:	440a      	add	r2, r1
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	011a      	lsls	r2, r3, #4
 8009cee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d0e:	463b      	mov	r3, r7
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	895b      	ldrh	r3, [r3, #10]
 8009d14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d18:	463b      	mov	r3, r7
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6959      	ldr	r1, [r3, #20]
 8009d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d28:	1d38      	adds	r0, r7, #4
 8009d2a:	6800      	ldr	r0, [r0, #0]
 8009d2c:	f001 fad7 	bl	800b2de <USB_WritePMA>
            ep->xfer_buff += len;
 8009d30:	463b      	mov	r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	695a      	ldr	r2, [r3, #20]
 8009d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d3a:	441a      	add	r2, r3
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009d42:	463b      	mov	r3, r7
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6a1a      	ldr	r2, [r3, #32]
 8009d48:	463b      	mov	r3, r7
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d909      	bls.n	8009d66 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8009d52:	463b      	mov	r3, r7
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6a1a      	ldr	r2, [r3, #32]
 8009d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d5c:	1ad2      	subs	r2, r2, r3
 8009d5e:	463b      	mov	r3, r7
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	621a      	str	r2, [r3, #32]
 8009d64:	e008      	b.n	8009d78 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d66:	463b      	mov	r3, r7
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009d70:	463b      	mov	r3, r7
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2200      	movs	r2, #0
 8009d76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d78:	463b      	mov	r3, r7
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	785b      	ldrb	r3, [r3, #1]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d17a      	bne.n	8009e78 <USB_EPStartXfer+0x404>
 8009d82:	f107 0318 	add.w	r3, r7, #24
 8009d86:	1d3a      	adds	r2, r7, #4
 8009d88:	6812      	ldr	r2, [r2, #0]
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	1d3b      	adds	r3, r7, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4619      	mov	r1, r3
 8009d98:	f107 0318 	add.w	r3, r7, #24
 8009d9c:	f107 0218 	add.w	r2, r7, #24
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	440a      	add	r2, r1
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	463b      	mov	r3, r7
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	011a      	lsls	r2, r3, #4
 8009dae:	f107 0318 	add.w	r3, r7, #24
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4413      	add	r3, r2
 8009db6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11a      	bne.n	8009dfe <USB_EPStartXfer+0x38a>
 8009dc8:	f107 0314 	add.w	r3, r7, #20
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	f107 0314 	add.w	r3, r7, #20
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	801a      	strh	r2, [r3, #0]
 8009de0:	f107 0314 	add.w	r3, r7, #20
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	f107 0314 	add.w	r3, r7, #20
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	801a      	strh	r2, [r3, #0]
 8009dfc:	e067      	b.n	8009ece <USB_EPStartXfer+0x45a>
 8009dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e02:	2b3e      	cmp	r3, #62	; 0x3e
 8009e04:	d819      	bhi.n	8009e3a <USB_EPStartXfer+0x3c6>
 8009e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e0a:	085b      	lsrs	r3, r3, #1
 8009e0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <USB_EPStartXfer+0x3b2>
 8009e1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009e20:	3301      	adds	r3, #1
 8009e22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009e26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	029b      	lsls	r3, r3, #10
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	801a      	strh	r2, [r3, #0]
 8009e38:	e049      	b.n	8009ece <USB_EPStartXfer+0x45a>
 8009e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e48:	f003 031f 	and.w	r3, r3, #31
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <USB_EPStartXfer+0x3e6>
 8009e50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009e54:	3b01      	subs	r3, #1
 8009e56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009e5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	029b      	lsls	r3, r3, #10
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f107 0314 	add.w	r3, r7, #20
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	801a      	strh	r2, [r3, #0]
 8009e76:	e02a      	b.n	8009ece <USB_EPStartXfer+0x45a>
 8009e78:	463b      	mov	r3, r7
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	785b      	ldrb	r3, [r3, #1]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d125      	bne.n	8009ece <USB_EPStartXfer+0x45a>
 8009e82:	f107 0320 	add.w	r3, r7, #32
 8009e86:	1d3a      	adds	r2, r7, #4
 8009e88:	6812      	ldr	r2, [r2, #0]
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	1d3b      	adds	r3, r7, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	4619      	mov	r1, r3
 8009e98:	f107 0320 	add.w	r3, r7, #32
 8009e9c:	f107 0220 	add.w	r2, r7, #32
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	011a      	lsls	r2, r3, #4
 8009eae:	f107 0320 	add.w	r3, r7, #32
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009eba:	f107 031c 	add.w	r3, r7, #28
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	f107 031c 	add.w	r3, r7, #28
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ece:	463b      	mov	r3, r7
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	891b      	ldrh	r3, [r3, #8]
 8009ed4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ed8:	463b      	mov	r3, r7
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6959      	ldr	r1, [r3, #20]
 8009ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009ee8:	1d38      	adds	r0, r7, #4
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	f001 f9f7 	bl	800b2de <USB_WritePMA>
 8009ef0:	f000 bcc6 	b.w	800a880 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d164      	bne.n	8009fc8 <USB_EPStartXfer+0x554>
 8009efe:	1d3b      	adds	r3, r7, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f04:	1d3b      	adds	r3, r7, #4
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f12:	4413      	add	r3, r2
 8009f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f16:	463b      	mov	r3, r7
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	011a      	lsls	r2, r3, #4
 8009f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f20:	4413      	add	r3, r2
 8009f22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f26:	647b      	str	r3, [r7, #68]	; 0x44
 8009f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d112      	bne.n	8009f56 <USB_EPStartXfer+0x4e2>
 8009f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f3e:	801a      	strh	r2, [r3, #0]
 8009f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f52:	801a      	strh	r2, [r3, #0]
 8009f54:	e057      	b.n	800a006 <USB_EPStartXfer+0x592>
 8009f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8009f5c:	d817      	bhi.n	8009f8e <USB_EPStartXfer+0x51a>
 8009f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <USB_EPStartXfer+0x50a>
 8009f74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f78:	3301      	adds	r3, #1
 8009f7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009f7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	029b      	lsls	r3, r3, #10
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f8a:	801a      	strh	r2, [r3, #0]
 8009f8c:	e03b      	b.n	800a006 <USB_EPStartXfer+0x592>
 8009f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f92:	095b      	lsrs	r3, r3, #5
 8009f94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f9c:	f003 031f 	and.w	r3, r3, #31
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d104      	bne.n	8009fae <USB_EPStartXfer+0x53a>
 8009fa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	029b      	lsls	r3, r3, #10
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fc4:	801a      	strh	r2, [r3, #0]
 8009fc6:	e01e      	b.n	800a006 <USB_EPStartXfer+0x592>
 8009fc8:	463b      	mov	r3, r7
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	785b      	ldrb	r3, [r3, #1]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d119      	bne.n	800a006 <USB_EPStartXfer+0x592>
 8009fd2:	1d3b      	adds	r3, r7, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8009fd8:	1d3b      	adds	r3, r7, #4
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe6:	4413      	add	r3, r2
 8009fe8:	653b      	str	r3, [r7, #80]	; 0x50
 8009fea:	463b      	mov	r3, r7
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	011a      	lsls	r2, r3, #4
 8009ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a000:	b29a      	uxth	r2, r3
 800a002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a006:	463b      	mov	r3, r7
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	891b      	ldrh	r3, [r3, #8]
 800a00c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a010:	463b      	mov	r3, r7
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6959      	ldr	r1, [r3, #20]
 800a016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a020:	1d38      	adds	r0, r7, #4
 800a022:	6800      	ldr	r0, [r0, #0]
 800a024:	f001 f95b 	bl	800b2de <USB_WritePMA>
            ep->xfer_buff += len;
 800a028:	463b      	mov	r3, r7
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695a      	ldr	r2, [r3, #20]
 800a02e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a032:	441a      	add	r2, r3
 800a034:	463b      	mov	r3, r7
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a03a:	463b      	mov	r3, r7
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6a1a      	ldr	r2, [r3, #32]
 800a040:	463b      	mov	r3, r7
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	429a      	cmp	r2, r3
 800a048:	d909      	bls.n	800a05e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800a04a:	463b      	mov	r3, r7
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6a1a      	ldr	r2, [r3, #32]
 800a050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a054:	1ad2      	subs	r2, r2, r3
 800a056:	463b      	mov	r3, r7
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	621a      	str	r2, [r3, #32]
 800a05c:	e008      	b.n	800a070 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800a05e:	463b      	mov	r3, r7
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a068:	463b      	mov	r3, r7
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2200      	movs	r2, #0
 800a06e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a070:	1d3b      	adds	r3, r7, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	643b      	str	r3, [r7, #64]	; 0x40
 800a076:	463b      	mov	r3, r7
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d164      	bne.n	800a14a <USB_EPStartXfer+0x6d6>
 800a080:	1d3b      	adds	r3, r7, #4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	63bb      	str	r3, [r7, #56]	; 0x38
 800a086:	1d3b      	adds	r3, r7, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a08e:	b29b      	uxth	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	4413      	add	r3, r2
 800a096:	63bb      	str	r3, [r7, #56]	; 0x38
 800a098:	463b      	mov	r3, r7
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	011a      	lsls	r2, r3, #4
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d112      	bne.n	800a0d8 <USB_EPStartXfer+0x664>
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c0:	801a      	strh	r2, [r3, #0]
 800a0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d4:	801a      	strh	r2, [r3, #0]
 800a0d6:	e054      	b.n	800a182 <USB_EPStartXfer+0x70e>
 800a0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0dc:	2b3e      	cmp	r3, #62	; 0x3e
 800a0de:	d817      	bhi.n	800a110 <USB_EPStartXfer+0x69c>
 800a0e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0e4:	085b      	lsrs	r3, r3, #1
 800a0e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a0ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d004      	beq.n	800a100 <USB_EPStartXfer+0x68c>
 800a0f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a104:	b29b      	uxth	r3, r3
 800a106:	029b      	lsls	r3, r3, #10
 800a108:	b29a      	uxth	r2, r3
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	e038      	b.n	800a182 <USB_EPStartXfer+0x70e>
 800a110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a11a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a11e:	f003 031f 	and.w	r3, r3, #31
 800a122:	2b00      	cmp	r3, #0
 800a124:	d104      	bne.n	800a130 <USB_EPStartXfer+0x6bc>
 800a126:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a12a:	3b01      	subs	r3, #1
 800a12c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a134:	b29b      	uxth	r3, r3
 800a136:	029b      	lsls	r3, r3, #10
 800a138:	b29b      	uxth	r3, r3
 800a13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a142:	b29a      	uxth	r2, r3
 800a144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a146:	801a      	strh	r2, [r3, #0]
 800a148:	e01b      	b.n	800a182 <USB_EPStartXfer+0x70e>
 800a14a:	463b      	mov	r3, r7
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d116      	bne.n	800a182 <USB_EPStartXfer+0x70e>
 800a154:	1d3b      	adds	r3, r7, #4
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a162:	4413      	add	r3, r2
 800a164:	643b      	str	r3, [r7, #64]	; 0x40
 800a166:	463b      	mov	r3, r7
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	011a      	lsls	r2, r3, #4
 800a16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a170:	4413      	add	r3, r2
 800a172:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a180:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a182:	463b      	mov	r3, r7
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	895b      	ldrh	r3, [r3, #10]
 800a188:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a18c:	463b      	mov	r3, r7
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6959      	ldr	r1, [r3, #20]
 800a192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a196:	b29b      	uxth	r3, r3
 800a198:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a19c:	1d38      	adds	r0, r7, #4
 800a19e:	6800      	ldr	r0, [r0, #0]
 800a1a0:	f001 f89d 	bl	800b2de <USB_WritePMA>
 800a1a4:	e36c      	b.n	800a880 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a1a6:	463b      	mov	r3, r7
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a1ce:	1d3b      	adds	r3, r7, #4
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	441a      	add	r2, r3
 800a1dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1f4:	1d3b      	adds	r3, r7, #4
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a208:	4413      	add	r3, r2
 800a20a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a20c:	463b      	mov	r3, r7
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	011a      	lsls	r2, r3, #4
 800a214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a216:	4413      	add	r3, r2
 800a218:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a21c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a21e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a222:	b29a      	uxth	r2, r3
 800a224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a226:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a228:	463b      	mov	r3, r7
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	891b      	ldrh	r3, [r3, #8]
 800a22e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a232:	463b      	mov	r3, r7
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6959      	ldr	r1, [r3, #20]
 800a238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a242:	1d38      	adds	r0, r7, #4
 800a244:	6800      	ldr	r0, [r0, #0]
 800a246:	f001 f84a 	bl	800b2de <USB_WritePMA>
 800a24a:	e319      	b.n	800a880 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800a24c:	1d3b      	adds	r3, r7, #4
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	463b      	mov	r3, r7
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a266:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800a26a:	1d3b      	adds	r3, r7, #4
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	463b      	mov	r3, r7
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	441a      	add	r2, r3
 800a278:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a284:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a290:	463b      	mov	r3, r7
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6a1a      	ldr	r2, [r3, #32]
 800a296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29a:	1ad2      	subs	r2, r2, r3
 800a29c:	463b      	mov	r3, r7
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2a2:	1d3b      	adds	r3, r7, #4
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 8162 	beq.w	800a582 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a2be:	1d3b      	adds	r3, r7, #4
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2c6:	463b      	mov	r3, r7
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	785b      	ldrb	r3, [r3, #1]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d164      	bne.n	800a39a <USB_EPStartXfer+0x926>
 800a2d0:	1d3b      	adds	r3, r7, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2d6:	1d3b      	adds	r3, r7, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2e4:	4413      	add	r3, r2
 800a2e6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2e8:	463b      	mov	r3, r7
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	011a      	lsls	r2, r3, #4
 800a2f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2f8:	677b      	str	r3, [r7, #116]	; 0x74
 800a2fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d112      	bne.n	800a328 <USB_EPStartXfer+0x8b4>
 800a302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	b29b      	uxth	r3, r3
 800a308:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a31c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a320:	b29a      	uxth	r2, r3
 800a322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a324:	801a      	strh	r2, [r3, #0]
 800a326:	e057      	b.n	800a3d8 <USB_EPStartXfer+0x964>
 800a328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a32c:	2b3e      	cmp	r3, #62	; 0x3e
 800a32e:	d817      	bhi.n	800a360 <USB_EPStartXfer+0x8ec>
 800a330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a33a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d004      	beq.n	800a350 <USB_EPStartXfer+0x8dc>
 800a346:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a34a:	3301      	adds	r3, #1
 800a34c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a350:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a354:	b29b      	uxth	r3, r3
 800a356:	029b      	lsls	r3, r3, #10
 800a358:	b29a      	uxth	r2, r3
 800a35a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a35c:	801a      	strh	r2, [r3, #0]
 800a35e:	e03b      	b.n	800a3d8 <USB_EPStartXfer+0x964>
 800a360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a364:	095b      	lsrs	r3, r3, #5
 800a366:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a36a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a36e:	f003 031f 	and.w	r3, r3, #31
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <USB_EPStartXfer+0x90c>
 800a376:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a37a:	3b01      	subs	r3, #1
 800a37c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a380:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a384:	b29b      	uxth	r3, r3
 800a386:	029b      	lsls	r3, r3, #10
 800a388:	b29b      	uxth	r3, r3
 800a38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a392:	b29a      	uxth	r2, r3
 800a394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a396:	801a      	strh	r2, [r3, #0]
 800a398:	e01e      	b.n	800a3d8 <USB_EPStartXfer+0x964>
 800a39a:	463b      	mov	r3, r7
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d119      	bne.n	800a3d8 <USB_EPStartXfer+0x964>
 800a3a4:	1d3b      	adds	r3, r7, #4
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3ba:	463b      	mov	r3, r7
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	011a      	lsls	r2, r3, #4
 800a3c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a3cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a3d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a3d8:	463b      	mov	r3, r7
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	895b      	ldrh	r3, [r3, #10]
 800a3de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6959      	ldr	r1, [r3, #20]
 800a3e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a3f2:	1d38      	adds	r0, r7, #4
 800a3f4:	6800      	ldr	r0, [r0, #0]
 800a3f6:	f000 ff72 	bl	800b2de <USB_WritePMA>
          ep->xfer_buff += len;
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	695a      	ldr	r2, [r3, #20]
 800a400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a404:	441a      	add	r2, r3
 800a406:	463b      	mov	r3, r7
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a40c:	463b      	mov	r3, r7
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6a1a      	ldr	r2, [r3, #32]
 800a412:	463b      	mov	r3, r7
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d909      	bls.n	800a430 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800a41c:	463b      	mov	r3, r7
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6a1a      	ldr	r2, [r3, #32]
 800a422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a426:	1ad2      	subs	r2, r2, r3
 800a428:	463b      	mov	r3, r7
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	621a      	str	r2, [r3, #32]
 800a42e:	e008      	b.n	800a442 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800a430:	463b      	mov	r3, r7
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a43a:	463b      	mov	r3, r7
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2200      	movs	r2, #0
 800a440:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 821a 	beq.w	800a880 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a44c:	463b      	mov	r3, r7
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	785b      	ldrb	r3, [r3, #1]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d164      	bne.n	800a520 <USB_EPStartXfer+0xaac>
 800a456:	1d3b      	adds	r3, r7, #4
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a45c:	1d3b      	adds	r3, r7, #4
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a464:	b29b      	uxth	r3, r3
 800a466:	461a      	mov	r2, r3
 800a468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a46a:	4413      	add	r3, r2
 800a46c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a46e:	463b      	mov	r3, r7
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	011a      	lsls	r2, r3, #4
 800a476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a478:	4413      	add	r3, r2
 800a47a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a47e:	667b      	str	r3, [r7, #100]	; 0x64
 800a480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d112      	bne.n	800a4ae <USB_EPStartXfer+0xa3a>
 800a488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a492:	b29a      	uxth	r2, r3
 800a494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a496:	801a      	strh	r2, [r3, #0]
 800a498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4aa:	801a      	strh	r2, [r3, #0]
 800a4ac:	e057      	b.n	800a55e <USB_EPStartXfer+0xaea>
 800a4ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4b2:	2b3e      	cmp	r3, #62	; 0x3e
 800a4b4:	d817      	bhi.n	800a4e6 <USB_EPStartXfer+0xa72>
 800a4b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ba:	085b      	lsrs	r3, r3, #1
 800a4bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a4c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <USB_EPStartXfer+0xa62>
 800a4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a4d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	029b      	lsls	r3, r3, #10
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4e2:	801a      	strh	r2, [r3, #0]
 800a4e4:	e03b      	b.n	800a55e <USB_EPStartXfer+0xaea>
 800a4e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ea:	095b      	lsrs	r3, r3, #5
 800a4ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a4f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4f4:	f003 031f 	and.w	r3, r3, #31
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d104      	bne.n	800a506 <USB_EPStartXfer+0xa92>
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a500:	3b01      	subs	r3, #1
 800a502:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	029b      	lsls	r3, r3, #10
 800a50e:	b29b      	uxth	r3, r3
 800a510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a518:	b29a      	uxth	r2, r3
 800a51a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a51c:	801a      	strh	r2, [r3, #0]
 800a51e:	e01e      	b.n	800a55e <USB_EPStartXfer+0xaea>
 800a520:	463b      	mov	r3, r7
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d119      	bne.n	800a55e <USB_EPStartXfer+0xaea>
 800a52a:	1d3b      	adds	r3, r7, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	673b      	str	r3, [r7, #112]	; 0x70
 800a530:	1d3b      	adds	r3, r7, #4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a53e:	4413      	add	r3, r2
 800a540:	673b      	str	r3, [r7, #112]	; 0x70
 800a542:	463b      	mov	r3, r7
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	011a      	lsls	r2, r3, #4
 800a54a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a54c:	4413      	add	r3, r2
 800a54e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a552:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a558:	b29a      	uxth	r2, r3
 800a55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a55e:	463b      	mov	r3, r7
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	891b      	ldrh	r3, [r3, #8]
 800a564:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a568:	463b      	mov	r3, r7
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6959      	ldr	r1, [r3, #20]
 800a56e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a572:	b29b      	uxth	r3, r3
 800a574:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a578:	1d38      	adds	r0, r7, #4
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	f000 feaf 	bl	800b2de <USB_WritePMA>
 800a580:	e17e      	b.n	800a880 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a582:	463b      	mov	r3, r7
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d16f      	bne.n	800a66c <USB_EPStartXfer+0xbf8>
 800a58c:	1d3b      	adds	r3, r7, #4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a594:	1d3b      	adds	r3, r7, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5a4:	4413      	add	r3, r2
 800a5a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	011a      	lsls	r2, r3, #4
 800a5b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d116      	bne.n	800a5f6 <USB_EPStartXfer+0xb82>
 800a5c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5da:	801a      	strh	r2, [r3, #0]
 800a5dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5f2:	801a      	strh	r2, [r3, #0]
 800a5f4:	e05f      	b.n	800a6b6 <USB_EPStartXfer+0xc42>
 800a5f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a5fc:	d818      	bhi.n	800a630 <USB_EPStartXfer+0xbbc>
 800a5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a602:	085b      	lsrs	r3, r3, #1
 800a604:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <USB_EPStartXfer+0xbaa>
 800a614:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a618:	3301      	adds	r3, #1
 800a61a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a61e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a622:	b29b      	uxth	r3, r3
 800a624:	029b      	lsls	r3, r3, #10
 800a626:	b29a      	uxth	r2, r3
 800a628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a62c:	801a      	strh	r2, [r3, #0]
 800a62e:	e042      	b.n	800a6b6 <USB_EPStartXfer+0xc42>
 800a630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a634:	095b      	lsrs	r3, r3, #5
 800a636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a63a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a63e:	f003 031f 	and.w	r3, r3, #31
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <USB_EPStartXfer+0xbdc>
 800a646:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a64a:	3b01      	subs	r3, #1
 800a64c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a650:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a654:	b29b      	uxth	r3, r3
 800a656:	029b      	lsls	r3, r3, #10
 800a658:	b29b      	uxth	r3, r3
 800a65a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a65e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a662:	b29a      	uxth	r2, r3
 800a664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a668:	801a      	strh	r2, [r3, #0]
 800a66a:	e024      	b.n	800a6b6 <USB_EPStartXfer+0xc42>
 800a66c:	463b      	mov	r3, r7
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d11f      	bne.n	800a6b6 <USB_EPStartXfer+0xc42>
 800a676:	1d3b      	adds	r3, r7, #4
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a67e:	1d3b      	adds	r3, r7, #4
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a686:	b29b      	uxth	r3, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a68e:	4413      	add	r3, r2
 800a690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a694:	463b      	mov	r3, r7
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	011a      	lsls	r2, r3, #4
 800a69c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a6a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a6aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a6b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a6b6:	463b      	mov	r3, r7
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	891b      	ldrh	r3, [r3, #8]
 800a6bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6959      	ldr	r1, [r3, #20]
 800a6c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a6d0:	1d38      	adds	r0, r7, #4
 800a6d2:	6800      	ldr	r0, [r0, #0]
 800a6d4:	f000 fe03 	bl	800b2de <USB_WritePMA>
          ep->xfer_buff += len;
 800a6d8:	463b      	mov	r3, r7
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	695a      	ldr	r2, [r3, #20]
 800a6de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6e2:	441a      	add	r2, r3
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6a1a      	ldr	r2, [r3, #32]
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d909      	bls.n	800a70e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800a6fa:	463b      	mov	r3, r7
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6a1a      	ldr	r2, [r3, #32]
 800a700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a704:	1ad2      	subs	r2, r2, r3
 800a706:	463b      	mov	r3, r7
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	621a      	str	r2, [r3, #32]
 800a70c:	e008      	b.n	800a720 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800a70e:	463b      	mov	r3, r7
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a718:	463b      	mov	r3, r7
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2200      	movs	r2, #0
 800a71e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 80ab 	beq.w	800a880 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a72a:	1d3b      	adds	r3, r7, #4
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a732:	463b      	mov	r3, r7
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	785b      	ldrb	r3, [r3, #1]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d16f      	bne.n	800a81c <USB_EPStartXfer+0xda8>
 800a73c:	1d3b      	adds	r3, r7, #4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a744:	1d3b      	adds	r3, r7, #4
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	461a      	mov	r2, r3
 800a750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a754:	4413      	add	r3, r2
 800a756:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a75a:	463b      	mov	r3, r7
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	011a      	lsls	r2, r3, #4
 800a762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a766:	4413      	add	r3, r2
 800a768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a76c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d116      	bne.n	800a7a6 <USB_EPStartXfer+0xd32>
 800a778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a77c:	881b      	ldrh	r3, [r3, #0]
 800a77e:	b29b      	uxth	r3, r3
 800a780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a784:	b29a      	uxth	r2, r3
 800a786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7a2:	801a      	strh	r2, [r3, #0]
 800a7a4:	e05b      	b.n	800a85e <USB_EPStartXfer+0xdea>
 800a7a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7aa:	2b3e      	cmp	r3, #62	; 0x3e
 800a7ac:	d818      	bhi.n	800a7e0 <USB_EPStartXfer+0xd6c>
 800a7ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a7b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d004      	beq.n	800a7ce <USB_EPStartXfer+0xd5a>
 800a7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a7ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	029b      	lsls	r3, r3, #10
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	e03e      	b.n	800a85e <USB_EPStartXfer+0xdea>
 800a7e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7e4:	095b      	lsrs	r3, r3, #5
 800a7e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a7ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ee:	f003 031f 	and.w	r3, r3, #31
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d104      	bne.n	800a800 <USB_EPStartXfer+0xd8c>
 800a7f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a804:	b29b      	uxth	r3, r3
 800a806:	029b      	lsls	r3, r3, #10
 800a808:	b29b      	uxth	r3, r3
 800a80a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a80e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a812:	b29a      	uxth	r2, r3
 800a814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a818:	801a      	strh	r2, [r3, #0]
 800a81a:	e020      	b.n	800a85e <USB_EPStartXfer+0xdea>
 800a81c:	463b      	mov	r3, r7
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	785b      	ldrb	r3, [r3, #1]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d11b      	bne.n	800a85e <USB_EPStartXfer+0xdea>
 800a826:	1d3b      	adds	r3, r7, #4
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a82e:	b29b      	uxth	r3, r3
 800a830:	461a      	mov	r2, r3
 800a832:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a836:	4413      	add	r3, r2
 800a838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a83c:	463b      	mov	r3, r7
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	011a      	lsls	r2, r3, #4
 800a844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a848:	4413      	add	r3, r2
 800a84a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a84e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a856:	b29a      	uxth	r2, r3
 800a858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a85c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a85e:	463b      	mov	r3, r7
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	895b      	ldrh	r3, [r3, #10]
 800a864:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a868:	463b      	mov	r3, r7
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6959      	ldr	r1, [r3, #20]
 800a86e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a872:	b29b      	uxth	r3, r3
 800a874:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a878:	1d38      	adds	r0, r7, #4
 800a87a:	6800      	ldr	r0, [r0, #0]
 800a87c:	f000 fd2f 	bl	800b2de <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a880:	1d3b      	adds	r3, r7, #4
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	463b      	mov	r3, r7
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	881b      	ldrh	r3, [r3, #0]
 800a890:	b29b      	uxth	r3, r3
 800a892:	f107 020a 	add.w	r2, r7, #10
 800a896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a89a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a89e:	8013      	strh	r3, [r2, #0]
 800a8a0:	f107 030a 	add.w	r3, r7, #10
 800a8a4:	f107 020a 	add.w	r2, r7, #10
 800a8a8:	8812      	ldrh	r2, [r2, #0]
 800a8aa:	f082 0210 	eor.w	r2, r2, #16
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	f107 030a 	add.w	r3, r7, #10
 800a8b4:	f107 020a 	add.w	r2, r7, #10
 800a8b8:	8812      	ldrh	r2, [r2, #0]
 800a8ba:	f082 0220 	eor.w	r2, r2, #32
 800a8be:	801a      	strh	r2, [r3, #0]
 800a8c0:	1d3b      	adds	r3, r7, #4
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	f107 030a 	add.w	r3, r7, #10
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	8013      	strh	r3, [r2, #0]
 800a8e8:	e3b5      	b.n	800b056 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a8ea:	463b      	mov	r3, r7
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	7b1b      	ldrb	r3, [r3, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f040 8090 	bne.w	800aa16 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	699a      	ldr	r2, [r3, #24]
 800a8fc:	463b      	mov	r3, r7
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	429a      	cmp	r2, r3
 800a904:	d90e      	bls.n	800a924 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800a906:	463b      	mov	r3, r7
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a910:	463b      	mov	r3, r7
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	463b      	mov	r3, r7
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	619a      	str	r2, [r3, #24]
 800a922:	e008      	b.n	800a936 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800a924:	463b      	mov	r3, r7
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a92e:	463b      	mov	r3, r7
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2200      	movs	r2, #0
 800a934:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a936:	1d3b      	adds	r3, r7, #4
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a93e:	1d3b      	adds	r3, r7, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a946:	b29b      	uxth	r3, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a94e:	4413      	add	r3, r2
 800a950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a954:	463b      	mov	r3, r7
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	011a      	lsls	r2, r3, #4
 800a95c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a960:	4413      	add	r3, r2
 800a962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a96a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d116      	bne.n	800a9a0 <USB_EPStartXfer+0xf2c>
 800a972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a97e:	b29a      	uxth	r2, r3
 800a980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a984:	801a      	strh	r2, [r3, #0]
 800a986:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a996:	b29a      	uxth	r2, r3
 800a998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a99c:	801a      	strh	r2, [r3, #0]
 800a99e:	e32c      	b.n	800affa <USB_EPStartXfer+0x1586>
 800a9a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9a4:	2b3e      	cmp	r3, #62	; 0x3e
 800a9a6:	d818      	bhi.n	800a9da <USB_EPStartXfer+0xf66>
 800a9a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9ac:	085b      	lsrs	r3, r3, #1
 800a9ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a9b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <USB_EPStartXfer+0xf54>
 800a9be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a9c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	029b      	lsls	r3, r3, #10
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9d6:	801a      	strh	r2, [r3, #0]
 800a9d8:	e30f      	b.n	800affa <USB_EPStartXfer+0x1586>
 800a9da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9de:	095b      	lsrs	r3, r3, #5
 800a9e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9e8:	f003 031f 	and.w	r3, r3, #31
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <USB_EPStartXfer+0xf86>
 800a9f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a9fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	029b      	lsls	r3, r3, #10
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	e2f1      	b.n	800affa <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800aa16:	463b      	mov	r3, r7
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	78db      	ldrb	r3, [r3, #3]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	f040 818f 	bne.w	800ad40 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aa22:	463b      	mov	r3, r7
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	785b      	ldrb	r3, [r3, #1]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d175      	bne.n	800ab18 <USB_EPStartXfer+0x10a4>
 800aa2c:	1d3b      	adds	r3, r7, #4
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa34:	1d3b      	adds	r3, r7, #4
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa44:	4413      	add	r3, r2
 800aa46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	011a      	lsls	r2, r3, #4
 800aa52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aa56:	4413      	add	r3, r2
 800aa58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa60:	463b      	mov	r3, r7
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d116      	bne.n	800aa98 <USB_EPStartXfer+0x1024>
 800aa6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e065      	b.n	800ab64 <USB_EPStartXfer+0x10f0>
 800aa98:	463b      	mov	r3, r7
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b3e      	cmp	r3, #62	; 0x3e
 800aaa0:	d81a      	bhi.n	800aad8 <USB_EPStartXfer+0x1064>
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	085b      	lsrs	r3, r3, #1
 800aaaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aaae:	463b      	mov	r3, r7
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <USB_EPStartXfer+0x1052>
 800aabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac0:	3301      	adds	r3, #1
 800aac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	029b      	lsls	r3, r3, #10
 800aace:	b29a      	uxth	r2, r3
 800aad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	e045      	b.n	800ab64 <USB_EPStartXfer+0x10f0>
 800aad8:	463b      	mov	r3, r7
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	095b      	lsrs	r3, r3, #5
 800aae0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aae4:	463b      	mov	r3, r7
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f003 031f 	and.w	r3, r3, #31
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d104      	bne.n	800aafc <USB_EPStartXfer+0x1088>
 800aaf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	029b      	lsls	r3, r3, #10
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab14:	801a      	strh	r2, [r3, #0]
 800ab16:	e025      	b.n	800ab64 <USB_EPStartXfer+0x10f0>
 800ab18:	463b      	mov	r3, r7
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	785b      	ldrb	r3, [r3, #1]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d120      	bne.n	800ab64 <USB_EPStartXfer+0x10f0>
 800ab22:	1d3b      	adds	r3, r7, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ab2a:	1d3b      	adds	r3, r7, #4
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	461a      	mov	r2, r3
 800ab36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ab40:	463b      	mov	r3, r7
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	011a      	lsls	r2, r3, #4
 800ab48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab56:	463b      	mov	r3, r7
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab62:	801a      	strh	r2, [r3, #0]
 800ab64:	1d3b      	adds	r3, r7, #4
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab6c:	463b      	mov	r3, r7
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	785b      	ldrb	r3, [r3, #1]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d175      	bne.n	800ac62 <USB_EPStartXfer+0x11ee>
 800ab76:	1d3b      	adds	r3, r7, #4
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ab7e:	1d3b      	adds	r3, r7, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	461a      	mov	r2, r3
 800ab8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab8e:	4413      	add	r3, r2
 800ab90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ab94:	463b      	mov	r3, r7
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	011a      	lsls	r2, r3, #4
 800ab9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aba0:	4413      	add	r3, r2
 800aba2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aba6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abaa:	463b      	mov	r3, r7
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d116      	bne.n	800abe2 <USB_EPStartXfer+0x116e>
 800abb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abc6:	801a      	strh	r2, [r3, #0]
 800abc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abd8:	b29a      	uxth	r2, r3
 800abda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abde:	801a      	strh	r2, [r3, #0]
 800abe0:	e061      	b.n	800aca6 <USB_EPStartXfer+0x1232>
 800abe2:	463b      	mov	r3, r7
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b3e      	cmp	r3, #62	; 0x3e
 800abea:	d81a      	bhi.n	800ac22 <USB_EPStartXfer+0x11ae>
 800abec:	463b      	mov	r3, r7
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	085b      	lsrs	r3, r3, #1
 800abf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800abf8:	463b      	mov	r3, r7
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <USB_EPStartXfer+0x119c>
 800ac06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	029b      	lsls	r3, r3, #10
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	e041      	b.n	800aca6 <USB_EPStartXfer+0x1232>
 800ac22:	463b      	mov	r3, r7
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	095b      	lsrs	r3, r3, #5
 800ac2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac2e:	463b      	mov	r3, r7
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	f003 031f 	and.w	r3, r3, #31
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <USB_EPStartXfer+0x11d2>
 800ac3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ac40:	3b01      	subs	r3, #1
 800ac42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	029b      	lsls	r3, r3, #10
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac5e:	801a      	strh	r2, [r3, #0]
 800ac60:	e021      	b.n	800aca6 <USB_EPStartXfer+0x1232>
 800ac62:	463b      	mov	r3, r7
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d11c      	bne.n	800aca6 <USB_EPStartXfer+0x1232>
 800ac6c:	1d3b      	adds	r3, r7, #4
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	461a      	mov	r2, r3
 800ac78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac82:	463b      	mov	r3, r7
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	011a      	lsls	r2, r3, #4
 800ac8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ac8e:	4413      	add	r3, r2
 800ac90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ac94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac98:	463b      	mov	r3, r7
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aca4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aca6:	463b      	mov	r3, r7
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 81a4 	beq.w	800affa <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800acb2:	1d3b      	adds	r3, r7, #4
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	463b      	mov	r3, r7
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800acc6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800acca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d005      	beq.n	800acde <USB_EPStartXfer+0x126a>
 800acd2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800acd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10d      	bne.n	800acfa <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800acde:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800ace2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f040 8187 	bne.w	800affa <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800acec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800acf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f040 8180 	bne.w	800affa <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800acfa:	1d3b      	adds	r3, r7, #4
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	463b      	mov	r3, r7
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad14:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800ad18:	1d3b      	adds	r3, r7, #4
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	463b      	mov	r3, r7
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	441a      	add	r2, r3
 800ad26:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800ad2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	8013      	strh	r3, [r2, #0]
 800ad3e:	e15c      	b.n	800affa <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ad40:	463b      	mov	r3, r7
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	78db      	ldrb	r3, [r3, #3]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	f040 8155 	bne.w	800aff6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	699a      	ldr	r2, [r3, #24]
 800ad52:	463b      	mov	r3, r7
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d90e      	bls.n	800ad7a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800ad5c:	463b      	mov	r3, r7
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800ad66:	463b      	mov	r3, r7
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	699a      	ldr	r2, [r3, #24]
 800ad6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad70:	1ad2      	subs	r2, r2, r3
 800ad72:	463b      	mov	r3, r7
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	619a      	str	r2, [r3, #24]
 800ad78:	e008      	b.n	800ad8c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800ad7a:	463b      	mov	r3, r7
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800ad84:	463b      	mov	r3, r7
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	785b      	ldrb	r3, [r3, #1]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d16f      	bne.n	800ae76 <USB_EPStartXfer+0x1402>
 800ad96:	1d3b      	adds	r3, r7, #4
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad9e:	1d3b      	adds	r3, r7, #4
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adae:	4413      	add	r3, r2
 800adb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800adb4:	463b      	mov	r3, r7
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	011a      	lsls	r2, r3, #4
 800adbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800adc0:	4413      	add	r3, r2
 800adc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adce:	2b00      	cmp	r3, #0
 800add0:	d116      	bne.n	800ae00 <USB_EPStartXfer+0x138c>
 800add2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	b29b      	uxth	r3, r3
 800adda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adde:	b29a      	uxth	r2, r3
 800ade0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ade4:	801a      	strh	r2, [r3, #0]
 800ade6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adfc:	801a      	strh	r2, [r3, #0]
 800adfe:	e05f      	b.n	800aec0 <USB_EPStartXfer+0x144c>
 800ae00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae04:	2b3e      	cmp	r3, #62	; 0x3e
 800ae06:	d818      	bhi.n	800ae3a <USB_EPStartXfer+0x13c6>
 800ae08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae0c:	085b      	lsrs	r3, r3, #1
 800ae0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <USB_EPStartXfer+0x13b4>
 800ae1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae22:	3301      	adds	r3, #1
 800ae24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	029b      	lsls	r3, r3, #10
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae36:	801a      	strh	r2, [r3, #0]
 800ae38:	e042      	b.n	800aec0 <USB_EPStartXfer+0x144c>
 800ae3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae3e:	095b      	lsrs	r3, r3, #5
 800ae40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae48:	f003 031f 	and.w	r3, r3, #31
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d104      	bne.n	800ae5a <USB_EPStartXfer+0x13e6>
 800ae50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae54:	3b01      	subs	r3, #1
 800ae56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ae5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	029b      	lsls	r3, r3, #10
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae6c:	b29a      	uxth	r2, r3
 800ae6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae72:	801a      	strh	r2, [r3, #0]
 800ae74:	e024      	b.n	800aec0 <USB_EPStartXfer+0x144c>
 800ae76:	463b      	mov	r3, r7
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d11f      	bne.n	800aec0 <USB_EPStartXfer+0x144c>
 800ae80:	1d3b      	adds	r3, r7, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae88:	1d3b      	adds	r3, r7, #4
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	461a      	mov	r2, r3
 800ae94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae98:	4413      	add	r3, r2
 800ae9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae9e:	463b      	mov	r3, r7
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	011a      	lsls	r2, r3, #4
 800aea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aeaa:	4413      	add	r3, r2
 800aeac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aeb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aeb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aebe:	801a      	strh	r2, [r3, #0]
 800aec0:	1d3b      	adds	r3, r7, #4
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aec8:	463b      	mov	r3, r7
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d16f      	bne.n	800afb2 <USB_EPStartXfer+0x153e>
 800aed2:	1d3b      	adds	r3, r7, #4
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aeda:	1d3b      	adds	r3, r7, #4
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeea:	4413      	add	r3, r2
 800aeec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aef0:	463b      	mov	r3, r7
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	011a      	lsls	r2, r3, #4
 800aef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aefc:	4413      	add	r3, r2
 800aefe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d116      	bne.n	800af3c <USB_EPStartXfer+0x14c8>
 800af0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	b29b      	uxth	r3, r3
 800af16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af20:	801a      	strh	r2, [r3, #0]
 800af22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af32:	b29a      	uxth	r2, r3
 800af34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af38:	801a      	strh	r2, [r3, #0]
 800af3a:	e05e      	b.n	800affa <USB_EPStartXfer+0x1586>
 800af3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af40:	2b3e      	cmp	r3, #62	; 0x3e
 800af42:	d818      	bhi.n	800af76 <USB_EPStartXfer+0x1502>
 800af44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af48:	085b      	lsrs	r3, r3, #1
 800af4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af52:	f003 0301 	and.w	r3, r3, #1
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <USB_EPStartXfer+0x14f0>
 800af5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af5e:	3301      	adds	r3, #1
 800af60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af68:	b29b      	uxth	r3, r3
 800af6a:	029b      	lsls	r3, r3, #10
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af72:	801a      	strh	r2, [r3, #0]
 800af74:	e041      	b.n	800affa <USB_EPStartXfer+0x1586>
 800af76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af7a:	095b      	lsrs	r3, r3, #5
 800af7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af84:	f003 031f 	and.w	r3, r3, #31
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <USB_EPStartXfer+0x1522>
 800af8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af90:	3b01      	subs	r3, #1
 800af92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	029b      	lsls	r3, r3, #10
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afae:	801a      	strh	r2, [r3, #0]
 800afb0:	e023      	b.n	800affa <USB_EPStartXfer+0x1586>
 800afb2:	463b      	mov	r3, r7
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d11e      	bne.n	800affa <USB_EPStartXfer+0x1586>
 800afbc:	1d3b      	adds	r3, r7, #4
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afcc:	4413      	add	r3, r2
 800afce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afd2:	463b      	mov	r3, r7
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	011a      	lsls	r2, r3, #4
 800afda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afde:	4413      	add	r3, r2
 800afe0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800afe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afec:	b29a      	uxth	r2, r3
 800afee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff2:	801a      	strh	r2, [r3, #0]
 800aff4:	e001      	b.n	800affa <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e02e      	b.n	800b058 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800affa:	1d3b      	adds	r3, r7, #4
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	463b      	mov	r3, r7
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	4413      	add	r3, r2
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b014:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b018:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b01c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b020:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b024:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b028:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b02c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b030:	1d3b      	adds	r3, r7, #4
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	463b      	mov	r3, r7
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	441a      	add	r2, r3
 800b03e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b04a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b04e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b052:	b29b      	uxth	r3, r3
 800b054:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b062:	b480      	push	{r7}
 800b064:	b085      	sub	sp, #20
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	785b      	ldrb	r3, [r3, #1]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d020      	beq.n	800b0b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	b29b      	uxth	r3, r3
 800b082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08a:	81bb      	strh	r3, [r7, #12]
 800b08c:	89bb      	ldrh	r3, [r7, #12]
 800b08e:	f083 0310 	eor.w	r3, r3, #16
 800b092:	81bb      	strh	r3, [r7, #12]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	441a      	add	r2, r3
 800b09e:	89bb      	ldrh	r3, [r7, #12]
 800b0a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	8013      	strh	r3, [r2, #0]
 800b0b4:	e01f      	b.n	800b0f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0cc:	81fb      	strh	r3, [r7, #14]
 800b0ce:	89fb      	ldrh	r3, [r7, #14]
 800b0d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0d4:	81fb      	strh	r3, [r7, #14]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	441a      	add	r2, r3
 800b0e0:	89fb      	ldrh	r3, [r7, #14]
 800b0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3714      	adds	r7, #20
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bc80      	pop	{r7}
 800b100:	4770      	bx	lr

0800b102 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b102:	b480      	push	{r7}
 800b104:	b087      	sub	sp, #28
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	7b1b      	ldrb	r3, [r3, #12]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f040 809d 	bne.w	800b250 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	785b      	ldrb	r3, [r3, #1]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d04c      	beq.n	800b1b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	823b      	strh	r3, [r7, #16]
 800b12c:	8a3b      	ldrh	r3, [r7, #16]
 800b12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b132:	2b00      	cmp	r3, #0
 800b134:	d01b      	beq.n	800b16e <USB_EPClearStall+0x6c>
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	b29b      	uxth	r3, r3
 800b144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14c:	81fb      	strh	r3, [r7, #14]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	441a      	add	r2, r3
 800b158:	89fb      	ldrh	r3, [r7, #14]
 800b15a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b15e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b166:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	78db      	ldrb	r3, [r3, #3]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d06c      	beq.n	800b250 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	b29b      	uxth	r3, r3
 800b184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b18c:	81bb      	strh	r3, [r7, #12]
 800b18e:	89bb      	ldrh	r3, [r7, #12]
 800b190:	f083 0320 	eor.w	r3, r3, #32
 800b194:	81bb      	strh	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	441a      	add	r2, r3
 800b1a0:	89bb      	ldrh	r3, [r7, #12]
 800b1a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	8013      	strh	r3, [r2, #0]
 800b1b6:	e04b      	b.n	800b250 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4413      	add	r3, r2
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	82fb      	strh	r3, [r7, #22]
 800b1c6:	8afb      	ldrh	r3, [r7, #22]
 800b1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d01b      	beq.n	800b208 <USB_EPClearStall+0x106>
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1e6:	82bb      	strh	r3, [r7, #20]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	441a      	add	r2, r3
 800b1f2:	8abb      	ldrh	r3, [r7, #20]
 800b1f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b204:	b29b      	uxth	r3, r3
 800b206:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	b29b      	uxth	r3, r3
 800b216:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b21a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b21e:	827b      	strh	r3, [r7, #18]
 800b220:	8a7b      	ldrh	r3, [r7, #18]
 800b222:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b226:	827b      	strh	r3, [r7, #18]
 800b228:	8a7b      	ldrh	r3, [r7, #18]
 800b22a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b22e:	827b      	strh	r3, [r7, #18]
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	441a      	add	r2, r3
 800b23a:	8a7b      	ldrh	r3, [r7, #18]
 800b23c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b250:	2300      	movs	r3, #0
}
 800b252:	4618      	mov	r0, r3
 800b254:	371c      	adds	r7, #28
 800b256:	46bd      	mov	sp, r7
 800b258:	bc80      	pop	{r7}
 800b25a:	4770      	bx	lr

0800b25c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d103      	bne.n	800b276 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2280      	movs	r2, #128	; 0x80
 800b272:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bc80      	pop	{r7}
 800b280:	4770      	bx	lr

0800b282 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bc80      	pop	{r7}
 800b2a8:	4770      	bx	lr

0800b2aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b085      	sub	sp, #20
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bc80      	pop	{r7}
 800b2c6:	4770      	bx	lr

0800b2c8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b08d      	sub	sp, #52	; 0x34
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	60f8      	str	r0, [r7, #12]
 800b2e6:	60b9      	str	r1, [r7, #8]
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	80fb      	strh	r3, [r7, #6]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b2f4:	88bb      	ldrh	r3, [r7, #4]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	085b      	lsrs	r3, r3, #1
 800b2fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b304:	88fb      	ldrh	r3, [r7, #6]
 800b306:	005a      	lsls	r2, r3, #1
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b310:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b316:	e01e      	b.n	800b356 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	3301      	adds	r3, #1
 800b322:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	021b      	lsls	r3, r3, #8
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	461a      	mov	r2, r3
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	4313      	orrs	r3, r2
 800b334:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	b29a      	uxth	r2, r3
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	3302      	adds	r3, #2
 800b342:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b346:	3302      	adds	r3, #2
 800b348:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	3301      	adds	r3, #1
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	3b01      	subs	r3, #1
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1dd      	bne.n	800b318 <USB_WritePMA+0x3a>
  }
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	3734      	adds	r7, #52	; 0x34
 800b362:	46bd      	mov	sp, r7
 800b364:	bc80      	pop	{r7}
 800b366:	4770      	bx	lr

0800b368 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b368:	b480      	push	{r7}
 800b36a:	b08b      	sub	sp, #44	; 0x2c
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	4611      	mov	r1, r2
 800b374:	461a      	mov	r2, r3
 800b376:	460b      	mov	r3, r1
 800b378:	80fb      	strh	r3, [r7, #6]
 800b37a:	4613      	mov	r3, r2
 800b37c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b37e:	88bb      	ldrh	r3, [r7, #4]
 800b380:	085b      	lsrs	r3, r3, #1
 800b382:	b29b      	uxth	r3, r3
 800b384:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b38e:	88fb      	ldrh	r3, [r7, #6]
 800b390:	005a      	lsls	r2, r3, #1
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b39a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
 800b3a0:	e01b      	b.n	800b3da <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	0a1b      	lsrs	r3, r3, #8
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b3ce:	6a3b      	ldr	r3, [r7, #32]
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e0      	bne.n	800b3a2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b3e0:	88bb      	ldrh	r3, [r7, #4]
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d007      	beq.n	800b3fc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	701a      	strb	r2, [r3, #0]
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	372c      	adds	r7, #44	; 0x2c
 800b400:	46bd      	mov	sp, r7
 800b402:	bc80      	pop	{r7}
 800b404:	4770      	bx	lr

0800b406 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	460b      	mov	r3, r1
 800b410:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b412:	2300      	movs	r3, #0
 800b414:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	7c1b      	ldrb	r3, [r3, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d115      	bne.n	800b44a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b41e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b422:	2202      	movs	r2, #2
 800b424:	2181      	movs	r1, #129	; 0x81
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f001 fea9 	bl	800d17e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b432:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b436:	2202      	movs	r2, #2
 800b438:	2101      	movs	r1, #1
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f001 fe9f 	bl	800d17e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b448:	e012      	b.n	800b470 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b44a:	2340      	movs	r3, #64	; 0x40
 800b44c:	2202      	movs	r2, #2
 800b44e:	2181      	movs	r1, #129	; 0x81
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 fe94 	bl	800d17e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b45c:	2340      	movs	r3, #64	; 0x40
 800b45e:	2202      	movs	r2, #2
 800b460:	2101      	movs	r1, #1
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 fe8b 	bl	800d17e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b470:	2308      	movs	r3, #8
 800b472:	2203      	movs	r2, #3
 800b474:	2182      	movs	r1, #130	; 0x82
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f001 fe81 	bl	800d17e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b482:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b486:	f001 ffa1 	bl	800d3cc <USBD_static_malloc>
 800b48a:	4602      	mov	r2, r0
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b49c:	2301      	movs	r3, #1
 800b49e:	73fb      	strb	r3, [r7, #15]
 800b4a0:	e026      	b.n	800b4f0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	7c1b      	ldrb	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d109      	bne.n	800b4e0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 ff41 	bl	800d360 <USBD_LL_PrepareReceive>
 800b4de:	e007      	b.n	800b4f0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4e6:	2340      	movs	r3, #64	; 0x40
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 ff38 	bl	800d360 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b50a:	2181      	movs	r1, #129	; 0x81
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 fe5c 	bl	800d1ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b518:	2101      	movs	r1, #1
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f001 fe55 	bl	800d1ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b528:	2182      	movs	r1, #130	; 0x82
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f001 fe4d 	bl	800d1ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00e      	beq.n	800b55e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b550:	4618      	mov	r0, r3
 800b552:	f001 ff47 	bl	800d3e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b578:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d039      	beq.n	800b606 <USBD_CDC_Setup+0x9e>
 800b592:	2b20      	cmp	r3, #32
 800b594:	d17f      	bne.n	800b696 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	88db      	ldrh	r3, [r3, #6]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d029      	beq.n	800b5f2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	b25b      	sxtb	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da11      	bge.n	800b5cc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b5b4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	88d2      	ldrh	r2, [r2, #6]
 800b5ba:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b5bc:	6939      	ldr	r1, [r7, #16]
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	88db      	ldrh	r3, [r3, #6]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f001 fa0a 	bl	800c9de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b5ca:	e06b      	b.n	800b6a4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	785a      	ldrb	r2, [r3, #1]
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	88db      	ldrh	r3, [r3, #6]
 800b5da:	b2da      	uxtb	r2, r3
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b5e2:	6939      	ldr	r1, [r7, #16]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	88db      	ldrh	r3, [r3, #6]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fa25 	bl	800ca3a <USBD_CtlPrepareRx>
      break;
 800b5f0:	e058      	b.n	800b6a4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	7850      	ldrb	r0, [r2, #1]
 800b5fe:	2200      	movs	r2, #0
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	4798      	blx	r3
      break;
 800b604:	e04e      	b.n	800b6a4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	2b0b      	cmp	r3, #11
 800b60c:	d02e      	beq.n	800b66c <USBD_CDC_Setup+0x104>
 800b60e:	2b0b      	cmp	r3, #11
 800b610:	dc38      	bgt.n	800b684 <USBD_CDC_Setup+0x11c>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <USBD_CDC_Setup+0xb4>
 800b616:	2b0a      	cmp	r3, #10
 800b618:	d014      	beq.n	800b644 <USBD_CDC_Setup+0xdc>
 800b61a:	e033      	b.n	800b684 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b622:	2b03      	cmp	r3, #3
 800b624:	d107      	bne.n	800b636 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b626:	f107 030c 	add.w	r3, r7, #12
 800b62a:	2202      	movs	r2, #2
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 f9d5 	bl	800c9de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b634:	e02e      	b.n	800b694 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f001 f966 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800b63e:	2302      	movs	r3, #2
 800b640:	75fb      	strb	r3, [r7, #23]
          break;
 800b642:	e027      	b.n	800b694 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d107      	bne.n	800b65e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b64e:	f107 030f 	add.w	r3, r7, #15
 800b652:	2201      	movs	r2, #1
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 f9c1 	bl	800c9de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b65c:	e01a      	b.n	800b694 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 f952 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800b666:	2302      	movs	r3, #2
 800b668:	75fb      	strb	r3, [r7, #23]
          break;
 800b66a:	e013      	b.n	800b694 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b672:	2b03      	cmp	r3, #3
 800b674:	d00d      	beq.n	800b692 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f001 f946 	bl	800c90a <USBD_CtlError>
            ret = USBD_FAIL;
 800b67e:	2302      	movs	r3, #2
 800b680:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b682:	e006      	b.n	800b692 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f001 f93f 	bl	800c90a <USBD_CtlError>
          ret = USBD_FAIL;
 800b68c:	2302      	movs	r3, #2
 800b68e:	75fb      	strb	r3, [r7, #23]
          break;
 800b690:	e000      	b.n	800b694 <USBD_CDC_Setup+0x12c>
          break;
 800b692:	bf00      	nop
      }
      break;
 800b694:	e006      	b.n	800b6a4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f001 f936 	bl	800c90a <USBD_CtlError>
      ret = USBD_FAIL;
 800b69e:	2302      	movs	r3, #2
 800b6a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6a2:	bf00      	nop
  }

  return ret;
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d03a      	beq.n	800b74a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b6d4:	78fa      	ldrb	r2, [r7, #3]
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	440b      	add	r3, r1
 800b6e2:	331c      	adds	r3, #28
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d029      	beq.n	800b73e <USBD_CDC_DataIn+0x90>
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	331c      	adds	r3, #28
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	78f9      	ldrb	r1, [r7, #3]
 800b6fe:	68b8      	ldr	r0, [r7, #8]
 800b700:	460b      	mov	r3, r1
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	440b      	add	r3, r1
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	4403      	add	r3, r0
 800b70a:	3338      	adds	r3, #56	; 0x38
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	fbb2 f1f3 	udiv	r1, r2, r3
 800b712:	fb03 f301 	mul.w	r3, r3, r1
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d110      	bne.n	800b73e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	4613      	mov	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	440b      	add	r3, r1
 800b72a:	331c      	adds	r3, #28
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b730:	78f9      	ldrb	r1, [r7, #3]
 800b732:	2300      	movs	r3, #0
 800b734:	2200      	movs	r2, #0
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f001 fdef 	bl	800d31a <USBD_LL_Transmit>
 800b73c:	e003      	b.n	800b746 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b746:	2300      	movs	r3, #0
 800b748:	e000      	b.n	800b74c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b74a:	2302      	movs	r3, #2
  }
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b766:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 fe1a 	bl	800d3a6 <USBD_LL_GetRxDataSize>
 800b772:	4602      	mov	r2, r0
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00d      	beq.n	800b7a0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b798:	4611      	mov	r1, r2
 800b79a:	4798      	blx	r3

    return USBD_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	e000      	b.n	800b7a2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b7a0:	2302      	movs	r3, #2
  }
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7b8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d015      	beq.n	800b7f0 <USBD_CDC_EP0_RxReady+0x46>
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b7ca:	2bff      	cmp	r3, #255	; 0xff
 800b7cc:	d010      	beq.n	800b7f0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b7dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7e4:	b292      	uxth	r2, r2
 800b7e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	22ff      	movs	r2, #255	; 0xff
 800b7ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2243      	movs	r2, #67	; 0x43
 800b808:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b80a:	4b03      	ldr	r3, [pc, #12]	; (800b818 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	bc80      	pop	{r7}
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	2000010c 	.word	0x2000010c

0800b81c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2243      	movs	r2, #67	; 0x43
 800b828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b82a:	4b03      	ldr	r3, [pc, #12]	; (800b838 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	bc80      	pop	{r7}
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	200000c8 	.word	0x200000c8

0800b83c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2243      	movs	r2, #67	; 0x43
 800b848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b84a:	4b03      	ldr	r3, [pc, #12]	; (800b858 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	bc80      	pop	{r7}
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	20000150 	.word	0x20000150

0800b85c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	220a      	movs	r2, #10
 800b868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b86a:	4b03      	ldr	r3, [pc, #12]	; (800b878 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	bc80      	pop	{r7}
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	20000084 	.word	0x20000084

0800b87c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b886:	2302      	movs	r3, #2
 800b888:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d005      	beq.n	800b89c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b898:	2300      	movs	r3, #0
 800b89a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bc80      	pop	{r7}
 800b8a6:	4770      	bx	lr

0800b8a8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b8c6:	88fa      	ldrh	r2, [r7, #6]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	371c      	adds	r7, #28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bc80      	pop	{r7}
 800b8d8:	4770      	bx	lr

0800b8da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ea:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bc80      	pop	{r7}
 800b8fe:	4770      	bx	lr

0800b900 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b90e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b916:	2b00      	cmp	r3, #0
 800b918:	d01c      	beq.n	800b954 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b920:	2b00      	cmp	r3, #0
 800b922:	d115      	bne.n	800b950 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2201      	movs	r2, #1
 800b928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b942:	b29b      	uxth	r3, r3
 800b944:	2181      	movs	r1, #129	; 0x81
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f001 fce7 	bl	800d31a <USBD_LL_Transmit>

      return USBD_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	e002      	b.n	800b956 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b954:	2302      	movs	r3, #2
  }
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b974:	2b00      	cmp	r3, #0
 800b976:	d017      	beq.n	800b9a8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	7c1b      	ldrb	r3, [r3, #16]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d109      	bne.n	800b994 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b98a:	2101      	movs	r1, #1
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f001 fce7 	bl	800d360 <USBD_LL_PrepareReceive>
 800b992:	e007      	b.n	800b9a4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b99a:	2340      	movs	r3, #64	; 0x40
 800b99c:	2101      	movs	r1, #1
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f001 fcde 	bl	800d360 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e000      	b.n	800b9aa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b9a8:	2302      	movs	r3, #2
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	60b9      	str	r1, [r7, #8]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d101      	bne.n	800b9ca <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e01a      	b.n	800ba00 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	79fa      	ldrb	r2, [r7, #7]
 800b9f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 fb4b 	bl	800d094 <USBD_LL_Init>

  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
 800ba28:	e001      	b.n	800ba2e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr

0800ba3a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f001 fb80 	bl	800d148 <USBD_LL_Start>

  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3708      	adds	r7, #8
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bc80      	pop	{r7}
 800ba64:	4770      	bx	lr

0800ba66 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba72:	2302      	movs	r3, #2
 800ba74:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00c      	beq.n	800ba9a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	78fa      	ldrb	r2, [r7, #3]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	4798      	blx	r3
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	4611      	mov	r1, r2
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3

  return USBD_OK;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
 800bad2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fed8 	bl	800c892 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800baf0:	461a      	mov	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bafe:	f003 031f 	and.w	r3, r3, #31
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d016      	beq.n	800bb34 <USBD_LL_SetupStage+0x6a>
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	d81c      	bhi.n	800bb44 <USBD_LL_SetupStage+0x7a>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d002      	beq.n	800bb14 <USBD_LL_SetupStage+0x4a>
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d008      	beq.n	800bb24 <USBD_LL_SetupStage+0x5a>
 800bb12:	e017      	b.n	800bb44 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f9cb 	bl	800beb8 <USBD_StdDevReq>
      break;
 800bb22:	e01a      	b.n	800bb5a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fa2d 	bl	800bf8c <USBD_StdItfReq>
      break;
 800bb32:	e012      	b.n	800bb5a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fa6d 	bl	800c01c <USBD_StdEPReq>
      break;
 800bb42:	e00a      	b.n	800bb5a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fb58 	bl	800d208 <USBD_LL_StallEP>
      break;
 800bb58:	bf00      	nop
  }

  return USBD_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	607a      	str	r2, [r7, #4]
 800bb70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d14b      	bne.n	800bc10 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb7e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d134      	bne.n	800bbf4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d919      	bls.n	800bbca <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	68da      	ldr	r2, [r3, #12]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	68da      	ldr	r2, [r3, #12]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d203      	bcs.n	800bbb8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	e002      	b.n	800bbbe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	f000 ff57 	bl	800ca76 <USBD_CtlContinueRx>
 800bbc8:	e038      	b.n	800bc3c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	d105      	bne.n	800bbec <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f000 ff54 	bl	800ca9a <USBD_CtlSendStatus>
 800bbf2:	e023      	b.n	800bc3c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbfa:	2b05      	cmp	r3, #5
 800bbfc:	d11e      	bne.n	800bc3c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bc06:	2100      	movs	r1, #0
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f001 fafd 	bl	800d208 <USBD_LL_StallEP>
 800bc0e:	e015      	b.n	800bc3c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00d      	beq.n	800bc38 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d108      	bne.n	800bc38 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc2c:	699b      	ldr	r3, [r3, #24]
 800bc2e:	7afa      	ldrb	r2, [r7, #11]
 800bc30:	4611      	mov	r1, r2
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	4798      	blx	r3
 800bc36:	e001      	b.n	800bc3c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc38:	2302      	movs	r3, #2
 800bc3a:	e000      	b.n	800bc3e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b086      	sub	sp, #24
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	607a      	str	r2, [r7, #4]
 800bc52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bc54:	7afb      	ldrb	r3, [r7, #11]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d17f      	bne.n	800bd5a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3314      	adds	r3, #20
 800bc5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d15c      	bne.n	800bd24 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	68da      	ldr	r2, [r3, #12]
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d915      	bls.n	800bca2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	68da      	ldr	r2, [r3, #12]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f000 fec1 	bl	800ca16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc94:	2300      	movs	r3, #0
 800bc96:	2200      	movs	r2, #0
 800bc98:	2100      	movs	r1, #0
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f001 fb60 	bl	800d360 <USBD_LL_PrepareReceive>
 800bca0:	e04e      	b.n	800bd40 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	6912      	ldr	r2, [r2, #16]
 800bcaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcae:	fb02 f201 	mul.w	r2, r2, r1
 800bcb2:	1a9b      	subs	r3, r3, r2
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d11c      	bne.n	800bcf2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d316      	bcc.n	800bcf2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	689a      	ldr	r2, [r3, #8]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d20f      	bcs.n	800bcf2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	2100      	movs	r1, #0
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fe9d 	bl	800ca16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bce4:	2300      	movs	r3, #0
 800bce6:	2200      	movs	r2, #0
 800bce8:	2100      	movs	r1, #0
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f001 fb38 	bl	800d360 <USBD_LL_PrepareReceive>
 800bcf0:	e026      	b.n	800bd40 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	d105      	bne.n	800bd14 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bd14:	2180      	movs	r1, #128	; 0x80
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f001 fa76 	bl	800d208 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 fecf 	bl	800cac0 <USBD_CtlReceiveStatus>
 800bd22:	e00d      	b.n	800bd40 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd2a:	2b04      	cmp	r3, #4
 800bd2c:	d004      	beq.n	800bd38 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d103      	bne.n	800bd40 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bd38:	2180      	movs	r1, #128	; 0x80
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f001 fa64 	bl	800d208 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d11d      	bne.n	800bd86 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7ff fe81 	bl	800ba52 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd58:	e015      	b.n	800bd86 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00d      	beq.n	800bd82 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd6c:	2b03      	cmp	r3, #3
 800bd6e:	d108      	bne.n	800bd82 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	7afa      	ldrb	r2, [r7, #11]
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	4798      	blx	r3
 800bd80:	e001      	b.n	800bd86 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd82:	2302      	movs	r3, #2
 800bd84:	e000      	b.n	800bd88 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd98:	2340      	movs	r3, #64	; 0x40
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f001 f9ed 	bl	800d17e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2240      	movs	r2, #64	; 0x40
 800bdb0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdb4:	2340      	movs	r3, #64	; 0x40
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2180      	movs	r1, #128	; 0x80
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 f9df 	bl	800d17e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2240      	movs	r2, #64	; 0x40
 800bdca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d009      	beq.n	800be08 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	6852      	ldr	r2, [r2, #4]
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	4611      	mov	r1, r2
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
  }

  return USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	460b      	mov	r3, r1
 800be1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	78fa      	ldrb	r2, [r7, #3]
 800be22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2204      	movs	r2, #4
 800be48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	bc80      	pop	{r7}
 800be56:	4770      	bx	lr

0800be58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be66:	2b04      	cmp	r3, #4
 800be68:	d105      	bne.n	800be76 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bc80      	pop	{r7}
 800be80:	4770      	bx	lr

0800be82 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b082      	sub	sp, #8
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be90:	2b03      	cmp	r3, #3
 800be92:	d10b      	bne.n	800beac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9a:	69db      	ldr	r3, [r3, #28]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d005      	beq.n	800beac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bece:	2b40      	cmp	r3, #64	; 0x40
 800bed0:	d005      	beq.n	800bede <USBD_StdDevReq+0x26>
 800bed2:	2b40      	cmp	r3, #64	; 0x40
 800bed4:	d84f      	bhi.n	800bf76 <USBD_StdDevReq+0xbe>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d009      	beq.n	800beee <USBD_StdDevReq+0x36>
 800beda:	2b20      	cmp	r3, #32
 800bedc:	d14b      	bne.n	800bf76 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	4798      	blx	r3
      break;
 800beec:	e048      	b.n	800bf80 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	785b      	ldrb	r3, [r3, #1]
 800bef2:	2b09      	cmp	r3, #9
 800bef4:	d839      	bhi.n	800bf6a <USBD_StdDevReq+0xb2>
 800bef6:	a201      	add	r2, pc, #4	; (adr r2, 800befc <USBD_StdDevReq+0x44>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf4d 	.word	0x0800bf4d
 800bf00:	0800bf61 	.word	0x0800bf61
 800bf04:	0800bf6b 	.word	0x0800bf6b
 800bf08:	0800bf57 	.word	0x0800bf57
 800bf0c:	0800bf6b 	.word	0x0800bf6b
 800bf10:	0800bf2f 	.word	0x0800bf2f
 800bf14:	0800bf25 	.word	0x0800bf25
 800bf18:	0800bf6b 	.word	0x0800bf6b
 800bf1c:	0800bf43 	.word	0x0800bf43
 800bf20:	0800bf39 	.word	0x0800bf39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f9dc 	bl	800c2e4 <USBD_GetDescriptor>
          break;
 800bf2c:	e022      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 fb3f 	bl	800c5b4 <USBD_SetAddress>
          break;
 800bf36:	e01d      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fb7e 	bl	800c63c <USBD_SetConfig>
          break;
 800bf40:	e018      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fc07 	bl	800c758 <USBD_GetConfig>
          break;
 800bf4a:	e013      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fc37 	bl	800c7c2 <USBD_GetStatus>
          break;
 800bf54:	e00e      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf56:	6839      	ldr	r1, [r7, #0]
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fc65 	bl	800c828 <USBD_SetFeature>
          break;
 800bf5e:	e009      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fc74 	bl	800c850 <USBD_ClrFeature>
          break;
 800bf68:	e004      	b.n	800bf74 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fccc 	bl	800c90a <USBD_CtlError>
          break;
 800bf72:	bf00      	nop
      }
      break;
 800bf74:	e004      	b.n	800bf80 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fcc6 	bl	800c90a <USBD_CtlError>
      break;
 800bf7e:	bf00      	nop
  }

  return ret;
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop

0800bf8c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfa2:	2b40      	cmp	r3, #64	; 0x40
 800bfa4:	d005      	beq.n	800bfb2 <USBD_StdItfReq+0x26>
 800bfa6:	2b40      	cmp	r3, #64	; 0x40
 800bfa8:	d82e      	bhi.n	800c008 <USBD_StdItfReq+0x7c>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <USBD_StdItfReq+0x26>
 800bfae:	2b20      	cmp	r3, #32
 800bfb0:	d12a      	bne.n	800c008 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d81d      	bhi.n	800bffa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	889b      	ldrh	r3, [r3, #4]
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d813      	bhi.n	800bff0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	88db      	ldrh	r3, [r3, #6]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d110      	bne.n	800c004 <USBD_StdItfReq+0x78>
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10d      	bne.n	800c004 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fd56 	bl	800ca9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfee:	e009      	b.n	800c004 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fc89 	bl	800c90a <USBD_CtlError>
          break;
 800bff8:	e004      	b.n	800c004 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fc84 	bl	800c90a <USBD_CtlError>
          break;
 800c002:	e000      	b.n	800c006 <USBD_StdItfReq+0x7a>
          break;
 800c004:	bf00      	nop
      }
      break;
 800c006:	e004      	b.n	800c012 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fc7d 	bl	800c90a <USBD_CtlError>
      break;
 800c010:	bf00      	nop
  }

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	889b      	ldrh	r3, [r3, #4]
 800c02e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c038:	2b40      	cmp	r3, #64	; 0x40
 800c03a:	d007      	beq.n	800c04c <USBD_StdEPReq+0x30>
 800c03c:	2b40      	cmp	r3, #64	; 0x40
 800c03e:	f200 8146 	bhi.w	800c2ce <USBD_StdEPReq+0x2b2>
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00a      	beq.n	800c05c <USBD_StdEPReq+0x40>
 800c046:	2b20      	cmp	r3, #32
 800c048:	f040 8141 	bne.w	800c2ce <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
      break;
 800c05a:	e13d      	b.n	800c2d8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c064:	2b20      	cmp	r3, #32
 800c066:	d10a      	bne.n	800c07e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	4798      	blx	r3
 800c076:	4603      	mov	r3, r0
 800c078:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
 800c07c:	e12d      	b.n	800c2da <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	2b03      	cmp	r3, #3
 800c084:	d007      	beq.n	800c096 <USBD_StdEPReq+0x7a>
 800c086:	2b03      	cmp	r3, #3
 800c088:	f300 811b 	bgt.w	800c2c2 <USBD_StdEPReq+0x2a6>
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d072      	beq.n	800c176 <USBD_StdEPReq+0x15a>
 800c090:	2b01      	cmp	r3, #1
 800c092:	d03a      	beq.n	800c10a <USBD_StdEPReq+0xee>
 800c094:	e115      	b.n	800c2c2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d002      	beq.n	800c0a6 <USBD_StdEPReq+0x8a>
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d015      	beq.n	800c0d0 <USBD_StdEPReq+0xb4>
 800c0a4:	e02b      	b.n	800c0fe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00c      	beq.n	800c0c6 <USBD_StdEPReq+0xaa>
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	2b80      	cmp	r3, #128	; 0x80
 800c0b0:	d009      	beq.n	800c0c6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f001 f8a6 	bl	800d208 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c0bc:	2180      	movs	r1, #128	; 0x80
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 f8a2 	bl	800d208 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0c4:	e020      	b.n	800c108 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fc1e 	bl	800c90a <USBD_CtlError>
              break;
 800c0ce:	e01b      	b.n	800c108 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	885b      	ldrh	r3, [r3, #2]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10e      	bne.n	800c0f6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00b      	beq.n	800c0f6 <USBD_StdEPReq+0xda>
 800c0de:	7bbb      	ldrb	r3, [r7, #14]
 800c0e0:	2b80      	cmp	r3, #128	; 0x80
 800c0e2:	d008      	beq.n	800c0f6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	88db      	ldrh	r3, [r3, #6]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d104      	bne.n	800c0f6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c0ec:	7bbb      	ldrb	r3, [r7, #14]
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f001 f889 	bl	800d208 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fccf 	bl	800ca9a <USBD_CtlSendStatus>

              break;
 800c0fc:	e004      	b.n	800c108 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 fc02 	bl	800c90a <USBD_CtlError>
              break;
 800c106:	bf00      	nop
          }
          break;
 800c108:	e0e0      	b.n	800c2cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c110:	2b02      	cmp	r3, #2
 800c112:	d002      	beq.n	800c11a <USBD_StdEPReq+0xfe>
 800c114:	2b03      	cmp	r3, #3
 800c116:	d015      	beq.n	800c144 <USBD_StdEPReq+0x128>
 800c118:	e026      	b.n	800c168 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00c      	beq.n	800c13a <USBD_StdEPReq+0x11e>
 800c120:	7bbb      	ldrb	r3, [r7, #14]
 800c122:	2b80      	cmp	r3, #128	; 0x80
 800c124:	d009      	beq.n	800c13a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c126:	7bbb      	ldrb	r3, [r7, #14]
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 f86c 	bl	800d208 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c130:	2180      	movs	r1, #128	; 0x80
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f001 f868 	bl	800d208 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c138:	e01c      	b.n	800c174 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fbe4 	bl	800c90a <USBD_CtlError>
              break;
 800c142:	e017      	b.n	800c174 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	885b      	ldrh	r3, [r3, #2]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d112      	bne.n	800c172 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c152:	2b00      	cmp	r3, #0
 800c154:	d004      	beq.n	800c160 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f001 f873 	bl	800d246 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fc9a 	bl	800ca9a <USBD_CtlSendStatus>
              }
              break;
 800c166:	e004      	b.n	800c172 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fbcd 	bl	800c90a <USBD_CtlError>
              break;
 800c170:	e000      	b.n	800c174 <USBD_StdEPReq+0x158>
              break;
 800c172:	bf00      	nop
          }
          break;
 800c174:	e0aa      	b.n	800c2cc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d002      	beq.n	800c186 <USBD_StdEPReq+0x16a>
 800c180:	2b03      	cmp	r3, #3
 800c182:	d032      	beq.n	800c1ea <USBD_StdEPReq+0x1ce>
 800c184:	e097      	b.n	800c2b6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d007      	beq.n	800c19c <USBD_StdEPReq+0x180>
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	2b80      	cmp	r3, #128	; 0x80
 800c190:	d004      	beq.n	800c19c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fbb8 	bl	800c90a <USBD_CtlError>
                break;
 800c19a:	e091      	b.n	800c2c0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c19c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	da0b      	bge.n	800c1bc <USBD_StdEPReq+0x1a0>
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	3310      	adds	r3, #16
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	e00b      	b.n	800c1d4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	2202      	movs	r2, #2
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fbfb 	bl	800c9de <USBD_CtlSendData>
              break;
 800c1e8:	e06a      	b.n	800c2c0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	da11      	bge.n	800c216 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	f003 020f 	and.w	r2, r3, #15
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	440b      	add	r3, r1
 800c204:	3318      	adds	r3, #24
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d117      	bne.n	800c23c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 fb7b 	bl	800c90a <USBD_CtlError>
                  break;
 800c214:	e054      	b.n	800c2c0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	f003 020f 	and.w	r2, r3, #15
 800c21c:	6879      	ldr	r1, [r7, #4]
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	440b      	add	r3, r1
 800c228:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d104      	bne.n	800c23c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fb68 	bl	800c90a <USBD_CtlError>
                  break;
 800c23a:	e041      	b.n	800c2c0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c23c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c240:	2b00      	cmp	r3, #0
 800c242:	da0b      	bge.n	800c25c <USBD_StdEPReq+0x240>
 800c244:	7bbb      	ldrb	r3, [r7, #14]
 800c246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c24a:	4613      	mov	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	4413      	add	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	3310      	adds	r3, #16
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	4413      	add	r3, r2
 800c258:	3304      	adds	r3, #4
 800c25a:	e00b      	b.n	800c274 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c25c:	7bbb      	ldrb	r3, [r7, #14]
 800c25e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c262:	4613      	mov	r3, r2
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	4413      	add	r3, r2
 800c272:	3304      	adds	r3, #4
 800c274:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <USBD_StdEPReq+0x266>
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d103      	bne.n	800c28a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2200      	movs	r2, #0
 800c286:	601a      	str	r2, [r3, #0]
 800c288:	e00e      	b.n	800c2a8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c28a:	7bbb      	ldrb	r3, [r7, #14]
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fff8 	bl	800d284 <USBD_LL_IsStallEP>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	2201      	movs	r2, #1
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	e002      	b.n	800c2a8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fb95 	bl	800c9de <USBD_CtlSendData>
              break;
 800c2b4:	e004      	b.n	800c2c0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 fb26 	bl	800c90a <USBD_CtlError>
              break;
 800c2be:	bf00      	nop
          }
          break;
 800c2c0:	e004      	b.n	800c2cc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fb20 	bl	800c90a <USBD_CtlError>
          break;
 800c2ca:	bf00      	nop
      }
      break;
 800c2cc:	e004      	b.n	800c2d8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fb1a 	bl	800c90a <USBD_CtlError>
      break;
 800c2d6:	bf00      	nop
  }

  return ret;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	885b      	ldrh	r3, [r3, #2]
 800c2fe:	0a1b      	lsrs	r3, r3, #8
 800c300:	b29b      	uxth	r3, r3
 800c302:	3b01      	subs	r3, #1
 800c304:	2b06      	cmp	r3, #6
 800c306:	f200 8128 	bhi.w	800c55a <USBD_GetDescriptor+0x276>
 800c30a:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <USBD_GetDescriptor+0x2c>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c32d 	.word	0x0800c32d
 800c314:	0800c345 	.word	0x0800c345
 800c318:	0800c385 	.word	0x0800c385
 800c31c:	0800c55b 	.word	0x0800c55b
 800c320:	0800c55b 	.word	0x0800c55b
 800c324:	0800c4fb 	.word	0x0800c4fb
 800c328:	0800c527 	.word	0x0800c527
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	7c12      	ldrb	r2, [r2, #16]
 800c338:	f107 0108 	add.w	r1, r7, #8
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	60f8      	str	r0, [r7, #12]
      break;
 800c342:	e112      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	7c1b      	ldrb	r3, [r3, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10d      	bne.n	800c368 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c354:	f107 0208 	add.w	r2, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	2202      	movs	r2, #2
 800c364:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c366:	e100      	b.n	800c56a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	f107 0208 	add.w	r2, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	2202      	movs	r2, #2
 800c380:	701a      	strb	r2, [r3, #0]
      break;
 800c382:	e0f2      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	885b      	ldrh	r3, [r3, #2]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	f200 80ac 	bhi.w	800c4e8 <USBD_GetDescriptor+0x204>
 800c390:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <USBD_GetDescriptor+0xb4>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c3b1 	.word	0x0800c3b1
 800c39c:	0800c3e5 	.word	0x0800c3e5
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c44d 	.word	0x0800c44d
 800c3a8:	0800c481 	.word	0x0800c481
 800c3ac:	0800c4b5 	.word	0x0800c4b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e091      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fa97 	bl	800c90a <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e089      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c406:	e077      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fa7d 	bl	800c90a <USBD_CtlError>
            err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
          break;
 800c416:	e06f      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e05d      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa63 	bl	800c90a <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e055      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46e:	e043      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa49 	bl	800c90a <USBD_CtlError>
            err++;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	3301      	adds	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
          break;
 800c47e:	e03b      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00b      	beq.n	800c4a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	7c12      	ldrb	r2, [r2, #16]
 800c498:	f107 0108 	add.w	r1, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a2:	e029      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa2f 	bl	800c90a <USBD_CtlError>
            err++;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4b2:	e021      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00b      	beq.n	800c4d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	7c12      	ldrb	r2, [r2, #16]
 800c4cc:	f107 0108 	add.w	r1, r7, #8
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
 800c4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d6:	e00f      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa15 	bl	800c90a <USBD_CtlError>
            err++;
 800c4e0:	7afb      	ldrb	r3, [r7, #11]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e6:	e007      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa0d 	bl	800c90a <USBD_CtlError>
          err++;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c4f6:	e038      	b.n	800c56a <USBD_GetDescriptor+0x286>
 800c4f8:	e037      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7c1b      	ldrb	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d109      	bne.n	800c516 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50a:	f107 0208 	add.w	r2, r7, #8
 800c50e:	4610      	mov	r0, r2
 800c510:	4798      	blx	r3
 800c512:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c514:	e029      	b.n	800c56a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f9f6 	bl	800c90a <USBD_CtlError>
        err++;
 800c51e:	7afb      	ldrb	r3, [r7, #11]
 800c520:	3301      	adds	r3, #1
 800c522:	72fb      	strb	r3, [r7, #11]
      break;
 800c524:	e021      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7c1b      	ldrb	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10d      	bne.n	800c54a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c536:	f107 0208 	add.w	r2, r7, #8
 800c53a:	4610      	mov	r0, r2
 800c53c:	4798      	blx	r3
 800c53e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3301      	adds	r3, #1
 800c544:	2207      	movs	r2, #7
 800c546:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c548:	e00f      	b.n	800c56a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 f9dc 	bl	800c90a <USBD_CtlError>
        err++;
 800c552:	7afb      	ldrb	r3, [r7, #11]
 800c554:	3301      	adds	r3, #1
 800c556:	72fb      	strb	r3, [r7, #11]
      break;
 800c558:	e007      	b.n	800c56a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f9d4 	bl	800c90a <USBD_CtlError>
      err++;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	3301      	adds	r3, #1
 800c566:	72fb      	strb	r3, [r7, #11]
      break;
 800c568:	bf00      	nop
  }

  if (err != 0U)
 800c56a:	7afb      	ldrb	r3, [r7, #11]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d11c      	bne.n	800c5aa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c570:	893b      	ldrh	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d011      	beq.n	800c59a <USBD_GetDescriptor+0x2b6>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	88db      	ldrh	r3, [r3, #6]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00d      	beq.n	800c59a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	88da      	ldrh	r2, [r3, #6]
 800c582:	893b      	ldrh	r3, [r7, #8]
 800c584:	4293      	cmp	r3, r2
 800c586:	bf28      	it	cs
 800c588:	4613      	movcs	r3, r2
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c58e:	893b      	ldrh	r3, [r7, #8]
 800c590:	461a      	mov	r2, r3
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fa22 	bl	800c9de <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	88db      	ldrh	r3, [r3, #6]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d104      	bne.n	800c5ac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 fa79 	bl	800ca9a <USBD_CtlSendStatus>
 800c5a8:	e000      	b.n	800c5ac <USBD_GetDescriptor+0x2c8>
    return;
 800c5aa:	bf00      	nop
    }
  }
}
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop

0800c5b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	889b      	ldrh	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d130      	bne.n	800c628 <USBD_SetAddress+0x74>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	88db      	ldrh	r3, [r3, #6]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12c      	bne.n	800c628 <USBD_SetAddress+0x74>
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c5d4:	d828      	bhi.n	800c628 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e8:	2b03      	cmp	r3, #3
 800c5ea:	d104      	bne.n	800c5f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f98b 	bl	800c90a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f4:	e01d      	b.n	800c632 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7bfa      	ldrb	r2, [r7, #15]
 800c5fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fe6a 	bl	800d2dc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fa46 	bl	800ca9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d004      	beq.n	800c61e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2202      	movs	r2, #2
 800c618:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61c:	e009      	b.n	800c632 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	e004      	b.n	800c632 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 f96d 	bl	800c90a <USBD_CtlError>
  }
}
 800c630:	bf00      	nop
 800c632:	bf00      	nop
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	885b      	ldrh	r3, [r3, #2]
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	4b41      	ldr	r3, [pc, #260]	; (800c754 <USBD_SetConfig+0x118>)
 800c64e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c650:	4b40      	ldr	r3, [pc, #256]	; (800c754 <USBD_SetConfig+0x118>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d904      	bls.n	800c662 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f955 	bl	800c90a <USBD_CtlError>
 800c660:	e075      	b.n	800c74e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d002      	beq.n	800c672 <USBD_SetConfig+0x36>
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d023      	beq.n	800c6b8 <USBD_SetConfig+0x7c>
 800c670:	e062      	b.n	800c738 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c672:	4b38      	ldr	r3, [pc, #224]	; (800c754 <USBD_SetConfig+0x118>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d01a      	beq.n	800c6b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c67a:	4b36      	ldr	r3, [pc, #216]	; (800c754 <USBD_SetConfig+0x118>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2203      	movs	r2, #3
 800c688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c68c:	4b31      	ldr	r3, [pc, #196]	; (800c754 <USBD_SetConfig+0x118>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff f9e7 	bl	800ba66 <USBD_SetClassConfig>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d104      	bne.n	800c6a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f000 f932 	bl	800c90a <USBD_CtlError>
            return;
 800c6a6:	e052      	b.n	800c74e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f9f6 	bl	800ca9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c6ae:	e04e      	b.n	800c74e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f9f2 	bl	800ca9a <USBD_CtlSendStatus>
        break;
 800c6b6:	e04a      	b.n	800c74e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c6b8:	4b26      	ldr	r3, [pc, #152]	; (800c754 <USBD_SetConfig+0x118>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d112      	bne.n	800c6e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c6c8:	4b22      	ldr	r3, [pc, #136]	; (800c754 <USBD_SetConfig+0x118>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c6d2:	4b20      	ldr	r3, [pc, #128]	; (800c754 <USBD_SetConfig+0x118>)
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff f9e3 	bl	800baa4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f9db 	bl	800ca9a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c6e4:	e033      	b.n	800c74e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c6e6:	4b1b      	ldr	r3, [pc, #108]	; (800c754 <USBD_SetConfig+0x118>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d01d      	beq.n	800c730 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	b2db      	uxtb	r3, r3
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f7ff f9d1 	bl	800baa4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c702:	4b14      	ldr	r3, [pc, #80]	; (800c754 <USBD_SetConfig+0x118>)
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	461a      	mov	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c70c:	4b11      	ldr	r3, [pc, #68]	; (800c754 <USBD_SetConfig+0x118>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff f9a7 	bl	800ba66 <USBD_SetClassConfig>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d104      	bne.n	800c728 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 f8f2 	bl	800c90a <USBD_CtlError>
            return;
 800c726:	e012      	b.n	800c74e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f9b6 	bl	800ca9a <USBD_CtlSendStatus>
        break;
 800c72e:	e00e      	b.n	800c74e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f9b2 	bl	800ca9a <USBD_CtlSendStatus>
        break;
 800c736:	e00a      	b.n	800c74e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f8e5 	bl	800c90a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c740:	4b04      	ldr	r3, [pc, #16]	; (800c754 <USBD_SetConfig+0x118>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f7ff f9ac 	bl	800baa4 <USBD_ClrClassConfig>
        break;
 800c74c:	bf00      	nop
    }
  }
}
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	200006a6 	.word	0x200006a6

0800c758 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	88db      	ldrh	r3, [r3, #6]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d004      	beq.n	800c774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f8cc 	bl	800c90a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c772:	e022      	b.n	800c7ba <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	dc02      	bgt.n	800c784 <USBD_GetConfig+0x2c>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	dc03      	bgt.n	800c78a <USBD_GetConfig+0x32>
 800c782:	e015      	b.n	800c7b0 <USBD_GetConfig+0x58>
 800c784:	2b03      	cmp	r3, #3
 800c786:	d00b      	beq.n	800c7a0 <USBD_GetConfig+0x48>
 800c788:	e012      	b.n	800c7b0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3308      	adds	r3, #8
 800c794:	2201      	movs	r2, #1
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f920 	bl	800c9de <USBD_CtlSendData>
        break;
 800c79e:	e00c      	b.n	800c7ba <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f918 	bl	800c9de <USBD_CtlSendData>
        break;
 800c7ae:	e004      	b.n	800c7ba <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 f8a9 	bl	800c90a <USBD_CtlError>
        break;
 800c7b8:	bf00      	nop
}
 800c7ba:	bf00      	nop
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d81e      	bhi.n	800c816 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	88db      	ldrh	r3, [r3, #6]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d004      	beq.n	800c7ea <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f891 	bl	800c90a <USBD_CtlError>
        break;
 800c7e8:	e01a      	b.n	800c820 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d005      	beq.n	800c806 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f043 0202 	orr.w	r2, r3, #2
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	330c      	adds	r3, #12
 800c80a:	2202      	movs	r2, #2
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f8e5 	bl	800c9de <USBD_CtlSendData>
      break;
 800c814:	e004      	b.n	800c820 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 f876 	bl	800c90a <USBD_CtlError>
      break;
 800c81e:	bf00      	nop
  }
}
 800c820:	bf00      	nop
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d106      	bne.n	800c848 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f929 	bl	800ca9a <USBD_CtlSendStatus>
  }
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c860:	3b01      	subs	r3, #1
 800c862:	2b02      	cmp	r3, #2
 800c864:	d80b      	bhi.n	800c87e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	885b      	ldrh	r3, [r3, #2]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d10c      	bne.n	800c888 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f90f 	bl	800ca9a <USBD_CtlSendStatus>
      }
      break;
 800c87c:	e004      	b.n	800c888 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f842 	bl	800c90a <USBD_CtlError>
      break;
 800c886:	e000      	b.n	800c88a <USBD_ClrFeature+0x3a>
      break;
 800c888:	bf00      	nop
  }
}
 800c88a:	bf00      	nop
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c892:	b480      	push	{r7}
 800c894:	b083      	sub	sp, #12
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	781a      	ldrb	r2, [r3, #0]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	785a      	ldrb	r2, [r3, #1]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	3302      	adds	r3, #2
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	3303      	adds	r3, #3
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	021b      	lsls	r3, r3, #8
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	4413      	add	r3, r2
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3304      	adds	r3, #4
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	3305      	adds	r3, #5
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	021b      	lsls	r3, r3, #8
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	4413      	add	r3, r2
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	3306      	adds	r3, #6
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	3307      	adds	r3, #7
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	021b      	lsls	r3, r3, #8
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	4413      	add	r3, r2
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	80da      	strh	r2, [r3, #6]

}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	bc80      	pop	{r7}
 800c908:	4770      	bx	lr

0800c90a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c914:	2180      	movs	r1, #128	; 0x80
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fc76 	bl	800d208 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c91c:	2100      	movs	r1, #0
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fc72 	bl	800d208 <USBD_LL_StallEP>
}
 800c924:	bf00      	nop
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d032      	beq.n	800c9a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 f834 	bl	800c9b0 <USBD_GetLen>
 800c948:	4603      	mov	r3, r0
 800c94a:	3301      	adds	r3, #1
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	b29a      	uxth	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	75fa      	strb	r2, [r7, #23]
 800c95c:	461a      	mov	r2, r3
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	4413      	add	r3, r2
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	7812      	ldrb	r2, [r2, #0]
 800c966:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	75fa      	strb	r2, [r7, #23]
 800c96e:	461a      	mov	r2, r3
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	4413      	add	r3, r2
 800c974:	2203      	movs	r2, #3
 800c976:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c978:	e012      	b.n	800c9a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	1c5a      	adds	r2, r3, #1
 800c97e:	60fa      	str	r2, [r7, #12]
 800c980:	7dfa      	ldrb	r2, [r7, #23]
 800c982:	1c51      	adds	r1, r2, #1
 800c984:	75f9      	strb	r1, [r7, #23]
 800c986:	4611      	mov	r1, r2
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	440a      	add	r2, r1
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	75fa      	strb	r2, [r7, #23]
 800c996:	461a      	mov	r2, r3
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	4413      	add	r3, r2
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e8      	bne.n	800c97a <USBD_GetString+0x4e>
    }
  }
}
 800c9a8:	bf00      	nop
 800c9aa:	3718      	adds	r7, #24
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c9bc:	e005      	b.n	800c9ca <USBD_GetLen+0x1a>
  {
    len++;
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1f5      	bne.n	800c9be <USBD_GetLen+0xe>
  }

  return len;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3714      	adds	r7, #20
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bc80      	pop	{r7}
 800c9dc:	4770      	bx	lr

0800c9de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	60f8      	str	r0, [r7, #12]
 800c9e6:	60b9      	str	r1, [r7, #8]
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c9f4:	88fa      	ldrh	r2, [r7, #6]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c9fa:	88fa      	ldrh	r2, [r7, #6]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca00:	88fb      	ldrh	r3, [r7, #6]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	2100      	movs	r1, #0
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 fc87 	bl	800d31a <USBD_LL_Transmit>

  return USBD_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	4613      	mov	r3, r2
 800ca22:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca24:	88fb      	ldrh	r3, [r7, #6]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f000 fc75 	bl	800d31a <USBD_LL_Transmit>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	4613      	mov	r3, r2
 800ca46:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2203      	movs	r2, #3
 800ca4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca50:	88fa      	ldrh	r2, [r7, #6]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca60:	88fb      	ldrh	r3, [r7, #6]
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	2100      	movs	r1, #0
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f000 fc7a 	bl	800d360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	60b9      	str	r1, [r7, #8]
 800ca80:	4613      	mov	r3, r2
 800ca82:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca84:	88fb      	ldrh	r3, [r7, #6]
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	2100      	movs	r1, #0
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 fc68 	bl	800d360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2204      	movs	r2, #4
 800caa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800caaa:	2300      	movs	r3, #0
 800caac:	2200      	movs	r2, #0
 800caae:	2100      	movs	r1, #0
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 fc32 	bl	800d31a <USBD_LL_Transmit>

  return USBD_OK;
 800cab6:	2300      	movs	r3, #0
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2205      	movs	r2, #5
 800cacc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cad0:	2300      	movs	r3, #0
 800cad2:	2200      	movs	r2, #0
 800cad4:	2100      	movs	r1, #0
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fc42 	bl	800d360 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
	...

0800cae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800caec:	2200      	movs	r2, #0
 800caee:	4912      	ldr	r1, [pc, #72]	; (800cb38 <MX_USB_DEVICE_Init+0x50>)
 800caf0:	4812      	ldr	r0, [pc, #72]	; (800cb3c <MX_USB_DEVICE_Init+0x54>)
 800caf2:	f7fe ff5e 	bl	800b9b2 <USBD_Init>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cafc:	f7f6 fc7c 	bl	80033f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb00:	490f      	ldr	r1, [pc, #60]	; (800cb40 <MX_USB_DEVICE_Init+0x58>)
 800cb02:	480e      	ldr	r0, [pc, #56]	; (800cb3c <MX_USB_DEVICE_Init+0x54>)
 800cb04:	f7fe ff80 	bl	800ba08 <USBD_RegisterClass>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb0e:	f7f6 fc73 	bl	80033f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb12:	490c      	ldr	r1, [pc, #48]	; (800cb44 <MX_USB_DEVICE_Init+0x5c>)
 800cb14:	4809      	ldr	r0, [pc, #36]	; (800cb3c <MX_USB_DEVICE_Init+0x54>)
 800cb16:	f7fe feb1 	bl	800b87c <USBD_CDC_RegisterInterface>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d001      	beq.n	800cb24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb20:	f7f6 fc6a 	bl	80033f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb24:	4805      	ldr	r0, [pc, #20]	; (800cb3c <MX_USB_DEVICE_Init+0x54>)
 800cb26:	f7fe ff88 	bl	800ba3a <USBD_Start>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb30:	f7f6 fc62 	bl	80033f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb34:	bf00      	nop
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	200001a4 	.word	0x200001a4
 800cb3c:	20000cb8 	.word	0x20000cb8
 800cb40:	20000090 	.word	0x20000090
 800cb44:	20000194 	.word	0x20000194

0800cb48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	4905      	ldr	r1, [pc, #20]	; (800cb64 <CDC_Init_FS+0x1c>)
 800cb50:	4805      	ldr	r0, [pc, #20]	; (800cb68 <CDC_Init_FS+0x20>)
 800cb52:	f7fe fea9 	bl	800b8a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb56:	4905      	ldr	r1, [pc, #20]	; (800cb6c <CDC_Init_FS+0x24>)
 800cb58:	4803      	ldr	r0, [pc, #12]	; (800cb68 <CDC_Init_FS+0x20>)
 800cb5a:	f7fe febe 	bl	800b8da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20001364 	.word	0x20001364
 800cb68:	20000cb8 	.word	0x20000cb8
 800cb6c:	20000f7c 	.word	0x20000f7c

0800cb70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb70:	b480      	push	{r7}
 800cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bc80      	pop	{r7}
 800cb7c:	4770      	bx	lr
	...

0800cb80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	6039      	str	r1, [r7, #0]
 800cb8a:	71fb      	strb	r3, [r7, #7]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	2b23      	cmp	r3, #35	; 0x23
 800cb94:	d856      	bhi.n	800cc44 <CDC_Control_FS+0xc4>
 800cb96:	a201      	add	r2, pc, #4	; (adr r2, 800cb9c <CDC_Control_FS+0x1c>)
 800cb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9c:	0800cc45 	.word	0x0800cc45
 800cba0:	0800cc45 	.word	0x0800cc45
 800cba4:	0800cc45 	.word	0x0800cc45
 800cba8:	0800cc45 	.word	0x0800cc45
 800cbac:	0800cc45 	.word	0x0800cc45
 800cbb0:	0800cc45 	.word	0x0800cc45
 800cbb4:	0800cc45 	.word	0x0800cc45
 800cbb8:	0800cc45 	.word	0x0800cc45
 800cbbc:	0800cc45 	.word	0x0800cc45
 800cbc0:	0800cc45 	.word	0x0800cc45
 800cbc4:	0800cc45 	.word	0x0800cc45
 800cbc8:	0800cc45 	.word	0x0800cc45
 800cbcc:	0800cc45 	.word	0x0800cc45
 800cbd0:	0800cc45 	.word	0x0800cc45
 800cbd4:	0800cc45 	.word	0x0800cc45
 800cbd8:	0800cc45 	.word	0x0800cc45
 800cbdc:	0800cc45 	.word	0x0800cc45
 800cbe0:	0800cc45 	.word	0x0800cc45
 800cbe4:	0800cc45 	.word	0x0800cc45
 800cbe8:	0800cc45 	.word	0x0800cc45
 800cbec:	0800cc45 	.word	0x0800cc45
 800cbf0:	0800cc45 	.word	0x0800cc45
 800cbf4:	0800cc45 	.word	0x0800cc45
 800cbf8:	0800cc45 	.word	0x0800cc45
 800cbfc:	0800cc45 	.word	0x0800cc45
 800cc00:	0800cc45 	.word	0x0800cc45
 800cc04:	0800cc45 	.word	0x0800cc45
 800cc08:	0800cc45 	.word	0x0800cc45
 800cc0c:	0800cc45 	.word	0x0800cc45
 800cc10:	0800cc45 	.word	0x0800cc45
 800cc14:	0800cc45 	.word	0x0800cc45
 800cc18:	0800cc45 	.word	0x0800cc45
 800cc1c:	0800cc2d 	.word	0x0800cc2d
 800cc20:	0800cc39 	.word	0x0800cc39
 800cc24:	0800cc45 	.word	0x0800cc45
 800cc28:	0800cc45 	.word	0x0800cc45
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800cc2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cc30:	4807      	ldr	r0, [pc, #28]	; (800cc50 <CDC_Control_FS+0xd0>)
 800cc32:	f7f8 faf8 	bl	8005226 <HAL_GPIO_TogglePin>
    break;
 800cc36:	e006      	b.n	800cc46 <CDC_Control_FS+0xc6>

    case CDC_GET_LINE_CODING:

    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800cc38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cc3c:	4804      	ldr	r0, [pc, #16]	; (800cc50 <CDC_Control_FS+0xd0>)
 800cc3e:	f7f8 faf2 	bl	8005226 <HAL_GPIO_TogglePin>
    break;
 800cc42:	e000      	b.n	800cc46 <CDC_Control_FS+0xc6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc44:	bf00      	nop
  }

  return (USBD_OK);
 800cc46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	40011000 	.word	0x40011000

0800cc54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	480e      	ldr	r0, [pc, #56]	; (800cc9c <CDC_Receive_FS+0x48>)
 800cc62:	f7fe fe3a 	bl	800b8da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc66:	480d      	ldr	r0, [pc, #52]	; (800cc9c <CDC_Receive_FS+0x48>)
 800cc68:	f7fe fe79 	bl	800b95e <USBD_CDC_ReceivePacket>
  memset (buffer_usb, '\n', 11);
 800cc6c:	220b      	movs	r2, #11
 800cc6e:	210a      	movs	r1, #10
 800cc70:	480b      	ldr	r0, [pc, #44]	; (800cca0 <CDC_Receive_FS+0x4c>)
 800cc72:	f000 fc4d 	bl	800d510 <memset>
	  memcpy(buffer_usb, Buf, 88);
 800cc76:	2258      	movs	r2, #88	; 0x58
 800cc78:	6879      	ldr	r1, [r7, #4]
 800cc7a:	4809      	ldr	r0, [pc, #36]	; (800cca0 <CDC_Receive_FS+0x4c>)
 800cc7c:	f000 fc3a 	bl	800d4f4 <memcpy>
	  receive = 1;
 800cc80:	4b08      	ldr	r3, [pc, #32]	; (800cca4 <CDC_Receive_FS+0x50>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	701a      	strb	r2, [r3, #0]
  memset(Buf, '\0', 88);
 800cc86:	2258      	movs	r2, #88	; 0x58
 800cc88:	2100      	movs	r1, #0
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fc40 	bl	800d510 <memset>
  return (USBD_OK);
 800cc90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	20000cb8 	.word	0x20000cb8
 800cca0:	20000c58 	.word	0x20000c58
 800cca4:	20000c68 	.word	0x20000c68

0800cca8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ccb8:	4b0d      	ldr	r3, [pc, #52]	; (800ccf0 <CDC_Transmit_FS+0x48>)
 800ccba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e00b      	b.n	800cce6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ccce:	887b      	ldrh	r3, [r7, #2]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6879      	ldr	r1, [r7, #4]
 800ccd4:	4806      	ldr	r0, [pc, #24]	; (800ccf0 <CDC_Transmit_FS+0x48>)
 800ccd6:	f7fe fde7 	bl	800b8a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ccda:	4805      	ldr	r0, [pc, #20]	; (800ccf0 <CDC_Transmit_FS+0x48>)
 800ccdc:	f7fe fe10 	bl	800b900 <USBD_CDC_TransmitPacket>
 800cce0:	4603      	mov	r3, r0
 800cce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000cb8 	.word	0x20000cb8

0800ccf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6039      	str	r1, [r7, #0]
 800ccfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2212      	movs	r2, #18
 800cd04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd06:	4b03      	ldr	r3, [pc, #12]	; (800cd14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bc80      	pop	{r7}
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	200001c0 	.word	0x200001c0

0800cd18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2204      	movs	r2, #4
 800cd28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd2a:	4b03      	ldr	r3, [pc, #12]	; (800cd38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bc80      	pop	{r7}
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	200001d4 	.word	0x200001d4

0800cd3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	; (800cd70 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	; (800cd74 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd54:	f7ff fdea 	bl	800c92c <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	; (800cd70 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	; (800cd74 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd60:	f7ff fde4 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	; (800cd70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20001754 	.word	0x20001754
 800cd74:	0800db50 	.word	0x0800db50

0800cd78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	4904      	ldr	r1, [pc, #16]	; (800cd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd88:	4804      	ldr	r0, [pc, #16]	; (800cd9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd8a:	f7ff fdcf 	bl	800c92c <USBD_GetString>
  return USBD_StrDesc;
 800cd8e:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	20001754 	.word	0x20001754
 800cd9c:	0800db68 	.word	0x0800db68

0800cda0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	221a      	movs	r2, #26
 800cdb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdb2:	f000 f843 	bl	800ce3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdb6:	4b02      	ldr	r3, [pc, #8]	; (800cdc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	200001d8 	.word	0x200001d8

0800cdc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d105      	bne.n	800cde2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4907      	ldr	r1, [pc, #28]	; (800cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdda:	4808      	ldr	r0, [pc, #32]	; (800cdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cddc:	f7ff fda6 	bl	800c92c <USBD_GetString>
 800cde0:	e004      	b.n	800cdec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4904      	ldr	r1, [pc, #16]	; (800cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cde6:	4805      	ldr	r0, [pc, #20]	; (800cdfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800cde8:	f7ff fda0 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20001754 	.word	0x20001754
 800cdfc:	0800db7c 	.word	0x0800db7c

0800ce00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	4603      	mov	r3, r0
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d105      	bne.n	800ce1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	4907      	ldr	r1, [pc, #28]	; (800ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce16:	4808      	ldr	r0, [pc, #32]	; (800ce38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce18:	f7ff fd88 	bl	800c92c <USBD_GetString>
 800ce1c:	e004      	b.n	800ce28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	4904      	ldr	r1, [pc, #16]	; (800ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce22:	4805      	ldr	r0, [pc, #20]	; (800ce38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce24:	f7ff fd82 	bl	800c92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce28:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20001754 	.word	0x20001754
 800ce38:	0800db88 	.word	0x0800db88

0800ce3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce42:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <Get_SerialNum+0x44>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce48:	4b0e      	ldr	r3, [pc, #56]	; (800ce84 <Get_SerialNum+0x48>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce4e:	4b0e      	ldr	r3, [pc, #56]	; (800ce88 <Get_SerialNum+0x4c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4413      	add	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d009      	beq.n	800ce76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce62:	2208      	movs	r2, #8
 800ce64:	4909      	ldr	r1, [pc, #36]	; (800ce8c <Get_SerialNum+0x50>)
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f000 f814 	bl	800ce94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce6c:	2204      	movs	r2, #4
 800ce6e:	4908      	ldr	r1, [pc, #32]	; (800ce90 <Get_SerialNum+0x54>)
 800ce70:	68b8      	ldr	r0, [r7, #8]
 800ce72:	f000 f80f 	bl	800ce94 <IntToUnicode>
  }
}
 800ce76:	bf00      	nop
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	1ffff7e8 	.word	0x1ffff7e8
 800ce84:	1ffff7ec 	.word	0x1ffff7ec
 800ce88:	1ffff7f0 	.word	0x1ffff7f0
 800ce8c:	200001da 	.word	0x200001da
 800ce90:	200001ea 	.word	0x200001ea

0800ce94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b087      	sub	sp, #28
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cea6:	2300      	movs	r3, #0
 800cea8:	75fb      	strb	r3, [r7, #23]
 800ceaa:	e027      	b.n	800cefc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	0f1b      	lsrs	r3, r3, #28
 800ceb0:	2b09      	cmp	r3, #9
 800ceb2:	d80b      	bhi.n	800cecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	0f1b      	lsrs	r3, r3, #28
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	7dfb      	ldrb	r3, [r7, #23]
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	4619      	mov	r1, r3
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	440b      	add	r3, r1
 800cec4:	3230      	adds	r2, #48	; 0x30
 800cec6:	b2d2      	uxtb	r2, r2
 800cec8:	701a      	strb	r2, [r3, #0]
 800ceca:	e00a      	b.n	800cee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	0f1b      	lsrs	r3, r3, #28
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	4619      	mov	r1, r3
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	440b      	add	r3, r1
 800cedc:	3237      	adds	r2, #55	; 0x37
 800cede:	b2d2      	uxtb	r2, r2
 800cee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	011b      	lsls	r3, r3, #4
 800cee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	3301      	adds	r3, #1
 800ceee:	68ba      	ldr	r2, [r7, #8]
 800cef0:	4413      	add	r3, r2
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	3301      	adds	r3, #1
 800cefa:	75fb      	strb	r3, [r7, #23]
 800cefc:	7dfa      	ldrb	r2, [r7, #23]
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d3d3      	bcc.n	800ceac <IntToUnicode+0x18>
  }
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	371c      	adds	r7, #28
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bc80      	pop	{r7}
 800cf0e:	4770      	bx	lr

0800cf10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a0d      	ldr	r2, [pc, #52]	; (800cf54 <HAL_PCD_MspInit+0x44>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d113      	bne.n	800cf4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cf22:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <HAL_PCD_MspInit+0x48>)
 800cf24:	69db      	ldr	r3, [r3, #28]
 800cf26:	4a0c      	ldr	r2, [pc, #48]	; (800cf58 <HAL_PCD_MspInit+0x48>)
 800cf28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf2c:	61d3      	str	r3, [r2, #28]
 800cf2e:	4b0a      	ldr	r3, [pc, #40]	; (800cf58 <HAL_PCD_MspInit+0x48>)
 800cf30:	69db      	ldr	r3, [r3, #28]
 800cf32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	2014      	movs	r0, #20
 800cf40:	f7f7 fd23 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cf44:	2014      	movs	r0, #20
 800cf46:	f7f7 fd3c 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cf4a:	bf00      	nop
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	40005c00 	.word	0x40005c00
 800cf58:	40021000 	.word	0x40021000

0800cf5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cf70:	4619      	mov	r1, r3
 800cf72:	4610      	mov	r0, r2
 800cf74:	f7fe fda9 	bl	800baca <USBD_LL_SetupStage>
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	4613      	mov	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	440b      	add	r3, r1
 800cfa0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	78fb      	ldrb	r3, [r7, #3]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	f7fe fddb 	bl	800bb64 <USBD_LL_DataOutStage>
}
 800cfae:	bf00      	nop
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b082      	sub	sp, #8
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cfc8:	78fa      	ldrb	r2, [r7, #3]
 800cfca:	6879      	ldr	r1, [r7, #4]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	00db      	lsls	r3, r3, #3
 800cfd4:	440b      	add	r3, r1
 800cfd6:	333c      	adds	r3, #60	; 0x3c
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f7fe fe32 	bl	800bc46 <USBD_LL_DataInStage>
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b082      	sub	sp, #8
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe ff42 	bl	800be82 <USBD_LL_SOF>
}
 800cffe:	bf00      	nop
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d00e:	2301      	movs	r3, #1
 800d010:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	2b02      	cmp	r3, #2
 800d018:	d001      	beq.n	800d01e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d01a:	f7f6 f9ed 	bl	80033f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d024:	7bfa      	ldrb	r2, [r7, #15]
 800d026:	4611      	mov	r1, r2
 800d028:	4618      	mov	r0, r3
 800d02a:	f7fe fef2 	bl	800be12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe feab 	bl	800bd90 <USBD_LL_Reset>
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
	...

0800d044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d052:	4618      	mov	r0, r3
 800d054:	f7fe feec 	bl	800be30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d005      	beq.n	800d06c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d060:	4b04      	ldr	r3, [pc, #16]	; (800d074 <HAL_PCD_SuspendCallback+0x30>)
 800d062:	691b      	ldr	r3, [r3, #16]
 800d064:	4a03      	ldr	r2, [pc, #12]	; (800d074 <HAL_PCD_SuspendCallback+0x30>)
 800d066:	f043 0306 	orr.w	r3, r3, #6
 800d06a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d06c:	bf00      	nop
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	e000ed00 	.word	0xe000ed00

0800d078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe fee6 	bl	800be58 <USBD_LL_Resume>
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d09c:	4a28      	ldr	r2, [pc, #160]	; (800d140 <USBD_LL_Init+0xac>)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a26      	ldr	r2, [pc, #152]	; (800d140 <USBD_LL_Init+0xac>)
 800d0a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d0ac:	4b24      	ldr	r3, [pc, #144]	; (800d140 <USBD_LL_Init+0xac>)
 800d0ae:	4a25      	ldr	r2, [pc, #148]	; (800d144 <USBD_LL_Init+0xb0>)
 800d0b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d0b2:	4b23      	ldr	r3, [pc, #140]	; (800d140 <USBD_LL_Init+0xac>)
 800d0b4:	2208      	movs	r2, #8
 800d0b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d0b8:	4b21      	ldr	r3, [pc, #132]	; (800d140 <USBD_LL_Init+0xac>)
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d0be:	4b20      	ldr	r3, [pc, #128]	; (800d140 <USBD_LL_Init+0xac>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d0c4:	4b1e      	ldr	r3, [pc, #120]	; (800d140 <USBD_LL_Init+0xac>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d0ca:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <USBD_LL_Init+0xac>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d0d0:	481b      	ldr	r0, [pc, #108]	; (800d140 <USBD_LL_Init+0xac>)
 800d0d2:	f7f9 f96f 	bl	80063b4 <HAL_PCD_Init>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d0dc:	f7f6 f98c 	bl	80033f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0e6:	2318      	movs	r3, #24
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	f7fa fde5 	bl	8007cba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0f6:	2358      	movs	r3, #88	; 0x58
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	2180      	movs	r1, #128	; 0x80
 800d0fc:	f7fa fddd 	bl	8007cba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d106:	23c0      	movs	r3, #192	; 0xc0
 800d108:	2200      	movs	r2, #0
 800d10a:	2181      	movs	r1, #129	; 0x81
 800d10c:	f7fa fdd5 	bl	8007cba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d116:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d11a:	2200      	movs	r2, #0
 800d11c:	2101      	movs	r1, #1
 800d11e:	f7fa fdcc 	bl	8007cba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d12c:	2200      	movs	r2, #0
 800d12e:	2182      	movs	r1, #130	; 0x82
 800d130:	f7fa fdc3 	bl	8007cba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d134:	2300      	movs	r3, #0
}
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20001954 	.word	0x20001954
 800d144:	40005c00 	.word	0x40005c00

0800d148 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d150:	2300      	movs	r3, #0
 800d152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d15e:	4618      	mov	r0, r3
 800d160:	f7f9 fa33 	bl	80065ca <HAL_PCD_Start>
 800d164:	4603      	mov	r3, r0
 800d166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	4618      	mov	r0, r3
 800d16c:	f000 f94e 	bl	800d40c <USBD_Get_USB_Status>
 800d170:	4603      	mov	r3, r0
 800d172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d174:	7bbb      	ldrb	r3, [r7, #14]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b084      	sub	sp, #16
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	4608      	mov	r0, r1
 800d188:	4611      	mov	r1, r2
 800d18a:	461a      	mov	r2, r3
 800d18c:	4603      	mov	r3, r0
 800d18e:	70fb      	strb	r3, [r7, #3]
 800d190:	460b      	mov	r3, r1
 800d192:	70bb      	strb	r3, [r7, #2]
 800d194:	4613      	mov	r3, r2
 800d196:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1a6:	78bb      	ldrb	r3, [r7, #2]
 800d1a8:	883a      	ldrh	r2, [r7, #0]
 800d1aa:	78f9      	ldrb	r1, [r7, #3]
 800d1ac:	f7f9 fbad 	bl	800690a <HAL_PCD_EP_Open>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 f928 	bl	800d40c <USBD_Get_USB_Status>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1e4:	78fa      	ldrb	r2, [r7, #3]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f9 fbf4 	bl	80069d6 <HAL_PCD_EP_Close>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 f909 	bl	800d40c <USBD_Get_USB_Status>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d214:	2300      	movs	r3, #0
 800d216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d218:	2300      	movs	r3, #0
 800d21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d222:	78fa      	ldrb	r2, [r7, #3]
 800d224:	4611      	mov	r1, r2
 800d226:	4618      	mov	r0, r3
 800d228:	f7f9 fcb4 	bl	8006b94 <HAL_PCD_EP_SetStall>
 800d22c:	4603      	mov	r3, r0
 800d22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d230:	7bfb      	ldrb	r3, [r7, #15]
 800d232:	4618      	mov	r0, r3
 800d234:	f000 f8ea 	bl	800d40c <USBD_Get_USB_Status>
 800d238:	4603      	mov	r3, r0
 800d23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b084      	sub	sp, #16
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	460b      	mov	r3, r1
 800d250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d256:	2300      	movs	r3, #0
 800d258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d260:	78fa      	ldrb	r2, [r7, #3]
 800d262:	4611      	mov	r1, r2
 800d264:	4618      	mov	r0, r3
 800d266:	f7f9 fcf5 	bl	8006c54 <HAL_PCD_EP_ClrStall>
 800d26a:	4603      	mov	r3, r0
 800d26c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	4618      	mov	r0, r3
 800d272:	f000 f8cb 	bl	800d40c <USBD_Get_USB_Status>
 800d276:	4603      	mov	r3, r0
 800d278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d296:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	da0c      	bge.n	800d2ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2a6:	68f9      	ldr	r1, [r7, #12]
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	440b      	add	r3, r1
 800d2b4:	3302      	adds	r3, #2
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	e00b      	b.n	800d2d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2ba:	78fb      	ldrb	r3, [r7, #3]
 800d2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2c0:	68f9      	ldr	r1, [r7, #12]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	00db      	lsls	r3, r3, #3
 800d2ca:	440b      	add	r3, r1
 800d2cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d2d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bc80      	pop	{r7}
 800d2da:	4770      	bx	lr

0800d2dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2f6:	78fa      	ldrb	r2, [r7, #3]
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7f9 fae0 	bl	80068c0 <HAL_PCD_SetAddress>
 800d300:	4603      	mov	r3, r0
 800d302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	4618      	mov	r0, r3
 800d308:	f000 f880 	bl	800d40c <USBD_Get_USB_Status>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d310:	7bbb      	ldrb	r3, [r7, #14]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d31a:	b580      	push	{r7, lr}
 800d31c:	b086      	sub	sp, #24
 800d31e:	af00      	add	r7, sp, #0
 800d320:	60f8      	str	r0, [r7, #12]
 800d322:	607a      	str	r2, [r7, #4]
 800d324:	461a      	mov	r2, r3
 800d326:	460b      	mov	r3, r1
 800d328:	72fb      	strb	r3, [r7, #11]
 800d32a:	4613      	mov	r3, r2
 800d32c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d32e:	2300      	movs	r3, #0
 800d330:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d33c:	893b      	ldrh	r3, [r7, #8]
 800d33e:	7af9      	ldrb	r1, [r7, #11]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	f7f9 fbe4 	bl	8006b0e <HAL_PCD_EP_Transmit>
 800d346:	4603      	mov	r3, r0
 800d348:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 f85d 	bl	800d40c <USBD_Get_USB_Status>
 800d352:	4603      	mov	r3, r0
 800d354:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d356:	7dbb      	ldrb	r3, [r7, #22]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	607a      	str	r2, [r7, #4]
 800d36a:	461a      	mov	r2, r3
 800d36c:	460b      	mov	r3, r1
 800d36e:	72fb      	strb	r3, [r7, #11]
 800d370:	4613      	mov	r3, r2
 800d372:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d374:	2300      	movs	r3, #0
 800d376:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d378:	2300      	movs	r3, #0
 800d37a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d382:	893b      	ldrh	r3, [r7, #8]
 800d384:	7af9      	ldrb	r1, [r7, #11]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	f7f9 fb6d 	bl	8006a66 <HAL_PCD_EP_Receive>
 800d38c:	4603      	mov	r3, r0
 800d38e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d390:	7dfb      	ldrb	r3, [r7, #23]
 800d392:	4618      	mov	r0, r3
 800d394:	f000 f83a 	bl	800d40c <USBD_Get_USB_Status>
 800d398:	4603      	mov	r3, r0
 800d39a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d39c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3718      	adds	r7, #24
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3b8:	78fa      	ldrb	r2, [r7, #3]
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f9 fb8f 	bl	8006ae0 <HAL_PCD_EP_GetRxCount>
 800d3c2:	4603      	mov	r3, r0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3d4:	4b02      	ldr	r3, [pc, #8]	; (800d3e0 <USBD_static_malloc+0x14>)
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bc80      	pop	{r7}
 800d3de:	4770      	bx	lr
 800d3e0:	200006a8 	.word	0x200006a8

0800d3e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]

}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bc80      	pop	{r7}
 800d3f4:	4770      	bx	lr

0800d3f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d402:	bf00      	nop
 800d404:	370c      	adds	r7, #12
 800d406:	46bd      	mov	sp, r7
 800d408:	bc80      	pop	{r7}
 800d40a:	4770      	bx	lr

0800d40c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	4603      	mov	r3, r0
 800d414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d41a:	79fb      	ldrb	r3, [r7, #7]
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d817      	bhi.n	800d450 <USBD_Get_USB_Status+0x44>
 800d420:	a201      	add	r2, pc, #4	; (adr r2, 800d428 <USBD_Get_USB_Status+0x1c>)
 800d422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d426:	bf00      	nop
 800d428:	0800d439 	.word	0x0800d439
 800d42c:	0800d43f 	.word	0x0800d43f
 800d430:	0800d445 	.word	0x0800d445
 800d434:	0800d44b 	.word	0x0800d44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
    break;
 800d43c:	e00b      	b.n	800d456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d43e:	2302      	movs	r3, #2
 800d440:	73fb      	strb	r3, [r7, #15]
    break;
 800d442:	e008      	b.n	800d456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d444:	2301      	movs	r3, #1
 800d446:	73fb      	strb	r3, [r7, #15]
    break;
 800d448:	e005      	b.n	800d456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d44a:	2302      	movs	r3, #2
 800d44c:	73fb      	strb	r3, [r7, #15]
    break;
 800d44e:	e002      	b.n	800d456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d450:	2302      	movs	r3, #2
 800d452:	73fb      	strb	r3, [r7, #15]
    break;
 800d454:	bf00      	nop
  }
  return usb_status;
 800d456:	7bfb      	ldrb	r3, [r7, #15]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3714      	adds	r7, #20
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bc80      	pop	{r7}
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop

0800d464 <atoi>:
 800d464:	220a      	movs	r2, #10
 800d466:	2100      	movs	r1, #0
 800d468:	f000 b8e0 	b.w	800d62c <strtol>

0800d46c <__errno>:
 800d46c:	4b01      	ldr	r3, [pc, #4]	; (800d474 <__errno+0x8>)
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	200001f4 	.word	0x200001f4

0800d478 <__libc_init_array>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	2600      	movs	r6, #0
 800d47c:	4d0c      	ldr	r5, [pc, #48]	; (800d4b0 <__libc_init_array+0x38>)
 800d47e:	4c0d      	ldr	r4, [pc, #52]	; (800d4b4 <__libc_init_array+0x3c>)
 800d480:	1b64      	subs	r4, r4, r5
 800d482:	10a4      	asrs	r4, r4, #2
 800d484:	42a6      	cmp	r6, r4
 800d486:	d109      	bne.n	800d49c <__libc_init_array+0x24>
 800d488:	f000 fb0e 	bl	800daa8 <_init>
 800d48c:	2600      	movs	r6, #0
 800d48e:	4d0a      	ldr	r5, [pc, #40]	; (800d4b8 <__libc_init_array+0x40>)
 800d490:	4c0a      	ldr	r4, [pc, #40]	; (800d4bc <__libc_init_array+0x44>)
 800d492:	1b64      	subs	r4, r4, r5
 800d494:	10a4      	asrs	r4, r4, #2
 800d496:	42a6      	cmp	r6, r4
 800d498:	d105      	bne.n	800d4a6 <__libc_init_array+0x2e>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4a0:	4798      	blx	r3
 800d4a2:	3601      	adds	r6, #1
 800d4a4:	e7ee      	b.n	800d484 <__libc_init_array+0xc>
 800d4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4aa:	4798      	blx	r3
 800d4ac:	3601      	adds	r6, #1
 800d4ae:	e7f2      	b.n	800d496 <__libc_init_array+0x1e>
 800d4b0:	0800ea34 	.word	0x0800ea34
 800d4b4:	0800ea34 	.word	0x0800ea34
 800d4b8:	0800ea34 	.word	0x0800ea34
 800d4bc:	0800ea38 	.word	0x0800ea38

0800d4c0 <__itoa>:
 800d4c0:	1e93      	subs	r3, r2, #2
 800d4c2:	2b22      	cmp	r3, #34	; 0x22
 800d4c4:	b510      	push	{r4, lr}
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	d904      	bls.n	800d4d4 <__itoa+0x14>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	461c      	mov	r4, r3
 800d4ce:	700b      	strb	r3, [r1, #0]
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	bd10      	pop	{r4, pc}
 800d4d4:	2a0a      	cmp	r2, #10
 800d4d6:	d109      	bne.n	800d4ec <__itoa+0x2c>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	da07      	bge.n	800d4ec <__itoa+0x2c>
 800d4dc:	232d      	movs	r3, #45	; 0x2d
 800d4de:	700b      	strb	r3, [r1, #0]
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	4240      	negs	r0, r0
 800d4e4:	4421      	add	r1, r4
 800d4e6:	f000 f8ab 	bl	800d640 <__utoa>
 800d4ea:	e7f1      	b.n	800d4d0 <__itoa+0x10>
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	e7f9      	b.n	800d4e4 <__itoa+0x24>

0800d4f0 <itoa>:
 800d4f0:	f7ff bfe6 	b.w	800d4c0 <__itoa>

0800d4f4 <memcpy>:
 800d4f4:	440a      	add	r2, r1
 800d4f6:	4291      	cmp	r1, r2
 800d4f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4fc:	d100      	bne.n	800d500 <memcpy+0xc>
 800d4fe:	4770      	bx	lr
 800d500:	b510      	push	{r4, lr}
 800d502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d506:	4291      	cmp	r1, r2
 800d508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d50c:	d1f9      	bne.n	800d502 <memcpy+0xe>
 800d50e:	bd10      	pop	{r4, pc}

0800d510 <memset>:
 800d510:	4603      	mov	r3, r0
 800d512:	4402      	add	r2, r0
 800d514:	4293      	cmp	r3, r2
 800d516:	d100      	bne.n	800d51a <memset+0xa>
 800d518:	4770      	bx	lr
 800d51a:	f803 1b01 	strb.w	r1, [r3], #1
 800d51e:	e7f9      	b.n	800d514 <memset+0x4>

0800d520 <_strtol_l.isra.0>:
 800d520:	2b01      	cmp	r3, #1
 800d522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d526:	4686      	mov	lr, r0
 800d528:	d001      	beq.n	800d52e <_strtol_l.isra.0+0xe>
 800d52a:	2b24      	cmp	r3, #36	; 0x24
 800d52c:	d906      	bls.n	800d53c <_strtol_l.isra.0+0x1c>
 800d52e:	f7ff ff9d 	bl	800d46c <__errno>
 800d532:	2316      	movs	r3, #22
 800d534:	6003      	str	r3, [r0, #0]
 800d536:	2000      	movs	r0, #0
 800d538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53c:	468c      	mov	ip, r1
 800d53e:	4e3a      	ldr	r6, [pc, #232]	; (800d628 <_strtol_l.isra.0+0x108>)
 800d540:	4660      	mov	r0, ip
 800d542:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d546:	5da5      	ldrb	r5, [r4, r6]
 800d548:	f015 0508 	ands.w	r5, r5, #8
 800d54c:	d1f8      	bne.n	800d540 <_strtol_l.isra.0+0x20>
 800d54e:	2c2d      	cmp	r4, #45	; 0x2d
 800d550:	d133      	bne.n	800d5ba <_strtol_l.isra.0+0x9a>
 800d552:	f04f 0801 	mov.w	r8, #1
 800d556:	f89c 4000 	ldrb.w	r4, [ip]
 800d55a:	f100 0c02 	add.w	ip, r0, #2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d05d      	beq.n	800d61e <_strtol_l.isra.0+0xfe>
 800d562:	2b10      	cmp	r3, #16
 800d564:	d10c      	bne.n	800d580 <_strtol_l.isra.0+0x60>
 800d566:	2c30      	cmp	r4, #48	; 0x30
 800d568:	d10a      	bne.n	800d580 <_strtol_l.isra.0+0x60>
 800d56a:	f89c 0000 	ldrb.w	r0, [ip]
 800d56e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d572:	2858      	cmp	r0, #88	; 0x58
 800d574:	d14e      	bne.n	800d614 <_strtol_l.isra.0+0xf4>
 800d576:	2310      	movs	r3, #16
 800d578:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d57c:	f10c 0c02 	add.w	ip, ip, #2
 800d580:	2500      	movs	r5, #0
 800d582:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800d586:	3f01      	subs	r7, #1
 800d588:	fbb7 f9f3 	udiv	r9, r7, r3
 800d58c:	4628      	mov	r0, r5
 800d58e:	fb03 7a19 	mls	sl, r3, r9, r7
 800d592:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d596:	2e09      	cmp	r6, #9
 800d598:	d818      	bhi.n	800d5cc <_strtol_l.isra.0+0xac>
 800d59a:	4634      	mov	r4, r6
 800d59c:	42a3      	cmp	r3, r4
 800d59e:	dd24      	ble.n	800d5ea <_strtol_l.isra.0+0xca>
 800d5a0:	2d00      	cmp	r5, #0
 800d5a2:	db1f      	blt.n	800d5e4 <_strtol_l.isra.0+0xc4>
 800d5a4:	4581      	cmp	r9, r0
 800d5a6:	d31d      	bcc.n	800d5e4 <_strtol_l.isra.0+0xc4>
 800d5a8:	d101      	bne.n	800d5ae <_strtol_l.isra.0+0x8e>
 800d5aa:	45a2      	cmp	sl, r4
 800d5ac:	db1a      	blt.n	800d5e4 <_strtol_l.isra.0+0xc4>
 800d5ae:	2501      	movs	r5, #1
 800d5b0:	fb00 4003 	mla	r0, r0, r3, r4
 800d5b4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d5b8:	e7eb      	b.n	800d592 <_strtol_l.isra.0+0x72>
 800d5ba:	2c2b      	cmp	r4, #43	; 0x2b
 800d5bc:	bf08      	it	eq
 800d5be:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d5c2:	46a8      	mov	r8, r5
 800d5c4:	bf08      	it	eq
 800d5c6:	f100 0c02 	addeq.w	ip, r0, #2
 800d5ca:	e7c8      	b.n	800d55e <_strtol_l.isra.0+0x3e>
 800d5cc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d5d0:	2e19      	cmp	r6, #25
 800d5d2:	d801      	bhi.n	800d5d8 <_strtol_l.isra.0+0xb8>
 800d5d4:	3c37      	subs	r4, #55	; 0x37
 800d5d6:	e7e1      	b.n	800d59c <_strtol_l.isra.0+0x7c>
 800d5d8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d5dc:	2e19      	cmp	r6, #25
 800d5de:	d804      	bhi.n	800d5ea <_strtol_l.isra.0+0xca>
 800d5e0:	3c57      	subs	r4, #87	; 0x57
 800d5e2:	e7db      	b.n	800d59c <_strtol_l.isra.0+0x7c>
 800d5e4:	f04f 35ff 	mov.w	r5, #4294967295
 800d5e8:	e7e4      	b.n	800d5b4 <_strtol_l.isra.0+0x94>
 800d5ea:	2d00      	cmp	r5, #0
 800d5ec:	da08      	bge.n	800d600 <_strtol_l.isra.0+0xe0>
 800d5ee:	2322      	movs	r3, #34	; 0x22
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f8ce 3000 	str.w	r3, [lr]
 800d5f6:	2a00      	cmp	r2, #0
 800d5f8:	d09e      	beq.n	800d538 <_strtol_l.isra.0+0x18>
 800d5fa:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d5fe:	e007      	b.n	800d610 <_strtol_l.isra.0+0xf0>
 800d600:	f1b8 0f00 	cmp.w	r8, #0
 800d604:	d000      	beq.n	800d608 <_strtol_l.isra.0+0xe8>
 800d606:	4240      	negs	r0, r0
 800d608:	2a00      	cmp	r2, #0
 800d60a:	d095      	beq.n	800d538 <_strtol_l.isra.0+0x18>
 800d60c:	2d00      	cmp	r5, #0
 800d60e:	d1f4      	bne.n	800d5fa <_strtol_l.isra.0+0xda>
 800d610:	6011      	str	r1, [r2, #0]
 800d612:	e791      	b.n	800d538 <_strtol_l.isra.0+0x18>
 800d614:	2430      	movs	r4, #48	; 0x30
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1b2      	bne.n	800d580 <_strtol_l.isra.0+0x60>
 800d61a:	2308      	movs	r3, #8
 800d61c:	e7b0      	b.n	800d580 <_strtol_l.isra.0+0x60>
 800d61e:	2c30      	cmp	r4, #48	; 0x30
 800d620:	d0a3      	beq.n	800d56a <_strtol_l.isra.0+0x4a>
 800d622:	230a      	movs	r3, #10
 800d624:	e7ac      	b.n	800d580 <_strtol_l.isra.0+0x60>
 800d626:	bf00      	nop
 800d628:	0800e932 	.word	0x0800e932

0800d62c <strtol>:
 800d62c:	4613      	mov	r3, r2
 800d62e:	460a      	mov	r2, r1
 800d630:	4601      	mov	r1, r0
 800d632:	4802      	ldr	r0, [pc, #8]	; (800d63c <strtol+0x10>)
 800d634:	6800      	ldr	r0, [r0, #0]
 800d636:	f7ff bf73 	b.w	800d520 <_strtol_l.isra.0>
 800d63a:	bf00      	nop
 800d63c:	200001f4 	.word	0x200001f4

0800d640 <__utoa>:
 800d640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d642:	b08b      	sub	sp, #44	; 0x2c
 800d644:	4605      	mov	r5, r0
 800d646:	460b      	mov	r3, r1
 800d648:	466e      	mov	r6, sp
 800d64a:	4c1d      	ldr	r4, [pc, #116]	; (800d6c0 <__utoa+0x80>)
 800d64c:	f104 0c20 	add.w	ip, r4, #32
 800d650:	4637      	mov	r7, r6
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	6861      	ldr	r1, [r4, #4]
 800d656:	3408      	adds	r4, #8
 800d658:	c703      	stmia	r7!, {r0, r1}
 800d65a:	4564      	cmp	r4, ip
 800d65c:	463e      	mov	r6, r7
 800d65e:	d1f7      	bne.n	800d650 <__utoa+0x10>
 800d660:	7921      	ldrb	r1, [r4, #4]
 800d662:	6820      	ldr	r0, [r4, #0]
 800d664:	7139      	strb	r1, [r7, #4]
 800d666:	1e91      	subs	r1, r2, #2
 800d668:	2922      	cmp	r1, #34	; 0x22
 800d66a:	6038      	str	r0, [r7, #0]
 800d66c:	f04f 0100 	mov.w	r1, #0
 800d670:	d904      	bls.n	800d67c <__utoa+0x3c>
 800d672:	7019      	strb	r1, [r3, #0]
 800d674:	460b      	mov	r3, r1
 800d676:	4618      	mov	r0, r3
 800d678:	b00b      	add	sp, #44	; 0x2c
 800d67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d67c:	1e58      	subs	r0, r3, #1
 800d67e:	4684      	mov	ip, r0
 800d680:	fbb5 f7f2 	udiv	r7, r5, r2
 800d684:	fb02 5617 	mls	r6, r2, r7, r5
 800d688:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800d68c:	4476      	add	r6, lr
 800d68e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d692:	460c      	mov	r4, r1
 800d694:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d698:	462e      	mov	r6, r5
 800d69a:	42b2      	cmp	r2, r6
 800d69c:	463d      	mov	r5, r7
 800d69e:	f101 0101 	add.w	r1, r1, #1
 800d6a2:	d9ed      	bls.n	800d680 <__utoa+0x40>
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	545a      	strb	r2, [r3, r1]
 800d6a8:	1919      	adds	r1, r3, r4
 800d6aa:	1aa5      	subs	r5, r4, r2
 800d6ac:	42aa      	cmp	r2, r5
 800d6ae:	dae2      	bge.n	800d676 <__utoa+0x36>
 800d6b0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d6b4:	780e      	ldrb	r6, [r1, #0]
 800d6b6:	3201      	adds	r2, #1
 800d6b8:	7006      	strb	r6, [r0, #0]
 800d6ba:	f801 5901 	strb.w	r5, [r1], #-1
 800d6be:	e7f4      	b.n	800d6aa <__utoa+0x6a>
 800d6c0:	0800e90c 	.word	0x0800e90c

0800d6c4 <log>:
 800d6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	f000 f835 	bl	800d738 <__ieee754_log>
 800d6ce:	4b17      	ldr	r3, [pc, #92]	; (800d72c <log+0x68>)
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	f993 3000 	ldrsb.w	r3, [r3]
 800d6d6:	460f      	mov	r7, r1
 800d6d8:	3301      	adds	r3, #1
 800d6da:	d01a      	beq.n	800d712 <log+0x4e>
 800d6dc:	4622      	mov	r2, r4
 800d6de:	462b      	mov	r3, r5
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	f7f3 f98a 	bl	80009fc <__aeabi_dcmpun>
 800d6e8:	b998      	cbnz	r0, 800d712 <log+0x4e>
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f3 f979 	bl	80009e8 <__aeabi_dcmpgt>
 800d6f6:	b960      	cbnz	r0, 800d712 <log+0x4e>
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	4629      	mov	r1, r5
 800d700:	f7f3 f94a 	bl	8000998 <__aeabi_dcmpeq>
 800d704:	b140      	cbz	r0, 800d718 <log+0x54>
 800d706:	f7ff feb1 	bl	800d46c <__errno>
 800d70a:	2322      	movs	r3, #34	; 0x22
 800d70c:	2600      	movs	r6, #0
 800d70e:	4f08      	ldr	r7, [pc, #32]	; (800d730 <log+0x6c>)
 800d710:	6003      	str	r3, [r0, #0]
 800d712:	4630      	mov	r0, r6
 800d714:	4639      	mov	r1, r7
 800d716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d718:	f7ff fea8 	bl	800d46c <__errno>
 800d71c:	2321      	movs	r3, #33	; 0x21
 800d71e:	6003      	str	r3, [r0, #0]
 800d720:	4804      	ldr	r0, [pc, #16]	; (800d734 <log+0x70>)
 800d722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d726:	f000 b9b9 	b.w	800da9c <nan>
 800d72a:	bf00      	nop
 800d72c:	20000258 	.word	0x20000258
 800d730:	fff00000 	.word	0xfff00000
 800d734:	0800e930 	.word	0x0800e930

0800d738 <__ieee754_log>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	460d      	mov	r5, r1
 800d746:	b087      	sub	sp, #28
 800d748:	da24      	bge.n	800d794 <__ieee754_log+0x5c>
 800d74a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d74e:	4304      	orrs	r4, r0
 800d750:	d108      	bne.n	800d764 <__ieee754_log+0x2c>
 800d752:	2200      	movs	r2, #0
 800d754:	2300      	movs	r3, #0
 800d756:	2000      	movs	r0, #0
 800d758:	49cb      	ldr	r1, [pc, #812]	; (800da88 <__ieee754_log+0x350>)
 800d75a:	f7f2 ffdf 	bl	800071c <__aeabi_ddiv>
 800d75e:	b007      	add	sp, #28
 800d760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d764:	2900      	cmp	r1, #0
 800d766:	da04      	bge.n	800d772 <__ieee754_log+0x3a>
 800d768:	f7f2 fcf6 	bl	8000158 <__aeabi_dsub>
 800d76c:	2200      	movs	r2, #0
 800d76e:	2300      	movs	r3, #0
 800d770:	e7f3      	b.n	800d75a <__ieee754_log+0x22>
 800d772:	2200      	movs	r2, #0
 800d774:	4bc5      	ldr	r3, [pc, #788]	; (800da8c <__ieee754_log+0x354>)
 800d776:	f7f2 fea7 	bl	80004c8 <__aeabi_dmul>
 800d77a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	460d      	mov	r5, r1
 800d784:	49c2      	ldr	r1, [pc, #776]	; (800da90 <__ieee754_log+0x358>)
 800d786:	428d      	cmp	r5, r1
 800d788:	dd06      	ble.n	800d798 <__ieee754_log+0x60>
 800d78a:	4610      	mov	r0, r2
 800d78c:	4619      	mov	r1, r3
 800d78e:	f7f2 fce5 	bl	800015c <__adddf3>
 800d792:	e7e4      	b.n	800d75e <__ieee754_log+0x26>
 800d794:	2600      	movs	r6, #0
 800d796:	e7f5      	b.n	800d784 <__ieee754_log+0x4c>
 800d798:	152c      	asrs	r4, r5, #20
 800d79a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d79e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800d7a2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d7a6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800d7aa:	4426      	add	r6, r4
 800d7ac:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800d7b0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800d7b4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800d7b8:	ea41 0305 	orr.w	r3, r1, r5
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4619      	mov	r1, r3
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	4bb4      	ldr	r3, [pc, #720]	; (800da94 <__ieee754_log+0x35c>)
 800d7c4:	f7f2 fcc8 	bl	8000158 <__aeabi_dsub>
 800d7c8:	1cab      	adds	r3, r5, #2
 800d7ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	4682      	mov	sl, r0
 800d7d2:	468b      	mov	fp, r1
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800d7dc:	dc53      	bgt.n	800d886 <__ieee754_log+0x14e>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f7f3 f8da 	bl	8000998 <__aeabi_dcmpeq>
 800d7e4:	b1d0      	cbz	r0, 800d81c <__ieee754_log+0xe4>
 800d7e6:	2c00      	cmp	r4, #0
 800d7e8:	f000 8122 	beq.w	800da30 <__ieee754_log+0x2f8>
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f7f2 fe01 	bl	80003f4 <__aeabi_i2d>
 800d7f2:	a391      	add	r3, pc, #580	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	460f      	mov	r7, r1
 800d7fc:	f7f2 fe64 	bl	80004c8 <__aeabi_dmul>
 800d800:	a38f      	add	r3, pc, #572	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	4604      	mov	r4, r0
 800d808:	460d      	mov	r5, r1
 800d80a:	4630      	mov	r0, r6
 800d80c:	4639      	mov	r1, r7
 800d80e:	f7f2 fe5b 	bl	80004c8 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	e7b8      	b.n	800d78e <__ieee754_log+0x56>
 800d81c:	a38a      	add	r3, pc, #552	; (adr r3, 800da48 <__ieee754_log+0x310>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	4650      	mov	r0, sl
 800d824:	4659      	mov	r1, fp
 800d826:	f7f2 fe4f 	bl	80004c8 <__aeabi_dmul>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	2000      	movs	r0, #0
 800d830:	4999      	ldr	r1, [pc, #612]	; (800da98 <__ieee754_log+0x360>)
 800d832:	f7f2 fc91 	bl	8000158 <__aeabi_dsub>
 800d836:	4652      	mov	r2, sl
 800d838:	4606      	mov	r6, r0
 800d83a:	460f      	mov	r7, r1
 800d83c:	465b      	mov	r3, fp
 800d83e:	4650      	mov	r0, sl
 800d840:	4659      	mov	r1, fp
 800d842:	f7f2 fe41 	bl	80004c8 <__aeabi_dmul>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fe3b 	bl	80004c8 <__aeabi_dmul>
 800d852:	4606      	mov	r6, r0
 800d854:	460f      	mov	r7, r1
 800d856:	b914      	cbnz	r4, 800d85e <__ieee754_log+0x126>
 800d858:	4632      	mov	r2, r6
 800d85a:	463b      	mov	r3, r7
 800d85c:	e0a2      	b.n	800d9a4 <__ieee754_log+0x26c>
 800d85e:	4620      	mov	r0, r4
 800d860:	f7f2 fdc8 	bl	80003f4 <__aeabi_i2d>
 800d864:	a374      	add	r3, pc, #464	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	4680      	mov	r8, r0
 800d86c:	4689      	mov	r9, r1
 800d86e:	f7f2 fe2b 	bl	80004c8 <__aeabi_dmul>
 800d872:	a373      	add	r3, pc, #460	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	4640      	mov	r0, r8
 800d87e:	4649      	mov	r1, r9
 800d880:	f7f2 fe22 	bl	80004c8 <__aeabi_dmul>
 800d884:	e0a7      	b.n	800d9d6 <__ieee754_log+0x29e>
 800d886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d88a:	f7f2 fc67 	bl	800015c <__adddf3>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4650      	mov	r0, sl
 800d894:	4659      	mov	r1, fp
 800d896:	f7f2 ff41 	bl	800071c <__aeabi_ddiv>
 800d89a:	e9cd 0100 	strd	r0, r1, [sp]
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f7f2 fda8 	bl	80003f4 <__aeabi_i2d>
 800d8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	f7f2 fe0a 	bl	80004c8 <__aeabi_dmul>
 800d8b4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d8b8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d8bc:	4602      	mov	r2, r0
 800d8be:	9305      	str	r3, [sp, #20]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460f      	mov	r7, r1
 800d8c6:	f7f2 fdff 	bl	80004c8 <__aeabi_dmul>
 800d8ca:	a361      	add	r3, pc, #388	; (adr r3, 800da50 <__ieee754_log+0x318>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	4680      	mov	r8, r0
 800d8d2:	4689      	mov	r9, r1
 800d8d4:	f7f2 fdf8 	bl	80004c8 <__aeabi_dmul>
 800d8d8:	a35f      	add	r3, pc, #380	; (adr r3, 800da58 <__ieee754_log+0x320>)
 800d8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8de:	f7f2 fc3d 	bl	800015c <__adddf3>
 800d8e2:	4642      	mov	r2, r8
 800d8e4:	464b      	mov	r3, r9
 800d8e6:	f7f2 fdef 	bl	80004c8 <__aeabi_dmul>
 800d8ea:	a35d      	add	r3, pc, #372	; (adr r3, 800da60 <__ieee754_log+0x328>)
 800d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f0:	f7f2 fc34 	bl	800015c <__adddf3>
 800d8f4:	4642      	mov	r2, r8
 800d8f6:	464b      	mov	r3, r9
 800d8f8:	f7f2 fde6 	bl	80004c8 <__aeabi_dmul>
 800d8fc:	a35a      	add	r3, pc, #360	; (adr r3, 800da68 <__ieee754_log+0x330>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	f7f2 fc2b 	bl	800015c <__adddf3>
 800d906:	4632      	mov	r2, r6
 800d908:	463b      	mov	r3, r7
 800d90a:	f7f2 fddd 	bl	80004c8 <__aeabi_dmul>
 800d90e:	a358      	add	r3, pc, #352	; (adr r3, 800da70 <__ieee754_log+0x338>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	4606      	mov	r6, r0
 800d916:	460f      	mov	r7, r1
 800d918:	4640      	mov	r0, r8
 800d91a:	4649      	mov	r1, r9
 800d91c:	f7f2 fdd4 	bl	80004c8 <__aeabi_dmul>
 800d920:	a355      	add	r3, pc, #340	; (adr r3, 800da78 <__ieee754_log+0x340>)
 800d922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d926:	f7f2 fc19 	bl	800015c <__adddf3>
 800d92a:	4642      	mov	r2, r8
 800d92c:	464b      	mov	r3, r9
 800d92e:	f7f2 fdcb 	bl	80004c8 <__aeabi_dmul>
 800d932:	a353      	add	r3, pc, #332	; (adr r3, 800da80 <__ieee754_log+0x348>)
 800d934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d938:	f7f2 fc10 	bl	800015c <__adddf3>
 800d93c:	4642      	mov	r2, r8
 800d93e:	464b      	mov	r3, r9
 800d940:	f7f2 fdc2 	bl	80004c8 <__aeabi_dmul>
 800d944:	460b      	mov	r3, r1
 800d946:	4602      	mov	r2, r0
 800d948:	4639      	mov	r1, r7
 800d94a:	4630      	mov	r0, r6
 800d94c:	f7f2 fc06 	bl	800015c <__adddf3>
 800d950:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d954:	9b05      	ldr	r3, [sp, #20]
 800d956:	3551      	adds	r5, #81	; 0x51
 800d958:	431d      	orrs	r5, r3
 800d95a:	2d00      	cmp	r5, #0
 800d95c:	4680      	mov	r8, r0
 800d95e:	4689      	mov	r9, r1
 800d960:	dd48      	ble.n	800d9f4 <__ieee754_log+0x2bc>
 800d962:	2200      	movs	r2, #0
 800d964:	4b4c      	ldr	r3, [pc, #304]	; (800da98 <__ieee754_log+0x360>)
 800d966:	4650      	mov	r0, sl
 800d968:	4659      	mov	r1, fp
 800d96a:	f7f2 fdad 	bl	80004c8 <__aeabi_dmul>
 800d96e:	4652      	mov	r2, sl
 800d970:	465b      	mov	r3, fp
 800d972:	f7f2 fda9 	bl	80004c8 <__aeabi_dmul>
 800d976:	4602      	mov	r2, r0
 800d978:	460b      	mov	r3, r1
 800d97a:	4606      	mov	r6, r0
 800d97c:	460f      	mov	r7, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fbeb 	bl	800015c <__adddf3>
 800d986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d98a:	f7f2 fd9d 	bl	80004c8 <__aeabi_dmul>
 800d98e:	4680      	mov	r8, r0
 800d990:	4689      	mov	r9, r1
 800d992:	b964      	cbnz	r4, 800d9ae <__ieee754_log+0x276>
 800d994:	4602      	mov	r2, r0
 800d996:	460b      	mov	r3, r1
 800d998:	4630      	mov	r0, r6
 800d99a:	4639      	mov	r1, r7
 800d99c:	f7f2 fbdc 	bl	8000158 <__aeabi_dsub>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	4650      	mov	r0, sl
 800d9a6:	4659      	mov	r1, fp
 800d9a8:	f7f2 fbd6 	bl	8000158 <__aeabi_dsub>
 800d9ac:	e6d7      	b.n	800d75e <__ieee754_log+0x26>
 800d9ae:	a322      	add	r3, pc, #136	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9b8:	f7f2 fd86 	bl	80004c8 <__aeabi_dmul>
 800d9bc:	a320      	add	r3, pc, #128	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ca:	f7f2 fd7d 	bl	80004c8 <__aeabi_dmul>
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	464b      	mov	r3, r9
 800d9d2:	f7f2 fbc3 	bl	800015c <__adddf3>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	f7f2 fbbb 	bl	8000158 <__aeabi_dsub>
 800d9e2:	4652      	mov	r2, sl
 800d9e4:	465b      	mov	r3, fp
 800d9e6:	f7f2 fbb7 	bl	8000158 <__aeabi_dsub>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	e7d9      	b.n	800d9a8 <__ieee754_log+0x270>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	4650      	mov	r0, sl
 800d9fa:	4659      	mov	r1, fp
 800d9fc:	f7f2 fbac 	bl	8000158 <__aeabi_dsub>
 800da00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da04:	f7f2 fd60 	bl	80004c8 <__aeabi_dmul>
 800da08:	4606      	mov	r6, r0
 800da0a:	460f      	mov	r7, r1
 800da0c:	2c00      	cmp	r4, #0
 800da0e:	f43f af23 	beq.w	800d858 <__ieee754_log+0x120>
 800da12:	a309      	add	r3, pc, #36	; (adr r3, 800da38 <__ieee754_log+0x300>)
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da1c:	f7f2 fd54 	bl	80004c8 <__aeabi_dmul>
 800da20:	a307      	add	r3, pc, #28	; (adr r3, 800da40 <__ieee754_log+0x308>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	4604      	mov	r4, r0
 800da28:	460d      	mov	r5, r1
 800da2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da2e:	e727      	b.n	800d880 <__ieee754_log+0x148>
 800da30:	2000      	movs	r0, #0
 800da32:	2100      	movs	r1, #0
 800da34:	e693      	b.n	800d75e <__ieee754_log+0x26>
 800da36:	bf00      	nop
 800da38:	fee00000 	.word	0xfee00000
 800da3c:	3fe62e42 	.word	0x3fe62e42
 800da40:	35793c76 	.word	0x35793c76
 800da44:	3dea39ef 	.word	0x3dea39ef
 800da48:	55555555 	.word	0x55555555
 800da4c:	3fd55555 	.word	0x3fd55555
 800da50:	df3e5244 	.word	0xdf3e5244
 800da54:	3fc2f112 	.word	0x3fc2f112
 800da58:	96cb03de 	.word	0x96cb03de
 800da5c:	3fc74664 	.word	0x3fc74664
 800da60:	94229359 	.word	0x94229359
 800da64:	3fd24924 	.word	0x3fd24924
 800da68:	55555593 	.word	0x55555593
 800da6c:	3fe55555 	.word	0x3fe55555
 800da70:	d078c69f 	.word	0xd078c69f
 800da74:	3fc39a09 	.word	0x3fc39a09
 800da78:	1d8e78af 	.word	0x1d8e78af
 800da7c:	3fcc71c5 	.word	0x3fcc71c5
 800da80:	9997fa04 	.word	0x9997fa04
 800da84:	3fd99999 	.word	0x3fd99999
 800da88:	c3500000 	.word	0xc3500000
 800da8c:	43500000 	.word	0x43500000
 800da90:	7fefffff 	.word	0x7fefffff
 800da94:	3ff00000 	.word	0x3ff00000
 800da98:	3fe00000 	.word	0x3fe00000

0800da9c <nan>:
 800da9c:	2000      	movs	r0, #0
 800da9e:	4901      	ldr	r1, [pc, #4]	; (800daa4 <nan+0x8>)
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	7ff80000 	.word	0x7ff80000

0800daa8 <_init>:
 800daa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daaa:	bf00      	nop
 800daac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daae:	bc08      	pop	{r3}
 800dab0:	469e      	mov	lr, r3
 800dab2:	4770      	bx	lr

0800dab4 <_fini>:
 800dab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab6:	bf00      	nop
 800dab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daba:	bc08      	pop	{r3}
 800dabc:	469e      	mov	lr, r3
 800dabe:	4770      	bx	lr
