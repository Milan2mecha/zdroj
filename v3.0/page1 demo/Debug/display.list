
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  08002d98  08002d98  00012d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003b44  08003b44  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b44  08003b44  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000018  08003b64  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08003b64  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091dd  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ec  00000000  00000000  0002921e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b95  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a08  00000000  00000000  00042465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b5a  00000000  00000000  0004be6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd9c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002000  00000000  00000000  000cda1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d80 	.word	0x08002d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08002d80 	.word	0x08002d80

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2f>:
 8000630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000638:	bf24      	itt	cs
 800063a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800063e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000642:	d90d      	bls.n	8000660 <__aeabi_d2f+0x30>
 8000644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800064c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000658:	bf08      	it	eq
 800065a:	f020 0001 	biceq.w	r0, r0, #1
 800065e:	4770      	bx	lr
 8000660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000664:	d121      	bne.n	80006aa <__aeabi_d2f+0x7a>
 8000666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800066a:	bfbc      	itt	lt
 800066c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000670:	4770      	bxlt	lr
 8000672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800067a:	f1c2 0218 	rsb	r2, r2, #24
 800067e:	f1c2 0c20 	rsb	ip, r2, #32
 8000682:	fa10 f30c 	lsls.w	r3, r0, ip
 8000686:	fa20 f002 	lsr.w	r0, r0, r2
 800068a:	bf18      	it	ne
 800068c:	f040 0001 	orrne.w	r0, r0, #1
 8000690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800069c:	ea40 000c 	orr.w	r0, r0, ip
 80006a0:	fa23 f302 	lsr.w	r3, r3, r2
 80006a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006a8:	e7cc      	b.n	8000644 <__aeabi_d2f+0x14>
 80006aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006ae:	d107      	bne.n	80006c0 <__aeabi_d2f+0x90>
 80006b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006b4:	bf1e      	ittt	ne
 80006b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006be:	4770      	bxne	lr
 80006c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <__aeabi_f2uiz>:
 80006d0:	0042      	lsls	r2, r0, #1
 80006d2:	d20e      	bcs.n	80006f2 <__aeabi_f2uiz+0x22>
 80006d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006d8:	d30b      	bcc.n	80006f2 <__aeabi_f2uiz+0x22>
 80006da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006e2:	d409      	bmi.n	80006f8 <__aeabi_f2uiz+0x28>
 80006e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006ec:	fa23 f002 	lsr.w	r0, r3, r2
 80006f0:	4770      	bx	lr
 80006f2:	f04f 0000 	mov.w	r0, #0
 80006f6:	4770      	bx	lr
 80006f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006fc:	d101      	bne.n	8000702 <__aeabi_f2uiz+0x32>
 80006fe:	0242      	lsls	r2, r0, #9
 8000700:	d102      	bne.n	8000708 <__aeabi_f2uiz+0x38>
 8000702:	f04f 30ff 	mov.w	r0, #4294967295
 8000706:	4770      	bx	lr
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop

08000710 <trimm>:
float x = 0;
uint8_t pointer_p1 = 0x01;


char* trimm(float f)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	static char trimmed [4];

	f *= 100;
 8000718:	4929      	ldr	r1, [pc, #164]	; (80007c0 <trimm+0xb0>)
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff fd18 	bl	8000150 <__aeabi_fmul>
 8000720:	4603      	mov	r3, r0
 8000722:	607b      	str	r3, [r7, #4]
	uint16_t g = f;
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ffd3 	bl	80006d0 <__aeabi_f2uiz>
 800072a:	4603      	mov	r3, r0
 800072c:	81bb      	strh	r3, [r7, #12]
	itoa(g, trimmed, 10);
 800072e:	89bb      	ldrh	r3, [r7, #12]
 8000730:	220a      	movs	r2, #10
 8000732:	4924      	ldr	r1, [pc, #144]	; (80007c4 <trimm+0xb4>)
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fad7 	bl	8002ce8 <itoa>

	if(g<10)
 800073a:	89bb      	ldrh	r3, [r7, #12]
 800073c:	2b09      	cmp	r3, #9
 800073e:	d80c      	bhi.n	800075a <trimm+0x4a>
	{
		trimmed[3] = trimmed[0];
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <trimm+0xb4>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <trimm+0xb4>)
 8000746:	70da      	strb	r2, [r3, #3]
		trimmed[2] = '0';
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <trimm+0xb4>)
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <trimm+0xb4>)
 8000750:	2230      	movs	r2, #48	; 0x30
 8000752:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <trimm+0xb4>)
 8000756:	2220      	movs	r2, #32
 8000758:	701a      	strb	r2, [r3, #0]


	}
	if((g<100)&&(g>9))
 800075a:	89bb      	ldrh	r3, [r7, #12]
 800075c:	2b63      	cmp	r3, #99	; 0x63
 800075e:	d810      	bhi.n	8000782 <trimm+0x72>
 8000760:	89bb      	ldrh	r3, [r7, #12]
 8000762:	2b09      	cmp	r3, #9
 8000764:	d90d      	bls.n	8000782 <trimm+0x72>
	{
		trimmed[3] = trimmed[1];
 8000766:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <trimm+0xb4>)
 8000768:	785a      	ldrb	r2, [r3, #1]
 800076a:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <trimm+0xb4>)
 800076c:	70da      	strb	r2, [r3, #3]
		trimmed[2] = trimmed[0];
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <trimm+0xb4>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <trimm+0xb4>)
 8000774:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <trimm+0xb4>)
 8000778:	2230      	movs	r2, #48	; 0x30
 800077a:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <trimm+0xb4>)
 800077e:	2220      	movs	r2, #32
 8000780:	701a      	strb	r2, [r3, #0]

	}
	if((g<1000)&&(g>99))
 8000782:	89bb      	ldrh	r3, [r7, #12]
 8000784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000788:	d215      	bcs.n	80007b6 <trimm+0xa6>
 800078a:	89bb      	ldrh	r3, [r7, #12]
 800078c:	2b63      	cmp	r3, #99	; 0x63
 800078e:	d912      	bls.n	80007b6 <trimm+0xa6>
	{
		for(uint8_t i = 3; i>0; i--)
 8000790:	2303      	movs	r3, #3
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e009      	b.n	80007aa <trimm+0x9a>
		{
			trimmed[i] = trimmed[i-1];
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4909      	ldr	r1, [pc, #36]	; (80007c4 <trimm+0xb4>)
 800079e:	5c89      	ldrb	r1, [r1, r2]
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <trimm+0xb4>)
 80007a2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 3; i>0; i--)
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	73fb      	strb	r3, [r7, #15]
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f2      	bne.n	8000796 <trimm+0x86>
		}
		trimmed[0] = ' ';
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <trimm+0xb4>)
 80007b2:	2220      	movs	r2, #32
 80007b4:	701a      	strb	r2, [r3, #0]

	}

	return trimmed;
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <trimm+0xb4>)
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	42c80000 	.word	0x42c80000
 80007c4:	2000003c 	.word	0x2000003c

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fde3 	bl	8001398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f91d 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f000 f985 	bl	8000ae4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007da:	f000 f955 	bl	8000a88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80007de:	f000 f99d 	bl	8000b1c <SSD1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SSD1306_Clear();
 80007e2:	f000 fc94 	bl	800110e <SSD1306_Clear>
	  char* mecha = trimm(y);
 80007e6:	4b86      	ldr	r3, [pc, #536]	; (8000a00 <main+0x238>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff90 	bl	8000710 <trimm>
 80007f0:	6078      	str	r0, [r7, #4]
	  SSD1306_GotoXY (26,3);
 80007f2:	2103      	movs	r1, #3
 80007f4:	201a      	movs	r0, #26
 80007f6:	f000 faf9 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[0], &Font_11x18, (~pointer_p1 & 0x08));
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7818      	ldrb	r0, [r3, #0]
 80007fe:	4b81      	ldr	r3, [pc, #516]	; (8000a04 <main+0x23c>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	43db      	mvns	r3, r3
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	497e      	ldr	r1, [pc, #504]	; (8000a08 <main+0x240>)
 8000810:	f000 fb02 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (37,3);
 8000814:	2103      	movs	r1, #3
 8000816:	2025      	movs	r0, #37	; 0x25
 8000818:	f000 fae8 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[1], &Font_11x18, ((~pointer_p1 & 0x04)>>1));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	7818      	ldrb	r0, [r3, #0]
 8000822:	4b78      	ldr	r3, [pc, #480]	; (8000a04 <main+0x23c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	43db      	mvns	r3, r3
 8000828:	105b      	asrs	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	4974      	ldr	r1, [pc, #464]	; (8000a08 <main+0x240>)
 8000836:	f000 faef 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (48,3);
 800083a:	2103      	movs	r1, #3
 800083c:	2030      	movs	r0, #48	; 0x30
 800083e:	f000 fad5 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	4970      	ldr	r1, [pc, #448]	; (8000a08 <main+0x240>)
 8000846:	202c      	movs	r0, #44	; 0x2c
 8000848:	f000 fae6 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (59,3);
 800084c:	2103      	movs	r1, #3
 800084e:	203b      	movs	r0, #59	; 0x3b
 8000850:	f000 facc 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[2], &Font_11x18, ((~pointer_p1 & 0x02)>>2));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3302      	adds	r3, #2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	496a      	ldr	r1, [pc, #424]	; (8000a08 <main+0x240>)
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fada 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (70,3);
 8000864:	2103      	movs	r1, #3
 8000866:	2046      	movs	r0, #70	; 0x46
 8000868:	f000 fac0 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[3], &Font_11x18, ((~pointer_p1 & 0x01)>>3));
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3303      	adds	r3, #3
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	4964      	ldr	r1, [pc, #400]	; (8000a08 <main+0x240>)
 8000876:	4618      	mov	r0, r3
 8000878:	f000 face 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (107,3);
 800087c:	2103      	movs	r1, #3
 800087e:	206b      	movs	r0, #107	; 0x6b
 8000880:	f000 fab4 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc('V', &Font_11x18, 1);
 8000884:	2201      	movs	r2, #1
 8000886:	4960      	ldr	r1, [pc, #384]	; (8000a08 <main+0x240>)
 8000888:	2056      	movs	r0, #86	; 0x56
 800088a:	f000 fac5 	bl	8000e18 <SSD1306_Putc>
	  char* proud = trimm(x);
 800088e:	4b5f      	ldr	r3, [pc, #380]	; (8000a0c <main+0x244>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff3c 	bl	8000710 <trimm>
 8000898:	6038      	str	r0, [r7, #0]
	  SSD1306_GotoXY (26,25);
 800089a:	2119      	movs	r1, #25
 800089c:	201a      	movs	r0, #26
 800089e:	f000 faa5 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (proud[0], &Font_11x18, ((~pointer_p1 & 0x80)>>4));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	7818      	ldrb	r0, [r3, #0]
 80008a6:	4b57      	ldr	r3, [pc, #348]	; (8000a04 <main+0x23c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	111b      	asrs	r3, r3, #4
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	4953      	ldr	r1, [pc, #332]	; (8000a08 <main+0x240>)
 80008ba:	f000 faad 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (37,25);
 80008be:	2119      	movs	r1, #25
 80008c0:	2025      	movs	r0, #37	; 0x25
 80008c2:	f000 fa93 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (proud[1], &Font_11x18, ((~pointer_p1 & 0x40)>>5));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	7818      	ldrb	r0, [r3, #0]
 80008cc:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <main+0x23c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	43db      	mvns	r3, r3
 80008d2:	115b      	asrs	r3, r3, #5
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	461a      	mov	r2, r3
 80008de:	494a      	ldr	r1, [pc, #296]	; (8000a08 <main+0x240>)
 80008e0:	f000 fa9a 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (48,25);
 80008e4:	2119      	movs	r1, #25
 80008e6:	2030      	movs	r0, #48	; 0x30
 80008e8:	f000 fa80 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 80008ec:	2201      	movs	r2, #1
 80008ee:	4946      	ldr	r1, [pc, #280]	; (8000a08 <main+0x240>)
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f000 fa91 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (59,25);
 80008f6:	2119      	movs	r1, #25
 80008f8:	203b      	movs	r0, #59	; 0x3b
 80008fa:	f000 fa77 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (proud[2], &Font_11x18, ((~pointer_p1 & 0x20)>>6));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3302      	adds	r3, #2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2200      	movs	r2, #0
 8000906:	4940      	ldr	r1, [pc, #256]	; (8000a08 <main+0x240>)
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fa85 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (70,25);
 800090e:	2119      	movs	r1, #25
 8000910:	2046      	movs	r0, #70	; 0x46
 8000912:	f000 fa6b 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc (proud[3], &Font_11x18, ((~pointer_p1 & 0x10)>>7));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	3303      	adds	r3, #3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2200      	movs	r2, #0
 800091e:	493a      	ldr	r1, [pc, #232]	; (8000a08 <main+0x240>)
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fa79 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_GotoXY (107,25);
 8000926:	2119      	movs	r1, #25
 8000928:	206b      	movs	r0, #107	; 0x6b
 800092a:	f000 fa5f 	bl	8000dec <SSD1306_GotoXY>
	  SSD1306_Putc('A', &Font_11x18, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	4935      	ldr	r1, [pc, #212]	; (8000a08 <main+0x240>)
 8000932:	2041      	movs	r0, #65	; 0x41
 8000934:	f000 fa70 	bl	8000e18 <SSD1306_Putc>
	  SSD1306_DrawLine(11, 45, 32, 45, 1);
 8000938:	2301      	movs	r3, #1
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	232d      	movs	r3, #45	; 0x2d
 800093e:	2220      	movs	r2, #32
 8000940:	212d      	movs	r1, #45	; 0x2d
 8000942:	200b      	movs	r0, #11
 8000944:	f000 fae8 	bl	8000f18 <SSD1306_DrawLine>
	  SSD1306_DrawLine(10, 46, 10, 62, 1);
 8000948:	2301      	movs	r3, #1
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	233e      	movs	r3, #62	; 0x3e
 800094e:	220a      	movs	r2, #10
 8000950:	212e      	movs	r1, #46	; 0x2e
 8000952:	200a      	movs	r0, #10
 8000954:	f000 fae0 	bl	8000f18 <SSD1306_DrawLine>
	  SSD1306_DrawLine(11, 62, 32, 62, 1);
 8000958:	2301      	movs	r3, #1
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	233e      	movs	r3, #62	; 0x3e
 800095e:	2220      	movs	r2, #32
 8000960:	213e      	movs	r1, #62	; 0x3e
 8000962:	200b      	movs	r0, #11
 8000964:	f000 fad8 	bl	8000f18 <SSD1306_DrawLine>
	  SSD1306_DrawLine(33, 46, 33, 62, 1);
 8000968:	2301      	movs	r3, #1
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	233e      	movs	r3, #62	; 0x3e
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	212e      	movs	r1, #46	; 0x2e
 8000972:	2021      	movs	r0, #33	; 0x21
 8000974:	f000 fad0 	bl	8000f18 <SSD1306_DrawLine>
	  SSD1306_UpdateScreen(); // update screen
 8000978:	f000 f994 	bl	8000ca4 <SSD1306_UpdateScreen>
	  y += 0.05 ;
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <main+0x238>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fdfd 	bl	8000580 <__aeabi_f2d>
 8000986:	a31a      	add	r3, pc, #104	; (adr r3, 80009f0 <main+0x228>)
 8000988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800098c:	f7ff fc9a 	bl	80002c4 <__adddf3>
 8000990:	4602      	mov	r2, r0
 8000992:	460b      	mov	r3, r1
 8000994:	4610      	mov	r0, r2
 8000996:	4619      	mov	r1, r3
 8000998:	f7ff fe4a 	bl	8000630 <__aeabi_d2f>
 800099c:	4603      	mov	r3, r0
 800099e:	4a18      	ldr	r2, [pc, #96]	; (8000a00 <main+0x238>)
 80009a0:	6013      	str	r3, [r2, #0]
	  x += 0.025;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <main+0x244>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fdea 	bl	8000580 <__aeabi_f2d>
 80009ac:	a312      	add	r3, pc, #72	; (adr r3, 80009f8 <main+0x230>)
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	f7ff fc87 	bl	80002c4 <__adddf3>
 80009b6:	4602      	mov	r2, r0
 80009b8:	460b      	mov	r3, r1
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	f7ff fe37 	bl	8000630 <__aeabi_d2f>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <main+0x244>)
 80009c6:	6013      	str	r3, [r2, #0]
	  pointer_p1 *= 2;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <main+0x23c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <main+0x23c>)
 80009d2:	701a      	strb	r2, [r3, #0]
	  if(pointer_p1 == 0)
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <main+0x23c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <main+0x21a>
	  {
		  pointer_p1 = 1;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <main+0x23c>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f000 fd3a 	bl	800145c <HAL_Delay>
  {
 80009e8:	e6fb      	b.n	80007e2 <main+0x1a>
 80009ea:	bf00      	nop
 80009ec:	f3af 8000 	nop.w
 80009f0:	9999999a 	.word	0x9999999a
 80009f4:	3fa99999 	.word	0x3fa99999
 80009f8:	9999999a 	.word	0x9999999a
 80009fc:	3f999999 	.word	0x3f999999
 8000a00:	20000034 	.word	0x20000034
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000038 	.word	0x20000038

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	2228      	movs	r2, #40	; 0x28
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 f964 	bl	8002cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a36:	2301      	movs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fd0c 	bl	8002464 <HAL_RCC_OscConfig>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a52:	f000 f85d 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a56:	230f      	movs	r3, #15
 8000a58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 ff78 	bl	8002964 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f849 	bl	8000b10 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3740      	adds	r7, #64	; 0x40
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	; (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f000 ff55 	bl	8001974 <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 f81e 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000448 	.word	0x20000448
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00061a80 	.word	0x00061a80

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_GPIO_Init+0x28>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <MX_GPIO_Init+0x28>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6193      	str	r3, [r2, #24]
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <MX_GPIO_Init+0x28>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b22:	f000 fafb 	bl	800111c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000b26:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2178      	movs	r1, #120	; 0x78
 8000b2e:	485b      	ldr	r0, [pc, #364]	; (8000c9c <SSD1306_Init+0x180>)
 8000b30:	f001 f962 	bl	8001df8 <HAL_I2C_IsDeviceReady>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e0a9      	b.n	8000c92 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000b3e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b44:	e002      	b.n	8000b4c <SSD1306_Init+0x30>
		p--;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f9      	bne.n	8000b46 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000b52:	22ae      	movs	r2, #174	; 0xae
 8000b54:	2100      	movs	r1, #0
 8000b56:	2078      	movs	r0, #120	; 0x78
 8000b58:	f000 fb3c 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2078      	movs	r0, #120	; 0x78
 8000b62:	f000 fb37 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000b66:	2210      	movs	r2, #16
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2078      	movs	r0, #120	; 0x78
 8000b6c:	f000 fb32 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b70:	22b0      	movs	r2, #176	; 0xb0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2078      	movs	r0, #120	; 0x78
 8000b76:	f000 fb2d 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000b7a:	22c8      	movs	r2, #200	; 0xc8
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 fb28 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	; 0x78
 8000b8a:	f000 fb23 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000b8e:	2210      	movs	r2, #16
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f000 fb1e 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000b98:	2240      	movs	r2, #64	; 0x40
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f000 fb19 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000ba2:	2281      	movs	r2, #129	; 0x81
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 fb14 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000bac:	22ff      	movs	r2, #255	; 0xff
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 fb0f 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000bb6:	22a1      	movs	r2, #161	; 0xa1
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	; 0x78
 8000bbc:	f000 fb0a 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000bc0:	22a6      	movs	r2, #166	; 0xa6
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f000 fb05 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000bca:	22a8      	movs	r2, #168	; 0xa8
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 fb00 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000bd4:	223f      	movs	r2, #63	; 0x3f
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 fafb 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000bde:	22a4      	movs	r2, #164	; 0xa4
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 faf6 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000be8:	22d3      	movs	r2, #211	; 0xd3
 8000bea:	2100      	movs	r1, #0
 8000bec:	2078      	movs	r0, #120	; 0x78
 8000bee:	f000 faf1 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2078      	movs	r0, #120	; 0x78
 8000bf8:	f000 faec 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bfc:	22d5      	movs	r2, #213	; 0xd5
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2078      	movs	r0, #120	; 0x78
 8000c02:	f000 fae7 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c06:	22f0      	movs	r2, #240	; 0xf0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2078      	movs	r0, #120	; 0x78
 8000c0c:	f000 fae2 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c10:	22d9      	movs	r2, #217	; 0xd9
 8000c12:	2100      	movs	r1, #0
 8000c14:	2078      	movs	r0, #120	; 0x78
 8000c16:	f000 fadd 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c1a:	2222      	movs	r2, #34	; 0x22
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2078      	movs	r0, #120	; 0x78
 8000c20:	f000 fad8 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c24:	22da      	movs	r2, #218	; 0xda
 8000c26:	2100      	movs	r1, #0
 8000c28:	2078      	movs	r0, #120	; 0x78
 8000c2a:	f000 fad3 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c2e:	2212      	movs	r2, #18
 8000c30:	2100      	movs	r1, #0
 8000c32:	2078      	movs	r0, #120	; 0x78
 8000c34:	f000 face 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c38:	22db      	movs	r2, #219	; 0xdb
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2078      	movs	r0, #120	; 0x78
 8000c3e:	f000 fac9 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	2078      	movs	r0, #120	; 0x78
 8000c48:	f000 fac4 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000c4c:	228d      	movs	r2, #141	; 0x8d
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2078      	movs	r0, #120	; 0x78
 8000c52:	f000 fabf 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000c56:	2214      	movs	r2, #20
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2078      	movs	r0, #120	; 0x78
 8000c5c:	f000 faba 	bl	80011d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000c60:	22af      	movs	r2, #175	; 0xaf
 8000c62:	2100      	movs	r1, #0
 8000c64:	2078      	movs	r0, #120	; 0x78
 8000c66:	f000 fab5 	bl	80011d4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000c6a:	222e      	movs	r2, #46	; 0x2e
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f000 fab0 	bl	80011d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f843 	bl	8000d00 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000c7a:	f000 f813 	bl	8000ca4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SSD1306_Init+0x184>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SSD1306_Init+0x184>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SSD1306_Init+0x184>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000448 	.word	0x20000448
 8000ca0:	20000440 	.word	0x20000440

08000ca4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	e01d      	b.n	8000cec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	3b50      	subs	r3, #80	; 0x50
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2078      	movs	r0, #120	; 0x78
 8000cbc:	f000 fa8a 	bl	80011d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2078      	movs	r0, #120	; 0x78
 8000cc6:	f000 fa85 	bl	80011d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000cca:	2210      	movs	r2, #16
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2078      	movs	r0, #120	; 0x78
 8000cd0:	f000 fa80 	bl	80011d4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	01db      	lsls	r3, r3, #7
 8000cd8:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <SSD1306_UpdateScreen+0x58>)
 8000cda:	441a      	add	r2, r3
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	2078      	movs	r0, #120	; 0x78
 8000ce2:	f000 fa2f 	bl	8001144 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d9de      	bls.n	8000cb0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000040 	.word	0x20000040

08000d00 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d101      	bne.n	8000d14 <SSD1306_Fill+0x14>
 8000d10:	2300      	movs	r3, #0
 8000d12:	e000      	b.n	8000d16 <SSD1306_Fill+0x16>
 8000d14:	23ff      	movs	r3, #255	; 0xff
 8000d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <SSD1306_Fill+0x2c>)
 8000d1e:	f001 ffe5 	bl	8002cec <memset>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000040 	.word	0x20000040

08000d30 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	70fb      	strb	r3, [r7, #3]
	if (
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	2b7f      	cmp	r3, #127	; 0x7f
 8000d46:	d848      	bhi.n	8000dda <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d4c:	d845      	bhi.n	8000dda <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <SSD1306_DrawPixel+0xb4>)
 8000d50:	791b      	ldrb	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d11a      	bne.n	8000da0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d6a:	88fa      	ldrh	r2, [r7, #6]
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	b298      	uxth	r0, r3
 8000d72:	4603      	mov	r3, r0
 8000d74:	01db      	lsls	r3, r3, #7
 8000d76:	4413      	add	r3, r2
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <SSD1306_DrawPixel+0xb8>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	b25a      	sxtb	r2, r3
 8000d7e:	88bb      	ldrh	r3, [r7, #4]
 8000d80:	f003 0307 	and.w	r3, r3, #7
 8000d84:	2101      	movs	r1, #1
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	b259      	sxtb	r1, r3
 8000d90:	88fa      	ldrh	r2, [r7, #6]
 8000d92:	4603      	mov	r3, r0
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	4413      	add	r3, r2
 8000d98:	b2c9      	uxtb	r1, r1
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <SSD1306_DrawPixel+0xb8>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
 8000d9e:	e01d      	b.n	8000ddc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b298      	uxth	r0, r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	01db      	lsls	r3, r3, #7
 8000dac:	4413      	add	r3, r2
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <SSD1306_DrawPixel+0xb8>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	88bb      	ldrh	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	b259      	sxtb	r1, r3
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	4603      	mov	r3, r0
 8000dce:	01db      	lsls	r3, r3, #7
 8000dd0:	4413      	add	r3, r2
 8000dd2:	b2c9      	uxtb	r1, r1
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <SSD1306_DrawPixel+0xb8>)
 8000dd6:	54d1      	strb	r1, [r2, r3]
 8000dd8:	e000      	b.n	8000ddc <SSD1306_DrawPixel+0xac>
		return;
 8000dda:	bf00      	nop
	}
}
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	20000440 	.word	0x20000440
 8000de8:	20000040 	.word	0x20000040

08000dec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000dfc:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SSD1306_GotoXY+0x28>)
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <SSD1306_GotoXY+0x28>)
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	8053      	strh	r3, [r2, #2]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000440 	.word	0x20000440

08000e18 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
	if (
 8000e34:	2b7f      	cmp	r3, #127	; 0x7f
 8000e36:	dc07      	bgt.n	8000e48 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000e3a:	885b      	ldrh	r3, [r3, #2]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e44:	2b3f      	cmp	r3, #63	; 0x3f
 8000e46:	dd01      	ble.n	8000e4c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e05e      	b.n	8000f0a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e04b      	b.n	8000eea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	3b20      	subs	r3, #32
 8000e5a:	6839      	ldr	r1, [r7, #0]
 8000e5c:	7849      	ldrb	r1, [r1, #1]
 8000e5e:	fb01 f303 	mul.w	r3, r1, r3
 8000e62:	4619      	mov	r1, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	e030      	b.n	8000ed8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d010      	beq.n	8000ea8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000e88:	881a      	ldrh	r2, [r3, #0]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	b298      	uxth	r0, r3
 8000e92:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000e94:	885a      	ldrh	r2, [r3, #2]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	79ba      	ldrb	r2, [r7, #6]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff ff45 	bl	8000d30 <SSD1306_DrawPixel>
 8000ea6:	e014      	b.n	8000ed2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000eaa:	881a      	ldrh	r2, [r3, #0]
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b298      	uxth	r0, r3
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000eb6:	885a      	ldrh	r2, [r3, #2]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b299      	uxth	r1, r3
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	bf0c      	ite	eq
 8000ec6:	2301      	moveq	r3, #1
 8000ec8:	2300      	movne	r3, #0
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f7ff ff2f 	bl	8000d30 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d3c8      	bcc.n	8000e76 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d3ad      	bcc.n	8000e52 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	4413      	add	r3, r2
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SSD1306_Putc+0xfc>)
 8000f06:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000440 	.word	0x20000440

08000f18 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4604      	mov	r4, r0
 8000f20:	4608      	mov	r0, r1
 8000f22:	4611      	mov	r1, r2
 8000f24:	461a      	mov	r2, r3
 8000f26:	4623      	mov	r3, r4
 8000f28:	80fb      	strh	r3, [r7, #6]
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80bb      	strh	r3, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
 8000f32:	4613      	mov	r3, r2
 8000f34:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3a:	d901      	bls.n	8000f40 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000f3c:	237f      	movs	r3, #127	; 0x7f
 8000f3e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	2b7f      	cmp	r3, #127	; 0x7f
 8000f44:	d901      	bls.n	8000f4a <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000f46:	237f      	movs	r3, #127	; 0x7f
 8000f48:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f4e:	d901      	bls.n	8000f54 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000f50:	233f      	movs	r3, #63	; 0x3f
 8000f52:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	2b3f      	cmp	r3, #63	; 0x3f
 8000f58:	d901      	bls.n	8000f5e <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000f5a:	233f      	movs	r3, #63	; 0x3f
 8000f5c:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000f5e:	88fa      	ldrh	r2, [r7, #6]
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d205      	bcs.n	8000f72 <SSD1306_DrawLine+0x5a>
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	e004      	b.n	8000f7c <SSD1306_DrawLine+0x64>
 8000f72:	88fa      	ldrh	r2, [r7, #6]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000f7e:	88ba      	ldrh	r2, [r7, #4]
 8000f80:	883b      	ldrh	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d205      	bcs.n	8000f92 <SSD1306_DrawLine+0x7a>
 8000f86:	883a      	ldrh	r2, [r7, #0]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	e004      	b.n	8000f9c <SSD1306_DrawLine+0x84>
 8000f92:	88ba      	ldrh	r2, [r7, #4]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d201      	bcs.n	8000faa <SSD1306_DrawLine+0x92>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e001      	b.n	8000fae <SSD1306_DrawLine+0x96>
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000fb0:	88ba      	ldrh	r2, [r7, #4]
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d201      	bcs.n	8000fbc <SSD1306_DrawLine+0xa4>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e001      	b.n	8000fc0 <SSD1306_DrawLine+0xa8>
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000fc2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dd06      	ble.n	8000fdc <SSD1306_DrawLine+0xc4>
 8000fce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fd2:	0fda      	lsrs	r2, r3, #31
 8000fd4:	4413      	add	r3, r2
 8000fd6:	105b      	asrs	r3, r3, #1
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	e006      	b.n	8000fea <SSD1306_DrawLine+0xd2>
 8000fdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fe0:	0fda      	lsrs	r2, r3, #31
 8000fe2:	4413      	add	r3, r2
 8000fe4:	105b      	asrs	r3, r3, #1
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d129      	bne.n	8001048 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000ff4:	883a      	ldrh	r2, [r7, #0]
 8000ff6:	88bb      	ldrh	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d205      	bcs.n	8001008 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000ffc:	883b      	ldrh	r3, [r7, #0]
 8000ffe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001000:	88bb      	ldrh	r3, [r7, #4]
 8001002:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001004:	893b      	ldrh	r3, [r7, #8]
 8001006:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	429a      	cmp	r2, r3
 800100e:	d205      	bcs.n	800101c <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001010:	887b      	ldrh	r3, [r7, #2]
 8001012:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001018:	893b      	ldrh	r3, [r7, #8]
 800101a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	82bb      	strh	r3, [r7, #20]
 8001020:	e00c      	b.n	800103c <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001022:	8ab9      	ldrh	r1, [r7, #20]
 8001024:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fe80 	bl	8000d30 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001030:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001034:	b29b      	uxth	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	82bb      	strh	r3, [r7, #20]
 800103c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001040:	883b      	ldrh	r3, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	dded      	ble.n	8001022 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001046:	e05f      	b.n	8001108 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001048:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d129      	bne.n	80010a4 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001050:	883a      	ldrh	r2, [r7, #0]
 8001052:	88bb      	ldrh	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d205      	bcs.n	8001064 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001058:	883b      	ldrh	r3, [r7, #0]
 800105a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001060:	893b      	ldrh	r3, [r7, #8]
 8001062:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	429a      	cmp	r2, r3
 800106a:	d205      	bcs.n	8001078 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001074:	893b      	ldrh	r3, [r7, #8]
 8001076:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	82bb      	strh	r3, [r7, #20]
 800107c:	e00c      	b.n	8001098 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800107e:	8abb      	ldrh	r3, [r7, #20]
 8001080:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001084:	88b9      	ldrh	r1, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fe52 	bl	8000d30 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800108c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001090:	b29b      	uxth	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	82bb      	strh	r3, [r7, #20]
 8001098:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dded      	ble.n	800107e <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80010a2:	e031      	b.n	8001108 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80010a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010a8:	88b9      	ldrh	r1, [r7, #4]
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fe3f 	bl	8000d30 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80010b2:	88fa      	ldrh	r2, [r7, #6]
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d103      	bne.n	80010c2 <SSD1306_DrawLine+0x1aa>
 80010ba:	88ba      	ldrh	r2, [r7, #4]
 80010bc:	883b      	ldrh	r3, [r7, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d021      	beq.n	8001106 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80010c2:	8afb      	ldrh	r3, [r7, #22]
 80010c4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80010c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010ce:	425b      	negs	r3, r3
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dd08      	ble.n	80010e6 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80010d4:	8afa      	ldrh	r2, [r7, #22]
 80010d6:	8a3b      	ldrh	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80010de:	89fa      	ldrh	r2, [r7, #14]
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	4413      	add	r3, r2
 80010e4:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80010e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dad8      	bge.n	80010a4 <SSD1306_DrawLine+0x18c>
			err += dx;
 80010f2:	8afa      	ldrh	r2, [r7, #22]
 80010f4:	8a7b      	ldrh	r3, [r7, #18]
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80010fc:	89ba      	ldrh	r2, [r7, #12]
 80010fe:	88bb      	ldrh	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001104:	e7ce      	b.n	80010a4 <SSD1306_DrawLine+0x18c>
			break;
 8001106:	bf00      	nop
		} 
	}
}
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fdf4 	bl	8000d00 <SSD1306_Fill>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <ssd1306_I2C_Init+0x24>)
 8001124:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001126:	e002      	b.n	800112e <ssd1306_I2C_Init+0x12>
		p--;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f9      	bne.n	8001128 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	0003d090 	.word	0x0003d090

08001144 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b0c7      	sub	sp, #284	; 0x11c
 8001148:	af02      	add	r7, sp, #8
 800114a:	4604      	mov	r4, r0
 800114c:	4608      	mov	r0, r1
 800114e:	4639      	mov	r1, r7
 8001150:	600a      	str	r2, [r1, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	4622      	mov	r2, r4
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	4602      	mov	r2, r0
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	460a      	mov	r2, r1
 8001164:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	1dba      	adds	r2, r7, #6
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001176:	e010      	b.n	800119a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001178:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800117c:	463a      	mov	r2, r7
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	441a      	add	r2, r3
 8001182:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001186:	3301      	adds	r3, #1
 8001188:	7811      	ldrb	r1, [r2, #0]
 800118a:	f107 020c 	add.w	r2, r7, #12
 800118e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001190:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001194:	3301      	adds	r3, #1
 8001196:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800119a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800119e:	b29b      	uxth	r3, r3
 80011a0:	1d3a      	adds	r2, r7, #4
 80011a2:	8812      	ldrh	r2, [r2, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8e7      	bhi.n	8001178 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80011a8:	1dfb      	adds	r3, r7, #7
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f107 020c 	add.w	r2, r7, #12
 80011ba:	200a      	movs	r0, #10
 80011bc:	9000      	str	r0, [sp, #0]
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <ssd1306_I2C_WriteMulti+0x8c>)
 80011c0:	f000 fd1c 	bl	8001bfc <HAL_I2C_Master_Transmit>
}
 80011c4:	bf00      	nop
 80011c6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000448 	.word	0x20000448

080011d4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	460b      	mov	r3, r1
 80011e0:	71bb      	strb	r3, [r7, #6]
 80011e2:	4613      	mov	r3, r2
 80011e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80011ea:	797b      	ldrb	r3, [r7, #5]
 80011ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	b299      	uxth	r1, r3
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	230a      	movs	r3, #10
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2302      	movs	r3, #2
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <ssd1306_I2C_Write+0x38>)
 80011fe:	f000 fcfd 	bl	8001bfc <HAL_I2C_Master_Transmit>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000448 	.word	0x20000448

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <HAL_MspInit+0x5c>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_MspInit+0x5c>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <HAL_MspInit+0x5c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_MspInit+0x5c>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x60>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_MspInit+0x60>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000

08001274 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_I2C_MspInit+0x70>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d123      	bne.n	80012dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_I2C_MspInit+0x74>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a13      	ldr	r2, [pc, #76]	; (80012e8 <HAL_I2C_MspInit+0x74>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_I2C_MspInit+0x74>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ac:	23c0      	movs	r3, #192	; 0xc0
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	480b      	ldr	r0, [pc, #44]	; (80012ec <HAL_I2C_MspInit+0x78>)
 80012c0:	f000 f9d4 	bl	800166c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_I2C_MspInit+0x74>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_I2C_MspInit+0x74>)
 80012ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ce:	61d3      	str	r3, [r2, #28]
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_I2C_MspInit+0x74>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010c00 	.word	0x40010c00

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001336:	f000 f875 	bl	8001424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}

0800133e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
	...

0800134c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	; (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	; (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001372:	f7ff ffe4 	bl	800133e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001376:	f001 fc7b 	bl	8002c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7ff fa25 	bl	80007c8 <main>
  bx lr
 800137e:	4770      	bx	lr
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001388:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 800138c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001390:	200004a0 	.word	0x200004a0

08001394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC1_2_IRQHandler>
	...

08001398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_Init+0x28>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_Init+0x28>)
 80013a2:	f043 0310 	orr.w	r3, r3, #16
 80013a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 f92b 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f808 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b4:	f7ff ff2c 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x54>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f935 	bl	8001652 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00e      	b.n	8001410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d80a      	bhi.n	800140e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f000 f90b 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_InitTick+0x5c>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	e000      	b.n	8001410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000000c 	.word	0x2000000c
 800141c:	20000014 	.word	0x20000014
 8001420:	20000010 	.word	0x20000010

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x20>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000014 	.word	0x20000014
 8001444:	2000049c 	.word	0x2000049c

08001448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000049c 	.word	0x2000049c

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fff0 	bl	8001448 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffe0 	bl	8001448 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000014 	.word	0x20000014

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff90 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff49 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff5e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff90 	bl	800155c <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5f 	bl	8001508 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffb0 	bl	80015c0 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b08b      	sub	sp, #44	; 0x2c
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e169      	b.n	8001954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001680:	2201      	movs	r2, #1
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	429a      	cmp	r2, r3
 800169a:	f040 8158 	bne.w	800194e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	4a9a      	ldr	r2, [pc, #616]	; (800190c <HAL_GPIO_Init+0x2a0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016a8:	4a98      	ldr	r2, [pc, #608]	; (800190c <HAL_GPIO_Init+0x2a0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d875      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ae:	4a98      	ldr	r2, [pc, #608]	; (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d058      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016b4:	4a96      	ldr	r2, [pc, #600]	; (8001910 <HAL_GPIO_Init+0x2a4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d86f      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016ba:	4a96      	ldr	r2, [pc, #600]	; (8001914 <HAL_GPIO_Init+0x2a8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d052      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016c0:	4a94      	ldr	r2, [pc, #592]	; (8001914 <HAL_GPIO_Init+0x2a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d869      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016c6:	4a94      	ldr	r2, [pc, #592]	; (8001918 <HAL_GPIO_Init+0x2ac>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d04c      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016cc:	4a92      	ldr	r2, [pc, #584]	; (8001918 <HAL_GPIO_Init+0x2ac>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d863      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016d2:	4a92      	ldr	r2, [pc, #584]	; (800191c <HAL_GPIO_Init+0x2b0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d046      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
 80016d8:	4a90      	ldr	r2, [pc, #576]	; (800191c <HAL_GPIO_Init+0x2b0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d85d      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d82a      	bhi.n	8001738 <HAL_GPIO_Init+0xcc>
 80016e2:	2b12      	cmp	r3, #18
 80016e4:	d859      	bhi.n	800179a <HAL_GPIO_Init+0x12e>
 80016e6:	a201      	add	r2, pc, #4	; (adr r2, 80016ec <HAL_GPIO_Init+0x80>)
 80016e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001741 	.word	0x08001741
 80016f4:	08001753 	.word	0x08001753
 80016f8:	08001795 	.word	0x08001795
 80016fc:	0800179b 	.word	0x0800179b
 8001700:	0800179b 	.word	0x0800179b
 8001704:	0800179b 	.word	0x0800179b
 8001708:	0800179b 	.word	0x0800179b
 800170c:	0800179b 	.word	0x0800179b
 8001710:	0800179b 	.word	0x0800179b
 8001714:	0800179b 	.word	0x0800179b
 8001718:	0800179b 	.word	0x0800179b
 800171c:	0800179b 	.word	0x0800179b
 8001720:	0800179b 	.word	0x0800179b
 8001724:	0800179b 	.word	0x0800179b
 8001728:	0800179b 	.word	0x0800179b
 800172c:	0800179b 	.word	0x0800179b
 8001730:	08001749 	.word	0x08001749
 8001734:	0800175d 	.word	0x0800175d
 8001738:	4a79      	ldr	r2, [pc, #484]	; (8001920 <HAL_GPIO_Init+0x2b4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173e:	e02c      	b.n	800179a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e029      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	3304      	adds	r3, #4
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e024      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	3308      	adds	r3, #8
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e01f      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	330c      	adds	r3, #12
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e01a      	b.n	800179c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176e:	2304      	movs	r3, #4
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e013      	b.n	800179c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800177c:	2308      	movs	r3, #8
 800177e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	611a      	str	r2, [r3, #16]
          break;
 8001786:	e009      	b.n	800179c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	615a      	str	r2, [r3, #20]
          break;
 8001792:	e003      	b.n	800179c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
          break;
 8001798:	e000      	b.n	800179c <HAL_GPIO_Init+0x130>
          break;
 800179a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2bff      	cmp	r3, #255	; 0xff
 80017a0:	d801      	bhi.n	80017a6 <HAL_GPIO_Init+0x13a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	e001      	b.n	80017aa <HAL_GPIO_Init+0x13e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d802      	bhi.n	80017b8 <HAL_GPIO_Init+0x14c>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	e002      	b.n	80017be <HAL_GPIO_Init+0x152>
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	3b08      	subs	r3, #8
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	210f      	movs	r1, #15
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	431a      	orrs	r2, r3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80b1 	beq.w	800194e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001804:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3302      	adds	r3, #2
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <HAL_GPIO_Init+0x2c0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3e      	ldr	r2, [pc, #248]	; (8001934 <HAL_GPIO_Init+0x2c8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3d      	ldr	r2, [pc, #244]	; (8001938 <HAL_GPIO_Init+0x2cc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e0>
 8001848:	2303      	movs	r3, #3
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 800184c:	2304      	movs	r3, #4
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1ee>
 8001858:	2300      	movs	r3, #0
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800186a:	492f      	ldr	r1, [pc, #188]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	492c      	ldr	r1, [pc, #176]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	43db      	mvns	r3, r3
 800189a:	4928      	ldr	r1, [pc, #160]	; (800193c <HAL_GPIO_Init+0x2d0>)
 800189c:	4013      	ands	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ac:	4b23      	ldr	r3, [pc, #140]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4922      	ldr	r1, [pc, #136]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	491e      	ldr	r1, [pc, #120]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4918      	ldr	r1, [pc, #96]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	4914      	ldr	r1, [pc, #80]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d021      	beq.n	8001940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_GPIO_Init+0x2d0>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_GPIO_Init+0x2d0>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
 8001908:	e021      	b.n	800194e <HAL_GPIO_Init+0x2e2>
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40011400 	.word	0x40011400
 800193c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_GPIO_Init+0x304>)
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	43db      	mvns	r3, r3
 8001948:	4909      	ldr	r1, [pc, #36]	; (8001970 <HAL_GPIO_Init+0x304>)
 800194a:	4013      	ands	r3, r2
 800194c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	f47f ae8e 	bne.w	8001680 <HAL_GPIO_Init+0x14>
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	372c      	adds	r7, #44	; 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e12b      	b.n	8001bde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff fc6a 	bl	8001274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2224      	movs	r2, #36	; 0x24
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019d8:	f001 f918 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 80019dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4a81      	ldr	r2, [pc, #516]	; (8001be8 <HAL_I2C_Init+0x274>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d807      	bhi.n	80019f8 <HAL_I2C_Init+0x84>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4a80      	ldr	r2, [pc, #512]	; (8001bec <HAL_I2C_Init+0x278>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	bf94      	ite	ls
 80019f0:	2301      	movls	r3, #1
 80019f2:	2300      	movhi	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e006      	b.n	8001a06 <HAL_I2C_Init+0x92>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4a7d      	ldr	r2, [pc, #500]	; (8001bf0 <HAL_I2C_Init+0x27c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf94      	ite	ls
 8001a00:	2301      	movls	r3, #1
 8001a02:	2300      	movhi	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0e7      	b.n	8001bde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a78      	ldr	r2, [pc, #480]	; (8001bf4 <HAL_I2C_Init+0x280>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	4a6a      	ldr	r2, [pc, #424]	; (8001be8 <HAL_I2C_Init+0x274>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d802      	bhi.n	8001a48 <HAL_I2C_Init+0xd4>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	e009      	b.n	8001a5c <HAL_I2C_Init+0xe8>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a69      	ldr	r2, [pc, #420]	; (8001bf8 <HAL_I2C_Init+0x284>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	495c      	ldr	r1, [pc, #368]	; (8001be8 <HAL_I2C_Init+0x274>)
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d819      	bhi.n	8001ab0 <HAL_I2C_Init+0x13c>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e59      	subs	r1, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a8a:	1c59      	adds	r1, r3, #1
 8001a8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a90:	400b      	ands	r3, r1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00a      	beq.n	8001aac <HAL_I2C_Init+0x138>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e59      	subs	r1, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aaa:	e051      	b.n	8001b50 <HAL_I2C_Init+0x1dc>
 8001aac:	2304      	movs	r3, #4
 8001aae:	e04f      	b.n	8001b50 <HAL_I2C_Init+0x1dc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d111      	bne.n	8001adc <HAL_I2C_Init+0x168>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1e58      	subs	r0, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	440b      	add	r3, r1
 8001ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	e012      	b.n	8001b02 <HAL_I2C_Init+0x18e>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e58      	subs	r0, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6859      	ldr	r1, [r3, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	0099      	lsls	r1, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf0c      	ite	eq
 8001afc:	2301      	moveq	r3, #1
 8001afe:	2300      	movne	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Init+0x196>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e022      	b.n	8001b50 <HAL_I2C_Init+0x1dc>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10e      	bne.n	8001b30 <HAL_I2C_Init+0x1bc>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1e58      	subs	r0, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	440b      	add	r3, r1
 8001b20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b24:	3301      	adds	r3, #1
 8001b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	e00f      	b.n	8001b50 <HAL_I2C_Init+0x1dc>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1e58      	subs	r0, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	0099      	lsls	r1, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	6809      	ldr	r1, [r1, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6911      	ldr	r1, [r2, #16]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68d2      	ldr	r2, [r2, #12]
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	000186a0 	.word	0x000186a0
 8001bec:	001e847f 	.word	0x001e847f
 8001bf0:	003d08ff 	.word	0x003d08ff
 8001bf4:	431bde83 	.word	0x431bde83
 8001bf8:	10624dd3 	.word	0x10624dd3

08001bfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	817b      	strh	r3, [r7, #10]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fc1a 	bl	8001448 <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	f040 80e0 	bne.w	8001de4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2319      	movs	r3, #25
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4970      	ldr	r1, [pc, #448]	; (8001df0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 fa92 	bl	8002158 <I2C_WaitOnFlagUntilTimeout>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e0d3      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2C_Master_Transmit+0x50>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e0cc      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1ea>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d007      	beq.n	8001c72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0201 	orr.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2221      	movs	r2, #33	; 0x21
 8001c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	893a      	ldrh	r2, [r7, #8]
 8001ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cb4:	8979      	ldrh	r1, [r7, #10]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	6a3a      	ldr	r2, [r7, #32]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f9ca 	bl	8002054 <I2C_MasterRequestWrite>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e08d      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ce0:	e066      	b.n	8001db0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	6a39      	ldr	r1, [r7, #32]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fb0c 	bl	8002304 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00d      	beq.n	8001d0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d107      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06b      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d11b      	bne.n	8001d84 <HAL_I2C_Master_Transmit+0x188>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d017      	beq.n	8001d84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	6a39      	ldr	r1, [r7, #32]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fafc 	bl	8002386 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d107      	bne.n	8001dac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001daa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e01a      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d194      	bne.n	8001ce2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	00100002 	.word	0x00100002
 8001df4:	ffff0000 	.word	0xffff0000

08001df8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	460b      	mov	r3, r1
 8001e06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff fb1e 	bl	8001448 <HAL_GetTick>
 8001e0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	f040 8111 	bne.w	8002042 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2319      	movs	r3, #25
 8001e26:	2201      	movs	r2, #1
 8001e28:	4988      	ldr	r1, [pc, #544]	; (800204c <HAL_I2C_IsDeviceReady+0x254>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f994 	bl	8002158 <I2C_WaitOnFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
 8001e38:	e104      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_I2C_IsDeviceReady+0x50>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e0fd      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d007      	beq.n	8001e6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2224      	movs	r2, #36	; 0x24
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4a70      	ldr	r2, [pc, #448]	; (8002050 <HAL_I2C_IsDeviceReady+0x258>)
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f952 	bl	8002158 <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec8:	d103      	bne.n	8001ed2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e0b6      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ed6:	897b      	ldrh	r3, [r7, #10]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ee4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff faaf 	bl	8001448 <HAL_GetTick>
 8001eea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f10:	bf0c      	ite	eq
 8001f12:	2301      	moveq	r3, #1
 8001f14:	2300      	movne	r3, #0
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f1a:	e025      	b.n	8001f68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f1c:	f7ff fa94 	bl	8001448 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d302      	bcc.n	8001f32 <HAL_I2C_IsDeviceReady+0x13a>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d103      	bne.n	8001f3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22a0      	movs	r2, #160	; 0xa0
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2ba0      	cmp	r3, #160	; 0xa0
 8001f72:	d005      	beq.n	8001f80 <HAL_I2C_IsDeviceReady+0x188>
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <HAL_I2C_IsDeviceReady+0x188>
 8001f7a:	7dbb      	ldrb	r3, [r7, #22]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0cd      	beq.n	8001f1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d129      	bne.n	8001fea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2319      	movs	r3, #25
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4921      	ldr	r1, [pc, #132]	; (800204c <HAL_I2C_IsDeviceReady+0x254>)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f8c6 	bl	8002158 <I2C_WaitOnFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e036      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e02c      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002002:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	2319      	movs	r3, #25
 800200a:	2201      	movs	r2, #1
 800200c:	490f      	ldr	r1, [pc, #60]	; (800204c <HAL_I2C_IsDeviceReady+0x254>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f8a2 	bl	8002158 <I2C_WaitOnFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e012      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	3301      	adds	r3, #1
 8002022:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	f4ff af32 	bcc.w	8001e92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002042:	2302      	movs	r3, #2
  }
}
 8002044:	4618      	mov	r0, r3
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	00100002 	.word	0x00100002
 8002050:	ffff0000 	.word	0xffff0000

08002054 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	460b      	mov	r3, r1
 8002062:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d006      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d003      	beq.n	800207e <I2C_MasterRequestWrite+0x2a>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800207c:	d108      	bne.n	8002090 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e00b      	b.n	80020a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	2b12      	cmp	r3, #18
 8002096:	d107      	bne.n	80020a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 f84f 	bl	8002158 <I2C_WaitOnFlagUntilTimeout>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ce:	d103      	bne.n	80020d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e035      	b.n	8002148 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020e4:	d108      	bne.n	80020f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020e6:	897b      	ldrh	r3, [r7, #10]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e01b      	b.n	8002130 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	11db      	asrs	r3, r3, #7
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f003 0306 	and.w	r3, r3, #6
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f063 030f 	orn	r3, r3, #15
 8002108:	b2da      	uxtb	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <I2C_MasterRequestWrite+0xfc>)
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f875 	bl	8002206 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e010      	b.n	8002148 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002126:	897b      	ldrh	r3, [r7, #10]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4907      	ldr	r1, [pc, #28]	; (8002154 <I2C_MasterRequestWrite+0x100>)
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f865 	bl	8002206 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	00010008 	.word	0x00010008
 8002154:	00010002 	.word	0x00010002

08002158 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002168:	e025      	b.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d021      	beq.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002172:	f7ff f969 	bl	8001448 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d302      	bcc.n	8002188 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d116      	bne.n	80021b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f043 0220 	orr.w	r2, r3, #32
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e023      	b.n	80021fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10d      	bne.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4013      	ands	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf0c      	ite	eq
 80021d2:	2301      	moveq	r3, #1
 80021d4:	2300      	movne	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	e00c      	b.n	80021f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4013      	ands	r3, r2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d0b6      	beq.n	800216a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002214:	e051      	b.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002224:	d123      	bne.n	800226e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002234:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800223e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0204 	orr.w	r2, r3, #4
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e046      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d021      	beq.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7ff f8e7 	bl	8001448 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d116      	bne.n	80022ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2220      	movs	r2, #32
 8002296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e020      	b.n	80022fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10c      	bne.n	80022de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e00b      	b.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	43da      	mvns	r2, r3
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4013      	ands	r3, r2
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d18d      	bne.n	8002216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002310:	e02d      	b.n	800236e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f878 	bl	8002408 <I2C_IsAcknowledgeFailed>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e02d      	b.n	800237e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d021      	beq.n	800236e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7ff f88d 	bl	8001448 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d116      	bne.n	800236e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0220 	orr.w	r2, r3, #32
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e007      	b.n	800237e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d1ca      	bne.n	8002312 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002392:	e02d      	b.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f837 	bl	8002408 <I2C_IsAcknowledgeFailed>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e02d      	b.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d021      	beq.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ac:	f7ff f84c 	bl	8001448 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d302      	bcc.n	80023c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d116      	bne.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e007      	b.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d1ca      	bne.n	8002394 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241e:	d11b      	bne.n	8002458 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002428:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e26c      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8087 	beq.w	8002592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b04      	cmp	r3, #4
 800248e:	d00c      	beq.n	80024aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002490:	4b8f      	ldr	r3, [pc, #572]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d112      	bne.n	80024c2 <HAL_RCC_OscConfig+0x5e>
 800249c:	4b8c      	ldr	r3, [pc, #560]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a8:	d10b      	bne.n	80024c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024aa:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d06c      	beq.n	8002590 <HAL_RCC_OscConfig+0x12c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d168      	bne.n	8002590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e246      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x76>
 80024cc:	4b80      	ldr	r3, [pc, #512]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a7f      	ldr	r2, [pc, #508]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e02e      	b.n	8002538 <HAL_RCC_OscConfig+0xd4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x98>
 80024e2:	4b7b      	ldr	r3, [pc, #492]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7a      	ldr	r2, [pc, #488]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b78      	ldr	r3, [pc, #480]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a77      	ldr	r2, [pc, #476]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0xd4>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0xbc>
 8002506:	4b72      	ldr	r3, [pc, #456]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a71      	ldr	r2, [pc, #452]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xd4>
 8002520:	4b6b      	ldr	r3, [pc, #428]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6a      	ldr	r2, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a67      	ldr	r2, [pc, #412]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe ff82 	bl	8001448 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7fe ff7e 	bl	8001448 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1fa      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xe4>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe ff6e 	bl	8001448 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe ff6a 	bl	8001448 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1e6      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x10c>
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d063      	beq.n	8002666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259e:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025aa:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x18c>
 80025b6:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d116      	bne.n	80025f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x176>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1ba      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4939      	ldr	r1, [pc, #228]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	e03a      	b.n	8002666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f8:	4b36      	ldr	r3, [pc, #216]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe ff23 	bl	8001448 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7fe ff1f 	bl	8001448 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e19b      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4927      	ldr	r1, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <HAL_RCC_OscConfig+0x270>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe ff02 	bl	8001448 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002648:	f7fe fefe 	bl	8001448 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e17a      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03a      	beq.n	80026e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d019      	beq.n	80026ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fe fee2 	bl	8001448 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fede 	bl	8001448 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e15a      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 fac4 	bl	8002c34 <RCC_Delay>
 80026ac:	e01c      	b.n	80026e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_RCC_OscConfig+0x274>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7fe fec8 	bl	8001448 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ba:	e00f      	b.n	80026dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fec4 	bl	8001448 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d908      	bls.n	80026dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e140      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	42420000 	.word	0x42420000
 80026d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b9e      	ldr	r3, [pc, #632]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e9      	bne.n	80026bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a6 	beq.w	8002842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b97      	ldr	r3, [pc, #604]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b94      	ldr	r3, [pc, #592]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a93      	ldr	r2, [pc, #588]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b91      	ldr	r3, [pc, #580]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b8e      	ldr	r3, [pc, #568]	; (800295c <HAL_RCC_OscConfig+0x4f8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <HAL_RCC_OscConfig+0x4f8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a8a      	ldr	r2, [pc, #552]	; (800295c <HAL_RCC_OscConfig+0x4f8>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273a:	f7fe fe85 	bl	8001448 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7fe fe81 	bl	8001448 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0fd      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b81      	ldr	r3, [pc, #516]	; (800295c <HAL_RCC_OscConfig+0x4f8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x312>
 8002768:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a7a      	ldr	r2, [pc, #488]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	e02d      	b.n	80027d2 <HAL_RCC_OscConfig+0x36e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x334>
 800277e:	4b76      	ldr	r3, [pc, #472]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a75      	ldr	r2, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6213      	str	r3, [r2, #32]
 800278a:	4b73      	ldr	r3, [pc, #460]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a72      	ldr	r2, [pc, #456]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	e01c      	b.n	80027d2 <HAL_RCC_OscConfig+0x36e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x356>
 80027a0:	4b6d      	ldr	r3, [pc, #436]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a69      	ldr	r2, [pc, #420]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x36e>
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4a66      	ldr	r2, [pc, #408]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6213      	str	r3, [r2, #32]
 80027c6:	4b64      	ldr	r3, [pc, #400]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a63      	ldr	r2, [pc, #396]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fe fe35 	bl	8001448 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe fe31 	bl	8001448 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0ab      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b57      	ldr	r3, [pc, #348]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ee      	beq.n	80027e2 <HAL_RCC_OscConfig+0x37e>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe fe1f 	bl	8001448 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fe1b 	bl	8001448 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e095      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b48      	ldr	r3, [pc, #288]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a47      	ldr	r2, [pc, #284]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8081 	beq.w	800294e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284c:	4b42      	ldr	r3, [pc, #264]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d061      	beq.n	800291c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d146      	bne.n	80028ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_RCC_OscConfig+0x4fc>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe fdef 	bl	8001448 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe fdeb 	bl	8001448 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e067      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002880:	4b35      	ldr	r3, [pc, #212]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002894:	d108      	bne.n	80028a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002896:	4b30      	ldr	r3, [pc, #192]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	492d      	ldr	r1, [pc, #180]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a19      	ldr	r1, [r3, #32]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	430b      	orrs	r3, r1
 80028ba:	4927      	ldr	r1, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_RCC_OscConfig+0x4fc>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fdbf 	bl	8001448 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fdbb 	bl	8001448 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e037      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x46a>
 80028ec:	e02f      	b.n	800294e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_RCC_OscConfig+0x4fc>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe fda8 	bl	8001448 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fda4 	bl	8001448 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e020      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x498>
 800291a:	e018      	b.n	800294e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e013      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	429a      	cmp	r2, r3
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d001      	beq.n	800294e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000
 8002960:	42420060 	.word	0x42420060

08002964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0d0      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d910      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4965      	ldr	r1, [pc, #404]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0b8      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d020      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c0:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a58      	ldr	r2, [pc, #352]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d8:	4b53      	ldr	r3, [pc, #332]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a52      	ldr	r2, [pc, #328]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	494d      	ldr	r1, [pc, #308]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d040      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d107      	bne.n	8002a1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d115      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e07f      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e073      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06b      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4936      	ldr	r1, [pc, #216]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fcf8 	bl	8001448 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fcf4 	bl	8001448 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e053      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d210      	bcs.n	8002ab4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 0207 	bic.w	r2, r3, #7
 8002a9a:	4922      	ldr	r1, [pc, #136]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e032      	b.n	8002b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4916      	ldr	r1, [pc, #88]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	490e      	ldr	r1, [pc, #56]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002af2:	f000 f821 	bl	8002b38 <HAL_RCC_GetSysClockFreq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	490a      	ldr	r1, [pc, #40]	; (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	5ccb      	ldrb	r3, [r1, r3]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x1cc>)
 8002b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1d0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe fc56 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40022000 	.word	0x40022000
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	08003b04 	.word	0x08003b04
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	20000010 	.word	0x20000010

08002b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b38:	b490      	push	{r4, r7}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b40:	1d3c      	adds	r4, r7, #4
 8002b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b48:	f240 2301 	movw	r3, #513	; 0x201
 8002b4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	2300      	movs	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	2300      	movs	r3, #0
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d002      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x40>
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x46>
 8002b76:	e02d      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b78:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7a:	623b      	str	r3, [r7, #32]
      break;
 8002b7c:	e02d      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	0c9b      	lsrs	r3, r3, #18
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c5b      	lsrs	r3, r3, #17
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002baa:	4413      	add	r3, r2
 8002bac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb6:	fb02 f203 	mul.w	r2, r2, r3
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	e004      	b.n	8002bce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	623b      	str	r3, [r7, #32]
      break;
 8002bd2:	e002      	b.n	8002bda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd6:	623b      	str	r3, [r7, #32]
      break;
 8002bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bda:	6a3b      	ldr	r3, [r7, #32]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc90      	pop	{r4, r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	08002d98 	.word	0x08002d98
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	007a1200 	.word	0x007a1200
 8002bf4:	003d0900 	.word	0x003d0900

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b02      	ldr	r3, [pc, #8]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	2000000c 	.word	0x2000000c

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff2 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	08003b14 	.word	0x08003b14

08002c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <RCC_Delay+0x34>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <RCC_Delay+0x38>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0a5b      	lsrs	r3, r3, #9
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c50:	bf00      	nop
  }
  while (Delay --);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e5a      	subs	r2, r3, #1
 8002c56:	60fa      	str	r2, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1f9      	bne.n	8002c50 <RCC_Delay+0x1c>
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	10624dd3 	.word	0x10624dd3

08002c70 <__libc_init_array>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	2600      	movs	r6, #0
 8002c74:	4d0c      	ldr	r5, [pc, #48]	; (8002ca8 <__libc_init_array+0x38>)
 8002c76:	4c0d      	ldr	r4, [pc, #52]	; (8002cac <__libc_init_array+0x3c>)
 8002c78:	1b64      	subs	r4, r4, r5
 8002c7a:	10a4      	asrs	r4, r4, #2
 8002c7c:	42a6      	cmp	r6, r4
 8002c7e:	d109      	bne.n	8002c94 <__libc_init_array+0x24>
 8002c80:	f000 f87e 	bl	8002d80 <_init>
 8002c84:	2600      	movs	r6, #0
 8002c86:	4d0a      	ldr	r5, [pc, #40]	; (8002cb0 <__libc_init_array+0x40>)
 8002c88:	4c0a      	ldr	r4, [pc, #40]	; (8002cb4 <__libc_init_array+0x44>)
 8002c8a:	1b64      	subs	r4, r4, r5
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	42a6      	cmp	r6, r4
 8002c90:	d105      	bne.n	8002c9e <__libc_init_array+0x2e>
 8002c92:	bd70      	pop	{r4, r5, r6, pc}
 8002c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c98:	4798      	blx	r3
 8002c9a:	3601      	adds	r6, #1
 8002c9c:	e7ee      	b.n	8002c7c <__libc_init_array+0xc>
 8002c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca2:	4798      	blx	r3
 8002ca4:	3601      	adds	r6, #1
 8002ca6:	e7f2      	b.n	8002c8e <__libc_init_array+0x1e>
 8002ca8:	08003b44 	.word	0x08003b44
 8002cac:	08003b44 	.word	0x08003b44
 8002cb0:	08003b44 	.word	0x08003b44
 8002cb4:	08003b48 	.word	0x08003b48

08002cb8 <__itoa>:
 8002cb8:	1e93      	subs	r3, r2, #2
 8002cba:	2b22      	cmp	r3, #34	; 0x22
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	d904      	bls.n	8002ccc <__itoa+0x14>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	461c      	mov	r4, r3
 8002cc6:	700b      	strb	r3, [r1, #0]
 8002cc8:	4620      	mov	r0, r4
 8002cca:	bd10      	pop	{r4, pc}
 8002ccc:	2a0a      	cmp	r2, #10
 8002cce:	d109      	bne.n	8002ce4 <__itoa+0x2c>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	da07      	bge.n	8002ce4 <__itoa+0x2c>
 8002cd4:	232d      	movs	r3, #45	; 0x2d
 8002cd6:	700b      	strb	r3, [r1, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4240      	negs	r0, r0
 8002cdc:	4421      	add	r1, r4
 8002cde:	f000 f80d 	bl	8002cfc <__utoa>
 8002ce2:	e7f1      	b.n	8002cc8 <__itoa+0x10>
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	e7f9      	b.n	8002cdc <__itoa+0x24>

08002ce8 <itoa>:
 8002ce8:	f7ff bfe6 	b.w	8002cb8 <__itoa>

08002cec <memset>:
 8002cec:	4603      	mov	r3, r0
 8002cee:	4402      	add	r2, r0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <memset+0xa>
 8002cf4:	4770      	bx	lr
 8002cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfa:	e7f9      	b.n	8002cf0 <memset+0x4>

08002cfc <__utoa>:
 8002cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfe:	b08b      	sub	sp, #44	; 0x2c
 8002d00:	4605      	mov	r5, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	466e      	mov	r6, sp
 8002d06:	4c1d      	ldr	r4, [pc, #116]	; (8002d7c <__utoa+0x80>)
 8002d08:	f104 0c20 	add.w	ip, r4, #32
 8002d0c:	4637      	mov	r7, r6
 8002d0e:	6820      	ldr	r0, [r4, #0]
 8002d10:	6861      	ldr	r1, [r4, #4]
 8002d12:	3408      	adds	r4, #8
 8002d14:	c703      	stmia	r7!, {r0, r1}
 8002d16:	4564      	cmp	r4, ip
 8002d18:	463e      	mov	r6, r7
 8002d1a:	d1f7      	bne.n	8002d0c <__utoa+0x10>
 8002d1c:	7921      	ldrb	r1, [r4, #4]
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	7139      	strb	r1, [r7, #4]
 8002d22:	1e91      	subs	r1, r2, #2
 8002d24:	2922      	cmp	r1, #34	; 0x22
 8002d26:	6038      	str	r0, [r7, #0]
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	d904      	bls.n	8002d38 <__utoa+0x3c>
 8002d2e:	7019      	strb	r1, [r3, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	4618      	mov	r0, r3
 8002d34:	b00b      	add	sp, #44	; 0x2c
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	1e58      	subs	r0, r3, #1
 8002d3a:	4684      	mov	ip, r0
 8002d3c:	fbb5 f7f2 	udiv	r7, r5, r2
 8002d40:	fb02 5617 	mls	r6, r2, r7, r5
 8002d44:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002d48:	4476      	add	r6, lr
 8002d4a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002d4e:	460c      	mov	r4, r1
 8002d50:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002d54:	462e      	mov	r6, r5
 8002d56:	42b2      	cmp	r2, r6
 8002d58:	463d      	mov	r5, r7
 8002d5a:	f101 0101 	add.w	r1, r1, #1
 8002d5e:	d9ed      	bls.n	8002d3c <__utoa+0x40>
 8002d60:	2200      	movs	r2, #0
 8002d62:	545a      	strb	r2, [r3, r1]
 8002d64:	1919      	adds	r1, r3, r4
 8002d66:	1aa5      	subs	r5, r4, r2
 8002d68:	42aa      	cmp	r2, r5
 8002d6a:	dae2      	bge.n	8002d32 <__utoa+0x36>
 8002d6c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002d70:	780e      	ldrb	r6, [r1, #0]
 8002d72:	3201      	adds	r2, #1
 8002d74:	7006      	strb	r6, [r0, #0]
 8002d76:	f801 5901 	strb.w	r5, [r1], #-1
 8002d7a:	e7f4      	b.n	8002d66 <__utoa+0x6a>
 8002d7c:	08003b1c 	.word	0x08003b1c

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
