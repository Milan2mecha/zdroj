
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dbc  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c58  08005c58  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c58  08005c58  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c5c  08005c5c  00015c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  2000001c  08005c7c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08005c7c  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b921  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8e  00000000  00000000  0002b966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017799  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3be  00000000  00000000  000461f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086dd1  00000000  00000000  000525af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000d93d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e84 	.word	0x08004e84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08004e84 	.word	0x08004e84

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2f>:
 8000a54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a5c:	bf24      	itt	cs
 8000a5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a66:	d90d      	bls.n	8000a84 <__aeabi_d2f+0x30>
 8000a68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a88:	d121      	bne.n	8000ace <__aeabi_d2f+0x7a>
 8000a8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a8e:	bfbc      	itt	lt
 8000a90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a94:	4770      	bxlt	lr
 8000a96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a9e:	f1c2 0218 	rsb	r2, r2, #24
 8000aa2:	f1c2 0c20 	rsb	ip, r2, #32
 8000aa6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aaa:	fa20 f002 	lsr.w	r0, r0, r2
 8000aae:	bf18      	it	ne
 8000ab0:	f040 0001 	orrne.w	r0, r0, #1
 8000ab4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000abc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac0:	ea40 000c 	orr.w	r0, r0, ip
 8000ac4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000acc:	e7cc      	b.n	8000a68 <__aeabi_d2f+0x14>
 8000ace:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad2:	d107      	bne.n	8000ae4 <__aeabi_d2f+0x90>
 8000ad4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad8:	bf1e      	ittt	ne
 8000ada:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ade:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae2:	4770      	bxne	lr
 8000ae4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <__aeabi_frsub>:
 8000af4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af8:	e002      	b.n	8000b00 <__addsf3>
 8000afa:	bf00      	nop

08000afc <__aeabi_fsub>:
 8000afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b00 <__addsf3>:
 8000b00:	0042      	lsls	r2, r0, #1
 8000b02:	bf1f      	itttt	ne
 8000b04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b08:	ea92 0f03 	teqne	r2, r3
 8000b0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b14:	d06a      	beq.n	8000bec <__addsf3+0xec>
 8000b16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b1e:	bfc1      	itttt	gt
 8000b20:	18d2      	addgt	r2, r2, r3
 8000b22:	4041      	eorgt	r1, r0
 8000b24:	4048      	eorgt	r0, r1
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	bfb8      	it	lt
 8000b2a:	425b      	neglt	r3, r3
 8000b2c:	2b19      	cmp	r3, #25
 8000b2e:	bf88      	it	hi
 8000b30:	4770      	bxhi	lr
 8000b32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b3e:	bf18      	it	ne
 8000b40:	4240      	negne	r0, r0
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b4e:	bf18      	it	ne
 8000b50:	4249      	negne	r1, r1
 8000b52:	ea92 0f03 	teq	r2, r3
 8000b56:	d03f      	beq.n	8000bd8 <__addsf3+0xd8>
 8000b58:	f1a2 0201 	sub.w	r2, r2, #1
 8000b5c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b60:	eb10 000c 	adds.w	r0, r0, ip
 8000b64:	f1c3 0320 	rsb	r3, r3, #32
 8000b68:	fa01 f103 	lsl.w	r1, r1, r3
 8000b6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b70:	d502      	bpl.n	8000b78 <__addsf3+0x78>
 8000b72:	4249      	negs	r1, r1
 8000b74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b7c:	d313      	bcc.n	8000ba6 <__addsf3+0xa6>
 8000b7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b82:	d306      	bcc.n	8000b92 <__addsf3+0x92>
 8000b84:	0840      	lsrs	r0, r0, #1
 8000b86:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8a:	f102 0201 	add.w	r2, r2, #1
 8000b8e:	2afe      	cmp	r2, #254	; 0xfe
 8000b90:	d251      	bcs.n	8000c36 <__addsf3+0x136>
 8000b92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9a:	bf08      	it	eq
 8000b9c:	f020 0001 	biceq.w	r0, r0, #1
 8000ba0:	ea40 0003 	orr.w	r0, r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	0049      	lsls	r1, r1, #1
 8000ba8:	eb40 0000 	adc.w	r0, r0, r0
 8000bac:	3a01      	subs	r2, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bb4:	d2ed      	bcs.n	8000b92 <__addsf3+0x92>
 8000bb6:	fab0 fc80 	clz	ip, r0
 8000bba:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bbe:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bc6:	bfaa      	itet	ge
 8000bc8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bcc:	4252      	neglt	r2, r2
 8000bce:	4318      	orrge	r0, r3
 8000bd0:	bfbc      	itt	lt
 8000bd2:	40d0      	lsrlt	r0, r2
 8000bd4:	4318      	orrlt	r0, r3
 8000bd6:	4770      	bx	lr
 8000bd8:	f092 0f00 	teq	r2, #0
 8000bdc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be0:	bf06      	itte	eq
 8000be2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000be6:	3201      	addeq	r2, #1
 8000be8:	3b01      	subne	r3, #1
 8000bea:	e7b5      	b.n	8000b58 <__addsf3+0x58>
 8000bec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf4:	bf18      	it	ne
 8000bf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfa:	d021      	beq.n	8000c40 <__addsf3+0x140>
 8000bfc:	ea92 0f03 	teq	r2, r3
 8000c00:	d004      	beq.n	8000c0c <__addsf3+0x10c>
 8000c02:	f092 0f00 	teq	r2, #0
 8000c06:	bf08      	it	eq
 8000c08:	4608      	moveq	r0, r1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea90 0f01 	teq	r0, r1
 8000c10:	bf1c      	itt	ne
 8000c12:	2000      	movne	r0, #0
 8000c14:	4770      	bxne	lr
 8000c16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1a:	d104      	bne.n	8000c26 <__addsf3+0x126>
 8000c1c:	0040      	lsls	r0, r0, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2a:	bf3c      	itt	cc
 8000c2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c30:	4770      	bxcc	lr
 8000c32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	4770      	bx	lr
 8000c40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c44:	bf16      	itet	ne
 8000c46:	4608      	movne	r0, r1
 8000c48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c4c:	4601      	movne	r1, r0
 8000c4e:	0242      	lsls	r2, r0, #9
 8000c50:	bf06      	itte	eq
 8000c52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c56:	ea90 0f01 	teqeq	r0, r1
 8000c5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c5e:	4770      	bx	lr

08000c60 <__aeabi_ui2f>:
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e004      	b.n	8000c70 <__aeabi_i2f+0x8>
 8000c66:	bf00      	nop

08000c68 <__aeabi_i2f>:
 8000c68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	bf48      	it	mi
 8000c6e:	4240      	negmi	r0, r0
 8000c70:	ea5f 0c00 	movs.w	ip, r0
 8000c74:	bf08      	it	eq
 8000c76:	4770      	bxeq	lr
 8000c78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f04f 0000 	mov.w	r0, #0
 8000c82:	e01c      	b.n	8000cbe <__aeabi_l2f+0x2a>

08000c84 <__aeabi_ul2f>:
 8000c84:	ea50 0201 	orrs.w	r2, r0, r1
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e00a      	b.n	8000ca8 <__aeabi_l2f+0x14>
 8000c92:	bf00      	nop

08000c94 <__aeabi_l2f>:
 8000c94:	ea50 0201 	orrs.w	r2, r0, r1
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	d502      	bpl.n	8000ca8 <__aeabi_l2f+0x14>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	ea5f 0c01 	movs.w	ip, r1
 8000cac:	bf02      	ittt	eq
 8000cae:	4684      	moveq	ip, r0
 8000cb0:	4601      	moveq	r1, r0
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb8:	bf08      	it	eq
 8000cba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc2:	fabc f28c 	clz	r2, ip
 8000cc6:	3a08      	subs	r2, #8
 8000cc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ccc:	db10      	blt.n	8000cf0 <__aeabi_l2f+0x5c>
 8000cce:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd2:	4463      	add	r3, ip
 8000cd4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd8:	f1c2 0220 	rsb	r2, r2, #32
 8000cdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce4:	eb43 0002 	adc.w	r0, r3, r2
 8000ce8:	bf08      	it	eq
 8000cea:	f020 0001 	biceq.w	r0, r0, #1
 8000cee:	4770      	bx	lr
 8000cf0:	f102 0220 	add.w	r2, r2, #32
 8000cf4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d00:	fa21 f202 	lsr.w	r2, r1, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_f2uiz>:
 8000d10:	0042      	lsls	r2, r0, #1
 8000d12:	d20e      	bcs.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d18:	d30b      	bcc.n	8000d32 <__aeabi_f2uiz+0x22>
 8000d1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d22:	d409      	bmi.n	8000d38 <__aeabi_f2uiz+0x28>
 8000d24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000d30:	4770      	bx	lr
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	4770      	bx	lr
 8000d38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d3c:	d101      	bne.n	8000d42 <__aeabi_f2uiz+0x32>
 8000d3e:	0242      	lsls	r2, r0, #9
 8000d40:	d102      	bne.n	8000d48 <__aeabi_f2uiz+0x38>
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
 8000d46:	4770      	bx	lr
 8000d48:	f04f 0000 	mov.w	r0, #0
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <trimm>:
uint8_t pointer_p1 = 0x01;
uint8_t dataDAC [3] = {0x40, 0xFF, 0xFF};


char* trimm(float f)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	static char trimmed [4];

	f *= 100;
 8000d58:	4929      	ldr	r1, [pc, #164]	; (8000e00 <trimm+0xb0>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff f9f8 	bl	8000150 <__aeabi_fmul>
 8000d60:	4603      	mov	r3, r0
 8000d62:	607b      	str	r3, [r7, #4]
	uint16_t g = f;
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ffd3 	bl	8000d10 <__aeabi_f2uiz>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	81bb      	strh	r3, [r7, #12]
	itoa(g, trimmed, 10);
 8000d6e:	89bb      	ldrh	r3, [r7, #12]
 8000d70:	220a      	movs	r2, #10
 8000d72:	4924      	ldr	r1, [pc, #144]	; (8000e04 <trimm+0xb4>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f004 f839 	bl	8004dec <itoa>

	if(g<10)
 8000d7a:	89bb      	ldrh	r3, [r7, #12]
 8000d7c:	2b09      	cmp	r3, #9
 8000d7e:	d80c      	bhi.n	8000d9a <trimm+0x4a>
	{
		trimmed[3] = trimmed[0];
 8000d80:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <trimm+0xb4>)
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <trimm+0xb4>)
 8000d86:	70da      	strb	r2, [r3, #3]
		trimmed[2] = '0';
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <trimm+0xb4>)
 8000d8a:	2230      	movs	r2, #48	; 0x30
 8000d8c:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <trimm+0xb4>)
 8000d90:	2230      	movs	r2, #48	; 0x30
 8000d92:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <trimm+0xb4>)
 8000d96:	2220      	movs	r2, #32
 8000d98:	701a      	strb	r2, [r3, #0]


	}
	if((g<100)&&(g>9))
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	2b63      	cmp	r3, #99	; 0x63
 8000d9e:	d810      	bhi.n	8000dc2 <trimm+0x72>
 8000da0:	89bb      	ldrh	r3, [r7, #12]
 8000da2:	2b09      	cmp	r3, #9
 8000da4:	d90d      	bls.n	8000dc2 <trimm+0x72>
	{
		trimmed[3] = trimmed[1];
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <trimm+0xb4>)
 8000da8:	785a      	ldrb	r2, [r3, #1]
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <trimm+0xb4>)
 8000dac:	70da      	strb	r2, [r3, #3]
		trimmed[2] = trimmed[0];
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <trimm+0xb4>)
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <trimm+0xb4>)
 8000db4:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <trimm+0xb4>)
 8000db8:	2230      	movs	r2, #48	; 0x30
 8000dba:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <trimm+0xb4>)
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	701a      	strb	r2, [r3, #0]

	}
	if((g<1000)&&(g>99))
 8000dc2:	89bb      	ldrh	r3, [r7, #12]
 8000dc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000dc8:	d215      	bcs.n	8000df6 <trimm+0xa6>
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	2b63      	cmp	r3, #99	; 0x63
 8000dce:	d912      	bls.n	8000df6 <trimm+0xa6>
	{
		for(uint8_t i = 3; i>0; i--)
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	e009      	b.n	8000dea <trimm+0x9a>
		{
			trimmed[i] = trimmed[i-1];
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	4909      	ldr	r1, [pc, #36]	; (8000e04 <trimm+0xb4>)
 8000dde:	5c89      	ldrb	r1, [r1, r2]
 8000de0:	4a08      	ldr	r2, [pc, #32]	; (8000e04 <trimm+0xb4>)
 8000de2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 3; i>0; i--)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1f2      	bne.n	8000dd6 <trimm+0x86>
		}
		trimmed[0] = ' ';
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <trimm+0xb4>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	701a      	strb	r2, [r3, #0]

	}

	return trimmed;
 8000df6:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <trimm+0xb4>)
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	42c80000 	.word	0x42c80000
 8000e04:	20000040 	.word	0x20000040

08000e08 <drawlogoC>:
void drawlogoC (uint8_t x, uint8_t y){
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
	  SSD1306_DrawLine((5+x), (y+5), (5+x), (y+11), 1);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	3305      	adds	r3, #5
 8000e1e:	b298      	uxth	r0, r3
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3305      	adds	r3, #5
 8000e26:	b299      	uxth	r1, r3
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3305      	adds	r3, #5
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	330b      	adds	r3, #11
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	2401      	movs	r4, #1
 8000e3a:	9400      	str	r4, [sp, #0]
 8000e3c:	f000 febc 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((6+x), (y+3), (6+x), (y+13), 1);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3306      	adds	r3, #6
 8000e46:	b298      	uxth	r0, r3
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3306      	adds	r3, #6
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	330d      	adds	r3, #13
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	2401      	movs	r4, #1
 8000e62:	9400      	str	r4, [sp, #0]
 8000e64:	f000 fea8 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+3), (7+x), (y+5), 1);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3307      	adds	r3, #7
 8000e6e:	b298      	uxth	r0, r3
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3303      	adds	r3, #3
 8000e76:	b299      	uxth	r1, r3
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	3305      	adds	r3, #5
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	2401      	movs	r4, #1
 8000e8a:	9400      	str	r4, [sp, #0]
 8000e8c:	f000 fe94 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+11), (7+x), (y+13), 1);
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3307      	adds	r3, #7
 8000e96:	b298      	uxth	r0, r3
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	330b      	adds	r3, #11
 8000e9e:	b299      	uxth	r1, r3
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3307      	adds	r3, #7
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	330d      	adds	r3, #13
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2401      	movs	r4, #1
 8000eb2:	9400      	str	r4, [sp, #0]
 8000eb4:	f000 fe80 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+14), (10+x), (y+14), 1);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	330e      	adds	r3, #14
 8000ec6:	b299      	uxth	r1, r3
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	330a      	adds	r3, #10
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	330e      	adds	r3, #14
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	2401      	movs	r4, #1
 8000eda:	9400      	str	r4, [sp, #0]
 8000edc:	f000 fe6c 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+13), (10+x), (y+13), 1);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3308      	adds	r3, #8
 8000ee6:	b298      	uxth	r0, r3
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	330d      	adds	r3, #13
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	330a      	adds	r3, #10
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	330d      	adds	r3, #13
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	2401      	movs	r4, #1
 8000f02:	9400      	str	r4, [sp, #0]
 8000f04:	f000 fe58 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+2), (10+x), (y+2), 1);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3308      	adds	r3, #8
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3302      	adds	r3, #2
 8000f16:	b299      	uxth	r1, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	330a      	adds	r3, #10
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3302      	adds	r3, #2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	2401      	movs	r4, #1
 8000f2a:	9400      	str	r4, [sp, #0]
 8000f2c:	f000 fe44 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+3), (10+x), (y+3), 1);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3308      	adds	r3, #8
 8000f36:	b298      	uxth	r0, r3
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3303      	adds	r3, #3
 8000f3e:	b299      	uxth	r1, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	330a      	adds	r3, #10
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	79bb      	ldrb	r3, [r7, #6]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	2401      	movs	r4, #1
 8000f52:	9400      	str	r4, [sp, #0]
 8000f54:	f000 fe30 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+3), (11+x), (y+4), 1);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	330b      	adds	r3, #11
 8000f5e:	b298      	uxth	r0, r3
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3303      	adds	r3, #3
 8000f66:	b299      	uxth	r1, r3
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	330b      	adds	r3, #11
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3304      	adds	r3, #4
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2401      	movs	r4, #1
 8000f7a:	9400      	str	r4, [sp, #0]
 8000f7c:	f000 fe1c 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+13), (11+x), (y+12), 1);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	330b      	adds	r3, #11
 8000f86:	b298      	uxth	r0, r3
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	330d      	adds	r3, #13
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	330b      	adds	r3, #11
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	2401      	movs	r4, #1
 8000fa2:	9400      	str	r4, [sp, #0]
 8000fa4:	f000 fe08 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+4), (12+x), (y+6), 1);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	330c      	adds	r3, #12
 8000fae:	b298      	uxth	r0, r3
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	330c      	adds	r3, #12
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3306      	adds	r3, #6
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2401      	movs	r4, #1
 8000fca:	9400      	str	r4, [sp, #0]
 8000fcc:	f000 fdf4 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+12), (12+x), (y+10), 1);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	b298      	uxth	r0, r3
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	330c      	adds	r3, #12
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	330a      	adds	r3, #10
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	2401      	movs	r4, #1
 8000ff2:	9400      	str	r4, [sp, #0]
 8000ff4:	f000 fde0 	bl	8001bb8 <SSD1306_DrawLine>
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}

08001000 <drawmenu1>:
void drawmenu1(uint8_t cursorm1, uint8_t cvcc, float x, float y)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b08b      	sub	sp, #44	; 0x2c
 8001004:	af02      	add	r7, sp, #8
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	460b      	mov	r3, r1
 8001010:	73bb      	strb	r3, [r7, #14]
	  SSD1306_Clear();
 8001012:	f000 fecc 	bl	8001dae <SSD1306_Clear>
	  cursorm1 = ~cursorm1;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	43db      	mvns	r3, r3
 800101a:	73fb      	strb	r3, [r7, #15]
	  char* mecha = trimm(y);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fe97 	bl	8000d50 <trimm>
 8001022:	61b8      	str	r0, [r7, #24]
	  SSD1306_GotoXY (26,3);
 8001024:	2103      	movs	r1, #3
 8001026:	201a      	movs	r0, #26
 8001028:	f000 fd30 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[0], &Font_11x18, ((cursorm1 & 0x08)>>3));
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	7818      	ldrb	r0, [r3, #0]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	10db      	asrs	r3, r3, #3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	4952      	ldr	r1, [pc, #328]	; (8001188 <drawmenu1+0x188>)
 8001040:	f000 fd3a 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (37,3);
 8001044:	2103      	movs	r1, #3
 8001046:	2025      	movs	r0, #37	; 0x25
 8001048:	f000 fd20 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[1], &Font_11x18, ((cursorm1 & 0x04)>>2));
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	3301      	adds	r3, #1
 8001050:	7818      	ldrb	r0, [r3, #0]
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	109b      	asrs	r3, r3, #2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	4949      	ldr	r1, [pc, #292]	; (8001188 <drawmenu1+0x188>)
 8001062:	f000 fd29 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (48,3);
 8001066:	2103      	movs	r1, #3
 8001068:	2030      	movs	r0, #48	; 0x30
 800106a:	f000 fd0f 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	4945      	ldr	r1, [pc, #276]	; (8001188 <drawmenu1+0x188>)
 8001072:	202c      	movs	r0, #44	; 0x2c
 8001074:	f000 fd20 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (59,3);
 8001078:	2103      	movs	r1, #3
 800107a:	203b      	movs	r0, #59	; 0x3b
 800107c:	f000 fd06 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[2], &Font_11x18, ((cursorm1 & 0x02)>>1));
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	3302      	adds	r3, #2
 8001084:	7818      	ldrb	r0, [r3, #0]
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	105b      	asrs	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	493c      	ldr	r1, [pc, #240]	; (8001188 <drawmenu1+0x188>)
 8001096:	f000 fd0f 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (70,3);
 800109a:	2103      	movs	r1, #3
 800109c:	2046      	movs	r0, #70	; 0x46
 800109e:	f000 fcf5 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[3], &Font_11x18, (cursorm1 & 0x01));
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	3303      	adds	r3, #3
 80010a6:	7818      	ldrb	r0, [r3, #0]
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	4935      	ldr	r1, [pc, #212]	; (8001188 <drawmenu1+0x188>)
 80010b4:	f000 fd00 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (107,3);
 80010b8:	2103      	movs	r1, #3
 80010ba:	206b      	movs	r0, #107	; 0x6b
 80010bc:	f000 fce6 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc('V', &Font_11x18, 1);
 80010c0:	2201      	movs	r2, #1
 80010c2:	4931      	ldr	r1, [pc, #196]	; (8001188 <drawmenu1+0x188>)
 80010c4:	2056      	movs	r0, #86	; 0x56
 80010c6:	f000 fcf7 	bl	8001ab8 <SSD1306_Putc>
	  char* proud = trimm(x);
 80010ca:	68b8      	ldr	r0, [r7, #8]
 80010cc:	f7ff fe40 	bl	8000d50 <trimm>
 80010d0:	6178      	str	r0, [r7, #20]
	  SSD1306_GotoXY (26,25);
 80010d2:	2119      	movs	r1, #25
 80010d4:	201a      	movs	r0, #26
 80010d6:	f000 fcd9 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (proud[0], &Font_11x18, ((cursorm1 & 0x80)>>7));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	7818      	ldrb	r0, [r3, #0]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	09db      	lsrs	r3, r3, #7
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4928      	ldr	r1, [pc, #160]	; (8001188 <drawmenu1+0x188>)
 80010e8:	f000 fce6 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (37,25);
 80010ec:	2119      	movs	r1, #25
 80010ee:	2025      	movs	r0, #37	; 0x25
 80010f0:	f000 fccc 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (proud[1], &Font_11x18, ((cursorm1 & 0x40)>>6));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	7818      	ldrb	r0, [r3, #0]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	119b      	asrs	r3, r3, #6
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	491f      	ldr	r1, [pc, #124]	; (8001188 <drawmenu1+0x188>)
 800110a:	f000 fcd5 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (48,25);
 800110e:	2119      	movs	r1, #25
 8001110:	2030      	movs	r0, #48	; 0x30
 8001112:	f000 fcbb 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	491b      	ldr	r1, [pc, #108]	; (8001188 <drawmenu1+0x188>)
 800111a:	202c      	movs	r0, #44	; 0x2c
 800111c:	f000 fccc 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (59,25);
 8001120:	2119      	movs	r1, #25
 8001122:	203b      	movs	r0, #59	; 0x3b
 8001124:	f000 fcb2 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (proud[2], &Font_11x18, ((cursorm1 & 0x20)>>5));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3302      	adds	r3, #2
 800112c:	7818      	ldrb	r0, [r3, #0]
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	115b      	asrs	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	4912      	ldr	r1, [pc, #72]	; (8001188 <drawmenu1+0x188>)
 800113e:	f000 fcbb 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (70,25);
 8001142:	2119      	movs	r1, #25
 8001144:	2046      	movs	r0, #70	; 0x46
 8001146:	f000 fca1 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc (proud[3], &Font_11x18, ((cursorm1 & 0x10)>>4));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3303      	adds	r3, #3
 800114e:	7818      	ldrb	r0, [r3, #0]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	111b      	asrs	r3, r3, #4
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	490a      	ldr	r1, [pc, #40]	; (8001188 <drawmenu1+0x188>)
 8001160:	f000 fcaa 	bl	8001ab8 <SSD1306_Putc>
	  SSD1306_GotoXY (107,25);
 8001164:	2119      	movs	r1, #25
 8001166:	206b      	movs	r0, #107	; 0x6b
 8001168:	f000 fc90 	bl	8001a8c <SSD1306_GotoXY>
	  SSD1306_Putc('A', &Font_11x18, 1);
 800116c:	2201      	movs	r2, #1
 800116e:	4906      	ldr	r1, [pc, #24]	; (8001188 <drawmenu1+0x188>)
 8001170:	2041      	movs	r0, #65	; 0x41
 8001172:	f000 fca1 	bl	8001ab8 <SSD1306_Putc>
	  uint8_t xcvcc = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	77fb      	strb	r3, [r7, #31]
	  uint8_t ycvcc = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	77bb      	strb	r3, [r7, #30]
	  if (cvcc) {
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80c5 	beq.w	8001310 <drawmenu1+0x310>
 8001186:	e001      	b.n	800118c <drawmenu1+0x18c>
 8001188:	20000000 	.word	0x20000000
		  xcvcc = 81;
 800118c:	2351      	movs	r3, #81	; 0x51
 800118e:	77fb      	strb	r3, [r7, #31]
		  ycvcc = 45;
 8001190:	232d      	movs	r3, #45	; 0x2d
 8001192:	77bb      	strb	r3, [r7, #30]
		  drawlogoC(92, ycvcc);
 8001194:	7fbb      	ldrb	r3, [r7, #30]
 8001196:	4619      	mov	r1, r3
 8001198:	205c      	movs	r0, #92	; 0x5c
 800119a:	f7ff fe35 	bl	8000e08 <drawlogoC>
		  SSD1306_DrawLine((5+xcvcc), (ycvcc+2), (5+xcvcc), (ycvcc+6), 1);
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3305      	adds	r3, #5
 80011a4:	b298      	uxth	r0, r3
 80011a6:	7fbb      	ldrb	r3, [r7, #30]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3302      	adds	r3, #2
 80011ac:	b299      	uxth	r1, r3
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3305      	adds	r3, #5
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	7fbb      	ldrb	r3, [r7, #30]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3306      	adds	r3, #6
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2401      	movs	r4, #1
 80011c0:	9400      	str	r4, [sp, #0]
 80011c2:	f000 fcf9 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((13+xcvcc), (ycvcc+2), (13+xcvcc), (ycvcc+6), 1);
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	330d      	adds	r3, #13
 80011cc:	b298      	uxth	r0, r3
 80011ce:	7fbb      	ldrb	r3, [r7, #30]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3302      	adds	r3, #2
 80011d4:	b299      	uxth	r1, r3
 80011d6:	7ffb      	ldrb	r3, [r7, #31]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	330d      	adds	r3, #13
 80011dc:	b29a      	uxth	r2, r3
 80011de:	7fbb      	ldrb	r3, [r7, #30]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	3306      	adds	r3, #6
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2401      	movs	r4, #1
 80011e8:	9400      	str	r4, [sp, #0]
 80011ea:	f000 fce5 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((6+xcvcc), (ycvcc+2), (6+xcvcc), (ycvcc+11), 1);
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	3306      	adds	r3, #6
 80011f4:	b298      	uxth	r0, r3
 80011f6:	7fbb      	ldrb	r3, [r7, #30]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3302      	adds	r3, #2
 80011fc:	b299      	uxth	r1, r3
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	b29b      	uxth	r3, r3
 8001202:	3306      	adds	r3, #6
 8001204:	b29a      	uxth	r2, r3
 8001206:	7fbb      	ldrb	r3, [r7, #30]
 8001208:	b29b      	uxth	r3, r3
 800120a:	330b      	adds	r3, #11
 800120c:	b29b      	uxth	r3, r3
 800120e:	2401      	movs	r4, #1
 8001210:	9400      	str	r4, [sp, #0]
 8001212:	f000 fcd1 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((12+xcvcc), (ycvcc+2), (12+xcvcc), (ycvcc+11), 1);
 8001216:	7ffb      	ldrb	r3, [r7, #31]
 8001218:	b29b      	uxth	r3, r3
 800121a:	330c      	adds	r3, #12
 800121c:	b298      	uxth	r0, r3
 800121e:	7fbb      	ldrb	r3, [r7, #30]
 8001220:	b29b      	uxth	r3, r3
 8001222:	3302      	adds	r3, #2
 8001224:	b299      	uxth	r1, r3
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	b29b      	uxth	r3, r3
 800122a:	330c      	adds	r3, #12
 800122c:	b29a      	uxth	r2, r3
 800122e:	7fbb      	ldrb	r3, [r7, #30]
 8001230:	b29b      	uxth	r3, r3
 8001232:	330b      	adds	r3, #11
 8001234:	b29b      	uxth	r3, r3
 8001236:	2401      	movs	r4, #1
 8001238:	9400      	str	r4, [sp, #0]
 800123a:	f000 fcbd 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((7+xcvcc), (ycvcc+6), (7+xcvcc), (ycvcc+13), 1);
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3307      	adds	r3, #7
 8001244:	b298      	uxth	r0, r3
 8001246:	7fbb      	ldrb	r3, [r7, #30]
 8001248:	b29b      	uxth	r3, r3
 800124a:	3306      	adds	r3, #6
 800124c:	b299      	uxth	r1, r3
 800124e:	7ffb      	ldrb	r3, [r7, #31]
 8001250:	b29b      	uxth	r3, r3
 8001252:	3307      	adds	r3, #7
 8001254:	b29a      	uxth	r2, r3
 8001256:	7fbb      	ldrb	r3, [r7, #30]
 8001258:	b29b      	uxth	r3, r3
 800125a:	330d      	adds	r3, #13
 800125c:	b29b      	uxth	r3, r3
 800125e:	2401      	movs	r4, #1
 8001260:	9400      	str	r4, [sp, #0]
 8001262:	f000 fca9 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((11+xcvcc), (ycvcc+6), (11+xcvcc), (ycvcc+13), 1);
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	b29b      	uxth	r3, r3
 800126a:	330b      	adds	r3, #11
 800126c:	b298      	uxth	r0, r3
 800126e:	7fbb      	ldrb	r3, [r7, #30]
 8001270:	b29b      	uxth	r3, r3
 8001272:	3306      	adds	r3, #6
 8001274:	b299      	uxth	r1, r3
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	b29b      	uxth	r3, r3
 800127a:	330b      	adds	r3, #11
 800127c:	b29a      	uxth	r2, r3
 800127e:	7fbb      	ldrb	r3, [r7, #30]
 8001280:	b29b      	uxth	r3, r3
 8001282:	330d      	adds	r3, #13
 8001284:	b29b      	uxth	r3, r3
 8001286:	2401      	movs	r4, #1
 8001288:	9400      	str	r4, [sp, #0]
 800128a:	f000 fc95 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((8+xcvcc), (ycvcc+11), (8+xcvcc), (ycvcc+14), 1);
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	b29b      	uxth	r3, r3
 8001292:	3308      	adds	r3, #8
 8001294:	b298      	uxth	r0, r3
 8001296:	7fbb      	ldrb	r3, [r7, #30]
 8001298:	b29b      	uxth	r3, r3
 800129a:	330b      	adds	r3, #11
 800129c:	b299      	uxth	r1, r3
 800129e:	7ffb      	ldrb	r3, [r7, #31]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3308      	adds	r3, #8
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	7fbb      	ldrb	r3, [r7, #30]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	330e      	adds	r3, #14
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2401      	movs	r4, #1
 80012b0:	9400      	str	r4, [sp, #0]
 80012b2:	f000 fc81 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawLine((10+xcvcc), (ycvcc+11), (10+xcvcc), (ycvcc+14), 1);
 80012b6:	7ffb      	ldrb	r3, [r7, #31]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	330a      	adds	r3, #10
 80012bc:	b298      	uxth	r0, r3
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	330b      	adds	r3, #11
 80012c4:	b299      	uxth	r1, r3
 80012c6:	7ffb      	ldrb	r3, [r7, #31]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	330a      	adds	r3, #10
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	7fbb      	ldrb	r3, [r7, #30]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	330e      	adds	r3, #14
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	2401      	movs	r4, #1
 80012d8:	9400      	str	r4, [sp, #0]
 80012da:	f000 fc6d 	bl	8001bb8 <SSD1306_DrawLine>
		  SSD1306_DrawPixel((9+xcvcc), (ycvcc+13), 1);
 80012de:	7ffb      	ldrb	r3, [r7, #31]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3309      	adds	r3, #9
 80012e4:	b298      	uxth	r0, r3
 80012e6:	7fbb      	ldrb	r3, [r7, #30]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	330d      	adds	r3, #13
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	2201      	movs	r2, #1
 80012f0:	4619      	mov	r1, r3
 80012f2:	f000 fb6d 	bl	80019d0 <SSD1306_DrawPixel>
		  SSD1306_DrawPixel((9+xcvcc), (ycvcc+14), 1);
 80012f6:	7ffb      	ldrb	r3, [r7, #31]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3309      	adds	r3, #9
 80012fc:	b298      	uxth	r0, r3
 80012fe:	7fbb      	ldrb	r3, [r7, #30]
 8001300:	b29b      	uxth	r3, r3
 8001302:	330e      	adds	r3, #14
 8001304:	b29b      	uxth	r3, r3
 8001306:	2201      	movs	r2, #1
 8001308:	4619      	mov	r1, r3
 800130a:	f000 fb61 	bl	80019d0 <SSD1306_DrawPixel>
 800130e:	e011      	b.n	8001334 <drawmenu1+0x334>
	  } else {
		  xcvcc = 20;
 8001310:	2314      	movs	r3, #20
 8001312:	77fb      	strb	r3, [r7, #31]
		  ycvcc = 45;
 8001314:	232d      	movs	r3, #45	; 0x2d
 8001316:	77bb      	strb	r3, [r7, #30]
		  drawlogoC(xcvcc, ycvcc);
 8001318:	7fba      	ldrb	r2, [r7, #30]
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fd72 	bl	8000e08 <drawlogoC>
		  drawlogoC((xcvcc+10), ycvcc);
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	330a      	adds	r3, #10
 8001328:	b2db      	uxtb	r3, r3
 800132a:	7fba      	ldrb	r2, [r7, #30]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fd6a 	bl	8000e08 <drawlogoC>
	  }
	  SSD1306_DrawLine((2+xcvcc), ycvcc , (25+xcvcc), ycvcc, 1);
 8001334:	7ffb      	ldrb	r3, [r7, #31]
 8001336:	b29b      	uxth	r3, r3
 8001338:	3302      	adds	r3, #2
 800133a:	b298      	uxth	r0, r3
 800133c:	7fbb      	ldrb	r3, [r7, #30]
 800133e:	b299      	uxth	r1, r3
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3319      	adds	r3, #25
 8001346:	b29a      	uxth	r2, r3
 8001348:	7fbb      	ldrb	r3, [r7, #30]
 800134a:	b29b      	uxth	r3, r3
 800134c:	2401      	movs	r4, #1
 800134e:	9400      	str	r4, [sp, #0]
 8001350:	f000 fc32 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine(xcvcc, (ycvcc+2), xcvcc, (ycvcc+15), 1);
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	b298      	uxth	r0, r3
 8001358:	7fbb      	ldrb	r3, [r7, #30]
 800135a:	b29b      	uxth	r3, r3
 800135c:	3302      	adds	r3, #2
 800135e:	b299      	uxth	r1, r3
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	b29a      	uxth	r2, r3
 8001364:	7fbb      	ldrb	r3, [r7, #30]
 8001366:	b29b      	uxth	r3, r3
 8001368:	330f      	adds	r3, #15
 800136a:	b29b      	uxth	r3, r3
 800136c:	2401      	movs	r4, #1
 800136e:	9400      	str	r4, [sp, #0]
 8001370:	f000 fc22 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((2+xcvcc), (ycvcc+17), (25+xcvcc), (ycvcc+17), 1);
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	b29b      	uxth	r3, r3
 8001378:	3302      	adds	r3, #2
 800137a:	b298      	uxth	r0, r3
 800137c:	7fbb      	ldrb	r3, [r7, #30]
 800137e:	b29b      	uxth	r3, r3
 8001380:	3311      	adds	r3, #17
 8001382:	b299      	uxth	r1, r3
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	b29b      	uxth	r3, r3
 8001388:	3319      	adds	r3, #25
 800138a:	b29a      	uxth	r2, r3
 800138c:	7fbb      	ldrb	r3, [r7, #30]
 800138e:	b29b      	uxth	r3, r3
 8001390:	3311      	adds	r3, #17
 8001392:	b29b      	uxth	r3, r3
 8001394:	2401      	movs	r4, #1
 8001396:	9400      	str	r4, [sp, #0]
 8001398:	f000 fc0e 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawLine((27+xcvcc), (ycvcc+2), (27+xcvcc), (ycvcc+15), 1);
 800139c:	7ffb      	ldrb	r3, [r7, #31]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	331b      	adds	r3, #27
 80013a2:	b298      	uxth	r0, r3
 80013a4:	7fbb      	ldrb	r3, [r7, #30]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3302      	adds	r3, #2
 80013aa:	b299      	uxth	r1, r3
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	331b      	adds	r3, #27
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	330f      	adds	r3, #15
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2401      	movs	r4, #1
 80013be:	9400      	str	r4, [sp, #0]
 80013c0:	f000 fbfa 	bl	8001bb8 <SSD1306_DrawLine>
	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+1), 1);
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b298      	uxth	r0, r3
 80013cc:	7fbb      	ldrb	r3, [r7, #30]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	3301      	adds	r3, #1
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	2201      	movs	r2, #1
 80013d6:	4619      	mov	r1, r3
 80013d8:	f000 fafa 	bl	80019d0 <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+16), 1);
 80013dc:	7ffb      	ldrb	r3, [r7, #31]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	b298      	uxth	r0, r3
 80013e4:	7fbb      	ldrb	r3, [r7, #30]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	3310      	adds	r3, #16
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2201      	movs	r2, #1
 80013ee:	4619      	mov	r1, r3
 80013f0:	f000 faee 	bl	80019d0 <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+1), 1);
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	331a      	adds	r3, #26
 80013fa:	b298      	uxth	r0, r3
 80013fc:	7fbb      	ldrb	r3, [r7, #30]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3301      	adds	r3, #1
 8001402:	b29b      	uxth	r3, r3
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	f000 fae2 	bl	80019d0 <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+16), 1);
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	b29b      	uxth	r3, r3
 8001410:	331a      	adds	r3, #26
 8001412:	b298      	uxth	r0, r3
 8001414:	7fbb      	ldrb	r3, [r7, #30]
 8001416:	b29b      	uxth	r3, r3
 8001418:	3310      	adds	r3, #16
 800141a:	b29b      	uxth	r3, r3
 800141c:	2201      	movs	r2, #1
 800141e:	4619      	mov	r1, r3
 8001420:	f000 fad6 	bl	80019d0 <SSD1306_DrawPixel>

	  SSD1306_UpdateScreen(); // update screen
 8001424:	f000 fa8e 	bl	8001944 <SSD1306_UpdateScreen>
}
 8001428:	bf00      	nop
 800142a:	3724      	adds	r7, #36	; 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <setDAC1>:
void setDAC1 (uint16_t data)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af02      	add	r7, sp, #8
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	b29b      	uxth	r3, r3
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <setDAC1+0x38>)
 8001444:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <setDAC1+0x38>)
 800144e:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c2, (0b1100001<<1), dataDAC, 3, 10);
 8001450:	230a      	movs	r3, #10
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2303      	movs	r3, #3
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <setDAC1+0x38>)
 8001458:	21c2      	movs	r1, #194	; 0xc2
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <setDAC1+0x3c>)
 800145c:	f001 ffa4 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000000c 	.word	0x2000000c
 800146c:	200004a0 	.word	0x200004a0

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001476:	f000 fe6d 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147a:	f000 f88d 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147e:	f000 f975 	bl	800176c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001482:	f000 f917 	bl	80016b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001486:	f000 f943 	bl	8001710 <MX_I2C2_Init>
  MX_ADC1_Init();
 800148a:	f000 f8d5 	bl	8001638 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800148e:	f000 f995 	bl	80017bc <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t val = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	80fb      	strh	r3, [r7, #6]
	  drawmenu1(pointer_p1, 1,t, p);
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <main+0x118>)
 8001498:	7818      	ldrb	r0, [r3, #0]
 800149a:	4b3c      	ldr	r3, [pc, #240]	; (800158c <main+0x11c>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b3c      	ldr	r3, [pc, #240]	; (8001590 <main+0x120>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2101      	movs	r1, #1
 80014a4:	f7ff fdac 	bl	8001000 <drawmenu1>
	  p += 0.025;
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <main+0x120>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f867 	bl	8000580 <__aeabi_f2d>
 80014b2:	a32f      	add	r3, pc, #188	; (adr r3, 8001570 <main+0x100>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7fe ff04 	bl	80002c4 <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fac6 	bl	8000a54 <__aeabi_d2f>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a31      	ldr	r2, [pc, #196]	; (8001590 <main+0x120>)
 80014cc:	6013      	str	r3, [r2, #0]
	  pointer_p1 *= 2;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <main+0x118>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <main+0x118>)
 80014d8:	701a      	strb	r2, [r3, #0]
	  setDAC1(0x666);
 80014da:	f240 6066 	movw	r0, #1638	; 0x666
 80014de:	f7ff ffa7 	bl	8001430 <setDAC1>
	  HAL_ADC_Start(&hadc1);
 80014e2:	482c      	ldr	r0, [pc, #176]	; (8001594 <main+0x124>)
 80014e4:	f000 ff94 	bl	8002410 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 80014e8:	2101      	movs	r1, #1
 80014ea:	482a      	ldr	r0, [pc, #168]	; (8001594 <main+0x124>)
 80014ec:	f001 f86a 	bl	80025c4 <HAL_ADC_PollForConversion>
	  val = HAL_ADC_GetValue(&hadc1);
 80014f0:	4828      	ldr	r0, [pc, #160]	; (8001594 <main+0x124>)
 80014f2:	f001 f96d 	bl	80027d0 <HAL_ADC_GetValue>
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
	  HAL_ADC_Stop(&hadc1);
 80014fa:	4826      	ldr	r0, [pc, #152]	; (8001594 <main+0x124>)
 80014fc:	f001 f836 	bl	800256c <HAL_ADC_Stop>
	  t = val;
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fbac 	bl	8000c60 <__aeabi_ui2f>
 8001508:	4603      	mov	r3, r0
 800150a:	4a20      	ldr	r2, [pc, #128]	; (800158c <main+0x11c>)
 800150c:	6013      	str	r3, [r2, #0]
	  t = ((t*3.3)/4095)*2;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <main+0x11c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f834 	bl	8000580 <__aeabi_f2d>
 8001518:	a317      	add	r3, pc, #92	; (adr r3, 8001578 <main+0x108>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f887 	bl	8000630 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	a315      	add	r3, pc, #84	; (adr r3, 8001580 <main+0x110>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f9a8 	bl	8000884 <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	f7fe fec0 	bl	80002c4 <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fa82 	bl	8000a54 <__aeabi_d2f>
 8001550:	4603      	mov	r3, r0
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <main+0x11c>)
 8001554:	6013      	str	r3, [r2, #0]
	  if(pointer_p1 == 0)
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <main+0x118>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <main+0xf4>
	  {
		  pointer_p1 = 1;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <main+0x118>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	; 0x64
 8001566:	f000 fe57 	bl	8002218 <HAL_Delay>
  {
 800156a:	e792      	b.n	8001492 <main+0x22>
 800156c:	f3af 8000 	nop.w
 8001570:	9999999a 	.word	0x9999999a
 8001574:	3f999999 	.word	0x3f999999
 8001578:	66666666 	.word	0x66666666
 800157c:	400a6666 	.word	0x400a6666
 8001580:	00000000 	.word	0x00000000
 8001584:	40affe00 	.word	0x40affe00
 8001588:	20000008 	.word	0x20000008
 800158c:	20000038 	.word	0x20000038
 8001590:	2000003c 	.word	0x2000003c
 8001594:	200004f4 	.word	0x200004f4

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b094      	sub	sp, #80	; 0x50
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a2:	2228      	movs	r2, #40	; 0x28
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fc22 	bl	8004df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c8:	2302      	movs	r3, #2
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d0:	2310      	movs	r3, #16
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 fe35 	bl	800424c <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x54>
  {
    Error_Handler();
 80015e8:	f000 f8e2 	bl	80017b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f003 f8a0 	bl	800474c <HAL_RCC_ClockConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001612:	f000 f8cd 	bl	80017b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001616:	2302      	movs	r3, #2
 8001618:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fa2d 	bl	8004a80 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800162c:	f000 f8c0 	bl	80017b0 <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	3750      	adds	r7, #80	; 0x50
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <MX_ADC1_Init+0x74>)
 800164a:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <MX_ADC1_Init+0x78>)
 800164c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_ADC1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_ADC1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_ADC1_Init+0x74>)
 800165c:	2200      	movs	r2, #0
 800165e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_ADC1_Init+0x74>)
 8001662:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001666:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_ADC1_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_ADC1_Init+0x74>)
 8001670:	2201      	movs	r2, #1
 8001672:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001674:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_ADC1_Init+0x74>)
 8001676:	f000 fdf3 	bl	8002260 <HAL_ADC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001680:	f000 f896 	bl	80017b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001688:	2301      	movs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_ADC1_Init+0x74>)
 8001696:	f001 f8a7 	bl	80027e8 <HAL_ADC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016a0:	f000 f886 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200004f4 	.word	0x200004f4
 80016b0:	40012400 	.word	0x40012400

080016b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_I2C1_Init+0x50>)
 80016ba:	4a13      	ldr	r2, [pc, #76]	; (8001708 <MX_I2C1_Init+0x54>)
 80016bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_I2C1_Init+0x50>)
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_I2C1_Init+0x58>)
 80016c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_I2C1_Init+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_I2C1_Init+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_I2C1_Init+0x50>)
 80016d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <MX_I2C1_Init+0x50>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_I2C1_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <MX_I2C1_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_I2C1_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_I2C1_Init+0x50>)
 80016f2:	f001 fd15 	bl	8003120 <HAL_I2C_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016fc:	f000 f858 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000044c 	.word	0x2000044c
 8001708:	40005400 	.word	0x40005400
 800170c:	00061a80 	.word	0x00061a80

08001710 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_I2C2_Init+0x50>)
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_I2C2_Init+0x54>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_I2C2_Init+0x50>)
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_I2C2_Init+0x58>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_I2C2_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_I2C2_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_I2C2_Init+0x50>)
 800172e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001732:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_I2C2_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_I2C2_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_I2C2_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_I2C2_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_I2C2_Init+0x50>)
 800174e:	f001 fce7 	bl	8003120 <HAL_I2C_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001758:	f000 f82a 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200004a0 	.word	0x200004a0
 8001764:	40005800 	.word	0x40005800
 8001768:	000186a0 	.word	0x000186a0

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_GPIO_Init+0x40>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <MX_GPIO_Init+0x40>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_GPIO_Init+0x40>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_GPIO_Init+0x40>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <MX_GPIO_Init+0x40>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6193      	str	r3, [r2, #24]
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <MX_GPIO_Init+0x40>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>
	...

080017bc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80017c2:	f000 fafb 	bl	8001dbc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80017c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017ca:	2201      	movs	r2, #1
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	485b      	ldr	r0, [pc, #364]	; (800193c <SSD1306_Init+0x180>)
 80017d0:	f001 fee8 	bl	80035a4 <HAL_I2C_IsDeviceReady>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	e0a9      	b.n	8001932 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80017de:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80017e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017e4:	e002      	b.n	80017ec <SSD1306_Init+0x30>
		p--;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80017f2:	22ae      	movs	r2, #174	; 0xae
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f000 fb3c 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80017fc:	2220      	movs	r2, #32
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f000 fb37 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001806:	2210      	movs	r2, #16
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f000 fb32 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001810:	22b0      	movs	r2, #176	; 0xb0
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f000 fb2d 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800181a:	22c8      	movs	r2, #200	; 0xc8
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	; 0x78
 8001820:	f000 fb28 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	; 0x78
 800182a:	f000 fb23 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800182e:	2210      	movs	r2, #16
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	; 0x78
 8001834:	f000 fb1e 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	2100      	movs	r1, #0
 800183c:	2078      	movs	r0, #120	; 0x78
 800183e:	f000 fb19 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001842:	2281      	movs	r2, #129	; 0x81
 8001844:	2100      	movs	r1, #0
 8001846:	2078      	movs	r0, #120	; 0x78
 8001848:	f000 fb14 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800184c:	22ff      	movs	r2, #255	; 0xff
 800184e:	2100      	movs	r1, #0
 8001850:	2078      	movs	r0, #120	; 0x78
 8001852:	f000 fb0f 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001856:	22a1      	movs	r2, #161	; 0xa1
 8001858:	2100      	movs	r1, #0
 800185a:	2078      	movs	r0, #120	; 0x78
 800185c:	f000 fb0a 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001860:	22a6      	movs	r2, #166	; 0xa6
 8001862:	2100      	movs	r1, #0
 8001864:	2078      	movs	r0, #120	; 0x78
 8001866:	f000 fb05 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800186a:	22a8      	movs	r2, #168	; 0xa8
 800186c:	2100      	movs	r1, #0
 800186e:	2078      	movs	r0, #120	; 0x78
 8001870:	f000 fb00 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001874:	223f      	movs	r2, #63	; 0x3f
 8001876:	2100      	movs	r1, #0
 8001878:	2078      	movs	r0, #120	; 0x78
 800187a:	f000 fafb 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800187e:	22a4      	movs	r2, #164	; 0xa4
 8001880:	2100      	movs	r1, #0
 8001882:	2078      	movs	r0, #120	; 0x78
 8001884:	f000 faf6 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001888:	22d3      	movs	r2, #211	; 0xd3
 800188a:	2100      	movs	r1, #0
 800188c:	2078      	movs	r0, #120	; 0x78
 800188e:	f000 faf1 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2078      	movs	r0, #120	; 0x78
 8001898:	f000 faec 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800189c:	22d5      	movs	r2, #213	; 0xd5
 800189e:	2100      	movs	r1, #0
 80018a0:	2078      	movs	r0, #120	; 0x78
 80018a2:	f000 fae7 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80018a6:	22f0      	movs	r2, #240	; 0xf0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2078      	movs	r0, #120	; 0x78
 80018ac:	f000 fae2 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80018b0:	22d9      	movs	r2, #217	; 0xd9
 80018b2:	2100      	movs	r1, #0
 80018b4:	2078      	movs	r0, #120	; 0x78
 80018b6:	f000 fadd 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80018ba:	2222      	movs	r2, #34	; 0x22
 80018bc:	2100      	movs	r1, #0
 80018be:	2078      	movs	r0, #120	; 0x78
 80018c0:	f000 fad8 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80018c4:	22da      	movs	r2, #218	; 0xda
 80018c6:	2100      	movs	r1, #0
 80018c8:	2078      	movs	r0, #120	; 0x78
 80018ca:	f000 fad3 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80018ce:	2212      	movs	r2, #18
 80018d0:	2100      	movs	r1, #0
 80018d2:	2078      	movs	r0, #120	; 0x78
 80018d4:	f000 face 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80018d8:	22db      	movs	r2, #219	; 0xdb
 80018da:	2100      	movs	r1, #0
 80018dc:	2078      	movs	r0, #120	; 0x78
 80018de:	f000 fac9 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80018e2:	2220      	movs	r2, #32
 80018e4:	2100      	movs	r1, #0
 80018e6:	2078      	movs	r0, #120	; 0x78
 80018e8:	f000 fac4 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80018ec:	228d      	movs	r2, #141	; 0x8d
 80018ee:	2100      	movs	r1, #0
 80018f0:	2078      	movs	r0, #120	; 0x78
 80018f2:	f000 fabf 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80018f6:	2214      	movs	r2, #20
 80018f8:	2100      	movs	r1, #0
 80018fa:	2078      	movs	r0, #120	; 0x78
 80018fc:	f000 faba 	bl	8001e74 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001900:	22af      	movs	r2, #175	; 0xaf
 8001902:	2100      	movs	r1, #0
 8001904:	2078      	movs	r0, #120	; 0x78
 8001906:	f000 fab5 	bl	8001e74 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800190a:	222e      	movs	r2, #46	; 0x2e
 800190c:	2100      	movs	r1, #0
 800190e:	2078      	movs	r0, #120	; 0x78
 8001910:	f000 fab0 	bl	8001e74 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001914:	2000      	movs	r0, #0
 8001916:	f000 f843 	bl	80019a0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800191a:	f000 f813 	bl	8001944 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <SSD1306_Init+0x184>)
 8001920:	2200      	movs	r2, #0
 8001922:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SSD1306_Init+0x184>)
 8001926:	2200      	movs	r2, #0
 8001928:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SSD1306_Init+0x184>)
 800192c:	2201      	movs	r2, #1
 800192e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001930:	2301      	movs	r3, #1
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000044c 	.word	0x2000044c
 8001940:	20000444 	.word	0x20000444

08001944 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
 800194e:	e01d      	b.n	800198c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b50      	subs	r3, #80	; 0x50
 8001954:	b2db      	uxtb	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f000 fa8a 	bl	8001e74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001960:	2200      	movs	r2, #0
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	; 0x78
 8001966:	f000 fa85 	bl	8001e74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800196a:	2210      	movs	r2, #16
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f000 fa80 	bl	8001e74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	01db      	lsls	r3, r3, #7
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <SSD1306_UpdateScreen+0x58>)
 800197a:	441a      	add	r2, r3
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	2078      	movs	r0, #120	; 0x78
 8001982:	f000 fa2f 	bl	8001de4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	3301      	adds	r3, #1
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b07      	cmp	r3, #7
 8001990:	d9de      	bls.n	8001950 <SSD1306_UpdateScreen+0xc>
	}
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000044 	.word	0x20000044

080019a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <SSD1306_Fill+0x14>
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <SSD1306_Fill+0x16>
 80019b4:	23ff      	movs	r3, #255	; 0xff
 80019b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ba:	4619      	mov	r1, r3
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <SSD1306_Fill+0x2c>)
 80019be:	f003 fa17 	bl	8004df0 <memset>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000044 	.word	0x20000044

080019d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	460b      	mov	r3, r1
 80019dc:	80bb      	strh	r3, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	70fb      	strb	r3, [r7, #3]
	if (
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b7f      	cmp	r3, #127	; 0x7f
 80019e6:	d848      	bhi.n	8001a7a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	2b3f      	cmp	r3, #63	; 0x3f
 80019ec:	d845      	bhi.n	8001a7a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <SSD1306_DrawPixel+0xb4>)
 80019f0:	791b      	ldrb	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf0c      	ite	eq
 80019fc:	2301      	moveq	r3, #1
 80019fe:	2300      	movne	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d11a      	bne.n	8001a40 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a0a:	88fa      	ldrh	r2, [r7, #6]
 8001a0c:	88bb      	ldrh	r3, [r7, #4]
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	b298      	uxth	r0, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	01db      	lsls	r3, r3, #7
 8001a16:	4413      	add	r3, r2
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <SSD1306_DrawPixel+0xb8>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	b25a      	sxtb	r2, r3
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	2101      	movs	r1, #1
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b259      	sxtb	r1, r3
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	4603      	mov	r3, r0
 8001a34:	01db      	lsls	r3, r3, #7
 8001a36:	4413      	add	r3, r2
 8001a38:	b2c9      	uxtb	r1, r1
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <SSD1306_DrawPixel+0xb8>)
 8001a3c:	54d1      	strb	r1, [r2, r3]
 8001a3e:	e01d      	b.n	8001a7c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	b298      	uxth	r0, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	; (8001a88 <SSD1306_DrawPixel+0xb8>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	b25a      	sxtb	r2, r3
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	4013      	ands	r3, r2
 8001a68:	b259      	sxtb	r1, r3
 8001a6a:	88fa      	ldrh	r2, [r7, #6]
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	01db      	lsls	r3, r3, #7
 8001a70:	4413      	add	r3, r2
 8001a72:	b2c9      	uxtb	r1, r1
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <SSD1306_DrawPixel+0xb8>)
 8001a76:	54d1      	strb	r1, [r2, r3]
 8001a78:	e000      	b.n	8001a7c <SSD1306_DrawPixel+0xac>
		return;
 8001a7a:	bf00      	nop
	}
}
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000444 	.word	0x20000444
 8001a88:	20000044 	.word	0x20000044

08001a8c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	460a      	mov	r2, r1
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a9c:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SSD1306_GotoXY+0x28>)
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <SSD1306_GotoXY+0x28>)
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	8053      	strh	r3, [r2, #2]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000444 	.word	0x20000444

08001ab8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
	if (
 8001ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ad6:	dc07      	bgt.n	8001ae8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001ada:	885b      	ldrh	r3, [r3, #2]
 8001adc:	461a      	mov	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	785b      	ldrb	r3, [r3, #1]
 8001ae2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ae4:	2b3f      	cmp	r3, #63	; 0x3f
 8001ae6:	dd01      	ble.n	8001aec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e05e      	b.n	8001baa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e04b      	b.n	8001b8a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	3b20      	subs	r3, #32
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	7849      	ldrb	r1, [r1, #1]
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4619      	mov	r1, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	440b      	add	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e030      	b.n	8001b78 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001b26:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	b298      	uxth	r0, r3
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001b34:	885a      	ldrh	r2, [r3, #2]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	79ba      	ldrb	r2, [r7, #6]
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff ff45 	bl	80019d0 <SSD1306_DrawPixel>
 8001b46:	e014      	b.n	8001b72 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001b4a:	881a      	ldrh	r2, [r3, #0]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	b298      	uxth	r0, r3
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001b56:	885a      	ldrh	r2, [r3, #2]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	bf0c      	ite	eq
 8001b66:	2301      	moveq	r3, #1
 8001b68:	2300      	movne	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f7ff ff2f 	bl	80019d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3301      	adds	r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d3c8      	bcc.n	8001b16 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	785b      	ldrb	r3, [r3, #1]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d3ad      	bcc.n	8001af2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <SSD1306_Putc+0xfc>)
 8001ba6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000444 	.word	0x20000444

08001bb8 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	80fb      	strh	r3, [r7, #6]
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80bb      	strh	r3, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	807b      	strh	r3, [r7, #2]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bda:	d901      	bls.n	8001be0 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001bdc:	237f      	movs	r3, #127	; 0x7f
 8001bde:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	2b7f      	cmp	r3, #127	; 0x7f
 8001be4:	d901      	bls.n	8001bea <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001be6:	237f      	movs	r3, #127	; 0x7f
 8001be8:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	2b3f      	cmp	r3, #63	; 0x3f
 8001bee:	d901      	bls.n	8001bf4 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001bf0:	233f      	movs	r3, #63	; 0x3f
 8001bf2:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001bf4:	883b      	ldrh	r3, [r7, #0]
 8001bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf8:	d901      	bls.n	8001bfe <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001bfa:	233f      	movs	r3, #63	; 0x3f
 8001bfc:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d205      	bcs.n	8001c12 <SSD1306_DrawLine+0x5a>
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	e004      	b.n	8001c1c <SSD1306_DrawLine+0x64>
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	883b      	ldrh	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d205      	bcs.n	8001c32 <SSD1306_DrawLine+0x7a>
 8001c26:	883a      	ldrh	r2, [r7, #0]
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	e004      	b.n	8001c3c <SSD1306_DrawLine+0x84>
 8001c32:	88ba      	ldrh	r2, [r7, #4]
 8001c34:	883b      	ldrh	r3, [r7, #0]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b21b      	sxth	r3, r3
 8001c3c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d201      	bcs.n	8001c4a <SSD1306_DrawLine+0x92>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e001      	b.n	8001c4e <SSD1306_DrawLine+0x96>
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001c50:	88ba      	ldrh	r2, [r7, #4]
 8001c52:	883b      	ldrh	r3, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d201      	bcs.n	8001c5c <SSD1306_DrawLine+0xa4>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e001      	b.n	8001c60 <SSD1306_DrawLine+0xa8>
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001c62:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dd06      	ble.n	8001c7c <SSD1306_DrawLine+0xc4>
 8001c6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c72:	0fda      	lsrs	r2, r3, #31
 8001c74:	4413      	add	r3, r2
 8001c76:	105b      	asrs	r3, r3, #1
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	e006      	b.n	8001c8a <SSD1306_DrawLine+0xd2>
 8001c7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c80:	0fda      	lsrs	r2, r3, #31
 8001c82:	4413      	add	r3, r2
 8001c84:	105b      	asrs	r3, r3, #1
 8001c86:	425b      	negs	r3, r3
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001c8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d129      	bne.n	8001ce8 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001c94:	883a      	ldrh	r2, [r7, #0]
 8001c96:	88bb      	ldrh	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d205      	bcs.n	8001ca8 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001c9c:	883b      	ldrh	r3, [r7, #0]
 8001c9e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001ca0:	88bb      	ldrh	r3, [r7, #4]
 8001ca2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001ca4:	893b      	ldrh	r3, [r7, #8]
 8001ca6:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001ca8:	887a      	ldrh	r2, [r7, #2]
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d205      	bcs.n	8001cbc <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001cb0:	887b      	ldrh	r3, [r7, #2]
 8001cb2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001cb8:	893b      	ldrh	r3, [r7, #8]
 8001cba:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	82bb      	strh	r3, [r7, #20]
 8001cc0:	e00c      	b.n	8001cdc <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001cc2:	8ab9      	ldrh	r1, [r7, #20]
 8001cc4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fe80 	bl	80019d0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001cd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	82bb      	strh	r3, [r7, #20]
 8001cdc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001ce0:	883b      	ldrh	r3, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dded      	ble.n	8001cc2 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001ce6:	e05f      	b.n	8001da8 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001ce8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d129      	bne.n	8001d44 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001cf0:	883a      	ldrh	r2, [r7, #0]
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d205      	bcs.n	8001d04 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001cf8:	883b      	ldrh	r3, [r7, #0]
 8001cfa:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001cfc:	88bb      	ldrh	r3, [r7, #4]
 8001cfe:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001d00:	893b      	ldrh	r3, [r7, #8]
 8001d02:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d205      	bcs.n	8001d18 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001d14:	893b      	ldrh	r3, [r7, #8]
 8001d16:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	82bb      	strh	r3, [r7, #20]
 8001d1c:	e00c      	b.n	8001d38 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001d1e:	8abb      	ldrh	r3, [r7, #20]
 8001d20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d24:	88b9      	ldrh	r1, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fe52 	bl	80019d0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001d2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	82bb      	strh	r3, [r7, #20]
 8001d38:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dded      	ble.n	8001d1e <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001d42:	e031      	b.n	8001da8 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001d44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d48:	88b9      	ldrh	r1, [r7, #4]
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fe3f 	bl	80019d0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d103      	bne.n	8001d62 <SSD1306_DrawLine+0x1aa>
 8001d5a:	88ba      	ldrh	r2, [r7, #4]
 8001d5c:	883b      	ldrh	r3, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d021      	beq.n	8001da6 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001d62:	8afb      	ldrh	r3, [r7, #22]
 8001d64:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001d66:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d6e:	425b      	negs	r3, r3
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dd08      	ble.n	8001d86 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001d74:	8afa      	ldrh	r2, [r7, #22]
 8001d76:	8a3b      	ldrh	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001d7e:	89fa      	ldrh	r2, [r7, #14]
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	4413      	add	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001d86:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dad8      	bge.n	8001d44 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001d92:	8afa      	ldrh	r2, [r7, #22]
 8001d94:	8a7b      	ldrh	r3, [r7, #18]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d9c:	89ba      	ldrh	r2, [r7, #12]
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001da4:	e7ce      	b.n	8001d44 <SSD1306_DrawLine+0x18c>
			break;
 8001da6:	bf00      	nop
		} 
	}
}
 8001da8:	371c      	adds	r7, #28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd90      	pop	{r4, r7, pc}

08001dae <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001db2:	2000      	movs	r0, #0
 8001db4:	f7ff fdf4 	bl	80019a0 <SSD1306_Fill>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <ssd1306_I2C_Init+0x24>)
 8001dc4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dc6:	e002      	b.n	8001dce <ssd1306_I2C_Init+0x12>
		p--;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	0003d090 	.word	0x0003d090

08001de4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b0c7      	sub	sp, #284	; 0x11c
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4604      	mov	r4, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	4639      	mov	r1, r7
 8001df0:	600a      	str	r2, [r1, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	4622      	mov	r2, r4
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	460a      	mov	r2, r1
 8001e04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	1dba      	adds	r2, r7, #6
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e16:	e010      	b.n	8001e3a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001e18:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e1c:	463a      	mov	r2, r7
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	441a      	add	r2, r3
 8001e22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e26:	3301      	adds	r3, #1
 8001e28:	7811      	ldrb	r1, [r2, #0]
 8001e2a:	f107 020c 	add.w	r2, r7, #12
 8001e2e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001e30:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e34:	3301      	adds	r3, #1
 8001e36:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001e3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	1d3a      	adds	r2, r7, #4
 8001e42:	8812      	ldrh	r2, [r2, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d8e7      	bhi.n	8001e18 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001e48:	1dfb      	adds	r3, r7, #7
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b299      	uxth	r1, r3
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f107 020c 	add.w	r2, r7, #12
 8001e5a:	200a      	movs	r0, #10
 8001e5c:	9000      	str	r0, [sp, #0]
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <ssd1306_I2C_WriteMulti+0x8c>)
 8001e60:	f001 faa2 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 8001e64:	bf00      	nop
 8001e66:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000044c 	.word	0x2000044c

08001e74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	71bb      	strb	r3, [r7, #6]
 8001e82:	4613      	mov	r3, r2
 8001e84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e8a:	797b      	ldrb	r3, [r7, #5]
 8001e8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	b299      	uxth	r1, r3
 8001e92:	f107 020c 	add.w	r2, r7, #12
 8001e96:	230a      	movs	r3, #10
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <ssd1306_I2C_Write+0x38>)
 8001e9e:	f001 fa83 	bl	80033a8 <HAL_I2C_Master_Transmit>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000044c 	.word	0x2000044c

08001eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_MspInit+0x5c>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <HAL_MspInit+0x5c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6193      	str	r3, [r2, #24]
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_MspInit+0x5c>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_MspInit+0x5c>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_MspInit+0x5c>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_MspInit+0x5c>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_MspInit+0x60>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_MspInit+0x60>)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000

08001f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <HAL_ADC_MspInit+0x6c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d121      	bne.n	8001f78 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_ADC_MspInit+0x70>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_ADC_MspInit+0x70>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_ADC_MspInit+0x70>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_ADC_MspInit+0x70>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_ADC_MspInit+0x70>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_ADC_MspInit+0x70>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001f64:	230f      	movs	r3, #15
 8001f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <HAL_ADC_MspInit+0x74>)
 8001f74:	f000 ff50 	bl	8002e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40012400 	.word	0x40012400
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010800 	.word	0x40010800

08001f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a33      	ldr	r2, [pc, #204]	; (8002074 <HAL_I2C_MspInit+0xe8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d12c      	bne.n	8002006 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a31      	ldr	r2, [pc, #196]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc4:	23c0      	movs	r3, #192	; 0xc0
 8001fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fc8:	2312      	movs	r3, #18
 8001fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4829      	ldr	r0, [pc, #164]	; (800207c <HAL_I2C_MspInit+0xf0>)
 8001fd8:	f000 ff1e 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fdc:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8001fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2020      	movs	r0, #32
 8001ffa:	f000 fe60 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ffe:	2020      	movs	r0, #32
 8002000:	f000 fe79 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002004:	e031      	b.n	800206a <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_I2C_MspInit+0xf4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d12c      	bne.n	800206a <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_I2C_MspInit+0xec>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0318 	add.w	r3, r7, #24
 800203a:	4619      	mov	r1, r3
 800203c:	480f      	ldr	r0, [pc, #60]	; (800207c <HAL_I2C_MspInit+0xf0>)
 800203e:	f000 feeb 	bl	8002e18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8002048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_I2C_MspInit+0xec>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	2022      	movs	r0, #34	; 0x22
 8002060:	f000 fe2d 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002064:	2022      	movs	r0, #34	; 0x22
 8002066:	f000 fe46 	bl	8002cf6 <HAL_NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40005400 	.word	0x40005400
 8002078:	40021000 	.word	0x40021000
 800207c:	40010c00 	.word	0x40010c00
 8002080:	40005800 	.word	0x40005800

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002088:	e7fe      	b.n	8002088 <NMI_Handler+0x4>

0800208a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <MemManage_Handler+0x4>

08002096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ca:	f000 f889 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <I2C1_ER_IRQHandler+0x10>)
 80020da:	f001 fb91 	bl	8003800 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000044c 	.word	0x2000044c

080020e8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <I2C2_ER_IRQHandler+0x10>)
 80020ee:	f001 fb87 	bl	8003800 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200004a0 	.word	0x200004a0

080020fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	; (8002140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	; (800214c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800212e:	f7ff ffe5 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f002 fe1f 	bl	8004d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002136:	f7ff f99b 	bl	8001470 <main>
  bx lr
 800213a:	4770      	bx	lr
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002144:	08005c60 	.word	0x08005c60
  ldr r2, =_sbss
 8002148:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800214c:	20000528 	.word	0x20000528

08002150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_2_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_Init+0x28>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_Init+0x28>)
 800215e:	f043 0310 	orr.w	r3, r3, #16
 8002162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 fd9f 	bl	8002ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f000 f808 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002170:	f7ff fe9e 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40022000 	.word	0x40022000

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fdb7 	bl	8002d12 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 fd7f 	bl	8002cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000010 	.word	0x20000010
 80021d8:	20000018 	.word	0x20000018
 80021dc:	20000014 	.word	0x20000014

080021e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_IncTick+0x1c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_IncTick+0x20>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a03      	ldr	r2, [pc, #12]	; (8002200 <HAL_IncTick+0x20>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr
 80021fc:	20000018 	.word	0x20000018
 8002200:	20000524 	.word	0x20000524

08002204 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <HAL_GetTick+0x10>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000524 	.word	0x20000524

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fff0 	bl	8002204 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffe0 	bl	8002204 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000018 	.word	0x20000018

08002260 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0be      	b.n	8002400 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fe38 	bl	8001f14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fbf1 	bl	8002a8c <ADC_ConversionStop_Disable>
 80022aa:	4603      	mov	r3, r0
 80022ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 8099 	bne.w	80023ee <HAL_ADC_Init+0x18e>
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8095 	bne.w	80023ee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022cc:	f023 0302 	bic.w	r3, r3, #2
 80022d0:	f043 0202 	orr.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7b1b      	ldrb	r3, [r3, #12]
 80022e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f8:	d003      	beq.n	8002302 <HAL_ADC_Init+0xa2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_ADC_Init+0xa8>
 8002302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002306:	e000      	b.n	800230a <HAL_ADC_Init+0xaa>
 8002308:	2300      	movs	r3, #0
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7d1b      	ldrb	r3, [r3, #20]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d119      	bne.n	800234c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	7b1b      	ldrb	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	3b01      	subs	r3, #1
 8002326:	035a      	lsls	r2, r3, #13
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e00b      	b.n	800234c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	430a      	orrs	r2, r1
 800235e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <HAL_ADC_Init+0x1a8>)
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	430b      	orrs	r3, r1
 8002372:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800237c:	d003      	beq.n	8002386 <HAL_ADC_Init+0x126>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d104      	bne.n	8002390 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	3b01      	subs	r3, #1
 800238c:	051b      	lsls	r3, r3, #20
 800238e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002396:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_ADC_Init+0x1ac>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d10b      	bne.n	80023cc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ca:	e018      	b.n	80023fe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f023 0312 	bic.w	r3, r3, #18
 80023d4:	f043 0210 	orr.w	r2, r3, #16
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ec:	e007      	b.n	80023fe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	f043 0210 	orr.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	ffe1f7fd 	.word	0xffe1f7fd
 800240c:	ff1f0efe 	.word	0xff1f0efe

08002410 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_ADC_Start+0x1a>
 8002426:	2302      	movs	r3, #2
 8002428:	e098      	b.n	800255c <HAL_ADC_Start+0x14c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fad0 	bl	80029d8 <ADC_Enable>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8087 	bne.w	8002552 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a41      	ldr	r2, [pc, #260]	; (8002564 <HAL_ADC_Start+0x154>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d105      	bne.n	800246e <HAL_ADC_Start+0x5e>
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_ADC_Start+0x158>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d026      	beq.n	80024d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002490:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002498:	e01d      	b.n	80024d6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <HAL_ADC_Start+0x158>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_ADC_Start+0xaa>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <HAL_ADC_Start+0x154>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10d      	bne.n	80024d6 <HAL_ADC_Start+0xc6>
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_ADC_Start+0x158>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f023 0206 	bic.w	r2, r3, #6
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80024ee:	e002      	b.n	80024f6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0202 	mvn.w	r2, #2
 8002506:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002512:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002516:	d113      	bne.n	8002540 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <HAL_ADC_Start+0x154>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d105      	bne.n	800252e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_ADC_Start+0x158>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	e00c      	b.n	800255a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	e003      	b.n	800255a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40012800 	.word	0x40012800
 8002568:	40012400 	.word	0x40012400

0800256c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Stop+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e01a      	b.n	80025bc <HAL_ADC_Stop+0x50>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa7c 	bl	8002a8c <ADC_ConversionStop_Disable>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f043 0201 	orr.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025da:	f7ff fe13 	bl	8002204 <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0d3      	b.n	80027ae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d131      	bne.n	8002678 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12a      	bne.n	8002678 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002622:	e021      	b.n	8002668 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d01d      	beq.n	8002668 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_ADC_PollForConversion+0x7e>
 8002632:	f7ff fde7 	bl	8002204 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d212      	bcs.n	8002668 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0a2      	b.n	80027ae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0d6      	beq.n	8002624 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002676:	e070      	b.n	800275a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002678:	4b4f      	ldr	r3, [pc, #316]	; (80027b8 <HAL_ADC_PollForConversion+0x1f4>)
 800267a:	681c      	ldr	r4, [r3, #0]
 800267c:	2002      	movs	r0, #2
 800267e:	f002 fab5 	bl	8004bec <HAL_RCCEx_GetPeriphCLKFreq>
 8002682:	4603      	mov	r3, r0
 8002684:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <HAL_ADC_PollForConversion+0x1f8>)
 8002690:	400b      	ands	r3, r1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x104>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68d9      	ldr	r1, [r3, #12]
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_ADC_PollForConversion+0x1fc>)
 800269e:	400b      	ands	r3, r1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x104>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_ADC_PollForConversion+0x200>)
 80026ac:	400b      	ands	r3, r1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d108      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x100>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68d9      	ldr	r1, [r3, #12]
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_ADC_PollForConversion+0x204>)
 80026ba:	400b      	ands	r3, r1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x100>
 80026c0:	2314      	movs	r3, #20
 80026c2:	e020      	b.n	8002706 <HAL_ADC_PollForConversion+0x142>
 80026c4:	2329      	movs	r3, #41	; 0x29
 80026c6:	e01e      	b.n	8002706 <HAL_ADC_PollForConversion+0x142>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_ADC_PollForConversion+0x200>)
 80026d0:	400b      	ands	r3, r1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x120>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68d9      	ldr	r1, [r3, #12]
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_ADC_PollForConversion+0x204>)
 80026de:	400b      	ands	r3, r1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00d      	beq.n	8002700 <HAL_ADC_PollForConversion+0x13c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6919      	ldr	r1, [r3, #16]
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_ADC_PollForConversion+0x208>)
 80026ec:	400b      	ands	r3, r1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_ADC_PollForConversion+0x140>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68d9      	ldr	r1, [r3, #12]
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_ADC_PollForConversion+0x208>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_PollForConversion+0x140>
 8002700:	2354      	movs	r3, #84	; 0x54
 8002702:	e000      	b.n	8002706 <HAL_ADC_PollForConversion+0x142>
 8002704:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800270c:	e021      	b.n	8002752 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d01a      	beq.n	800274c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_ADC_PollForConversion+0x168>
 800271c:	f7ff fd72 	bl	8002204 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d20f      	bcs.n	800274c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	429a      	cmp	r2, r3
 8002732:	d90b      	bls.n	800274c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	f043 0204 	orr.w	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e030      	b.n	80027ae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3301      	adds	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	429a      	cmp	r2, r3
 8002758:	d8d9      	bhi.n	800270e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f06f 0212 	mvn.w	r2, #18
 8002762:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800277a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800277e:	d115      	bne.n	80027ac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002784:	2b00      	cmp	r3, #0
 8002786:	d111      	bne.n	80027ac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	f043 0201 	orr.w	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000010 	.word	0x20000010
 80027bc:	24924924 	.word	0x24924924
 80027c0:	00924924 	.word	0x00924924
 80027c4:	12492492 	.word	0x12492492
 80027c8:	00492492 	.word	0x00492492
 80027cc:	00249249 	.word	0x00249249

080027d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x20>
 8002804:	2302      	movs	r3, #2
 8002806:	e0dc      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x1da>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b06      	cmp	r3, #6
 8002816:	d81c      	bhi.n	8002852 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b05      	subs	r3, #5
 800282a:	221f      	movs	r2, #31
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	4019      	ands	r1, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b05      	subs	r3, #5
 8002844:	fa00 f203 	lsl.w	r2, r0, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	635a      	str	r2, [r3, #52]	; 0x34
 8002850:	e03c      	b.n	80028cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d81c      	bhi.n	8002894 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	3b23      	subs	r3, #35	; 0x23
 800286c:	221f      	movs	r2, #31
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43db      	mvns	r3, r3
 8002874:	4019      	ands	r1, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b23      	subs	r3, #35	; 0x23
 8002886:	fa00 f203 	lsl.w	r2, r0, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
 8002892:	e01b      	b.n	80028cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b41      	subs	r3, #65	; 0x41
 80028a6:	221f      	movs	r2, #31
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	4019      	ands	r1, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b41      	subs	r3, #65	; 0x41
 80028c0:	fa00 f203 	lsl.w	r2, r0, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d91c      	bls.n	800290e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	3b1e      	subs	r3, #30
 80028e6:	2207      	movs	r2, #7
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4019      	ands	r1, r3
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	6898      	ldr	r0, [r3, #8]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	3b1e      	subs	r3, #30
 8002900:	fa00 f203 	lsl.w	r2, r0, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]
 800290c:	e019      	b.n	8002942 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6919      	ldr	r1, [r3, #16]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	2207      	movs	r2, #7
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	4019      	ands	r1, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6898      	ldr	r0, [r3, #8]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	fa00 f203 	lsl.w	r2, r0, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b10      	cmp	r3, #16
 8002948:	d003      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800294e:	2b11      	cmp	r3, #17
 8002950:	d132      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d125      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d126      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002978:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b10      	cmp	r3, #16
 8002980:	d11a      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002982:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002988:	fba2 2303 	umull	r2, r3, r2, r3
 800298c:	0c9a      	lsrs	r2, r3, #18
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002998:	e002      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3b01      	subs	r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f9      	bne.n	800299a <HAL_ADC_ConfigChannel+0x1b2>
 80029a6:	e007      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40012400 	.word	0x40012400
 80029d0:	20000010 	.word	0x20000010
 80029d4:	431bde83 	.word	0x431bde83

080029d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d040      	beq.n	8002a78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a06:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <ADC_Enable+0xac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <ADC_Enable+0xb0>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0c9b      	lsrs	r3, r3, #18
 8002a12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a14:	e002      	b.n	8002a1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f9      	bne.n	8002a16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a22:	f7ff fbef 	bl	8002204 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a28:	e01f      	b.n	8002a6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a2a:	f7ff fbeb 	bl	8002204 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d918      	bls.n	8002a6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d011      	beq.n	8002a6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d1d8      	bne.n	8002a2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000010 	.word	0x20000010
 8002a88:	431bde83 	.word	0x431bde83

08002a8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d12e      	bne.n	8002b04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ab6:	f7ff fba5 	bl	8002204 <HAL_GetTick>
 8002aba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002abc:	e01b      	b.n	8002af6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002abe:	f7ff fba1 	bl	8002204 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d914      	bls.n	8002af6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10d      	bne.n	8002af6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	f043 0210 	orr.w	r2, r3, #16
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e007      	b.n	8002b06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d0dc      	beq.n	8002abe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4906      	ldr	r1, [pc, #24]	; (8002ba8 <__NVIC_EnableIRQ+0x34>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d301      	bcc.n	8002c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <SysTick_Config+0x40>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c82:	210f      	movs	r1, #15
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f7ff ff90 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <SysTick_Config+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SysTick_Config+0x40>)
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	e000e010 	.word	0xe000e010

08002ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff2d 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd0:	f7ff ff42 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68b9      	ldr	r1, [r7, #8]
 8002cda:	6978      	ldr	r0, [r7, #20]
 8002cdc:	f7ff ff90 	bl	8002c00 <NVIC_EncodePriority>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff5f 	bl	8002bac <__NVIC_SetPriority>
}
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff ff35 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ffa2 	bl	8002c64 <SysTick_Config>
 8002d20:	4603      	mov	r3, r0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d005      	beq.n	8002d4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e051      	b.n	8002df2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 020e 	bic.w	r2, r2, #14
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0201 	bic.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <HAL_DMA_Abort_IT+0xd0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d029      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xa0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_DMA_Abort_IT+0xd4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d022      	beq.n	8002dc8 <HAL_DMA_Abort_IT+0x9c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1f      	ldr	r2, [pc, #124]	; (8002e04 <HAL_DMA_Abort_IT+0xd8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d01a      	beq.n	8002dc2 <HAL_DMA_Abort_IT+0x96>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_DMA_Abort_IT+0xdc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d012      	beq.n	8002dbc <HAL_DMA_Abort_IT+0x90>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1c      	ldr	r2, [pc, #112]	; (8002e0c <HAL_DMA_Abort_IT+0xe0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00a      	beq.n	8002db6 <HAL_DMA_Abort_IT+0x8a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_DMA_Abort_IT+0xe4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d102      	bne.n	8002db0 <HAL_DMA_Abort_IT+0x84>
 8002daa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dae:	e00e      	b.n	8002dce <HAL_DMA_Abort_IT+0xa2>
 8002db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db4:	e00b      	b.n	8002dce <HAL_DMA_Abort_IT+0xa2>
 8002db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dba:	e008      	b.n	8002dce <HAL_DMA_Abort_IT+0xa2>
 8002dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc0:	e005      	b.n	8002dce <HAL_DMA_Abort_IT+0xa2>
 8002dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc6:	e002      	b.n	8002dce <HAL_DMA_Abort_IT+0xa2>
 8002dc8:	2310      	movs	r3, #16
 8002dca:	e000      	b.n	8002dce <HAL_DMA_Abort_IT+0xa2>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <HAL_DMA_Abort_IT+0xe8>)
 8002dd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
    } 
  }
  return status;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40020008 	.word	0x40020008
 8002e00:	4002001c 	.word	0x4002001c
 8002e04:	40020030 	.word	0x40020030
 8002e08:	40020044 	.word	0x40020044
 8002e0c:	40020058 	.word	0x40020058
 8002e10:	4002006c 	.word	0x4002006c
 8002e14:	40020000 	.word	0x40020000

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b08b      	sub	sp, #44	; 0x2c
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e26:	2300      	movs	r3, #0
 8002e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e2a:	e169      	b.n	8003100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 8158 	bne.w	80030fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4a9a      	ldr	r2, [pc, #616]	; (80030b8 <HAL_GPIO_Init+0x2a0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d05e      	beq.n	8002f12 <HAL_GPIO_Init+0xfa>
 8002e54:	4a98      	ldr	r2, [pc, #608]	; (80030b8 <HAL_GPIO_Init+0x2a0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d875      	bhi.n	8002f46 <HAL_GPIO_Init+0x12e>
 8002e5a:	4a98      	ldr	r2, [pc, #608]	; (80030bc <HAL_GPIO_Init+0x2a4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d058      	beq.n	8002f12 <HAL_GPIO_Init+0xfa>
 8002e60:	4a96      	ldr	r2, [pc, #600]	; (80030bc <HAL_GPIO_Init+0x2a4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d86f      	bhi.n	8002f46 <HAL_GPIO_Init+0x12e>
 8002e66:	4a96      	ldr	r2, [pc, #600]	; (80030c0 <HAL_GPIO_Init+0x2a8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d052      	beq.n	8002f12 <HAL_GPIO_Init+0xfa>
 8002e6c:	4a94      	ldr	r2, [pc, #592]	; (80030c0 <HAL_GPIO_Init+0x2a8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d869      	bhi.n	8002f46 <HAL_GPIO_Init+0x12e>
 8002e72:	4a94      	ldr	r2, [pc, #592]	; (80030c4 <HAL_GPIO_Init+0x2ac>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04c      	beq.n	8002f12 <HAL_GPIO_Init+0xfa>
 8002e78:	4a92      	ldr	r2, [pc, #584]	; (80030c4 <HAL_GPIO_Init+0x2ac>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d863      	bhi.n	8002f46 <HAL_GPIO_Init+0x12e>
 8002e7e:	4a92      	ldr	r2, [pc, #584]	; (80030c8 <HAL_GPIO_Init+0x2b0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d046      	beq.n	8002f12 <HAL_GPIO_Init+0xfa>
 8002e84:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_GPIO_Init+0x2b0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d85d      	bhi.n	8002f46 <HAL_GPIO_Init+0x12e>
 8002e8a:	2b12      	cmp	r3, #18
 8002e8c:	d82a      	bhi.n	8002ee4 <HAL_GPIO_Init+0xcc>
 8002e8e:	2b12      	cmp	r3, #18
 8002e90:	d859      	bhi.n	8002f46 <HAL_GPIO_Init+0x12e>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <HAL_GPIO_Init+0x80>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002f13 	.word	0x08002f13
 8002e9c:	08002eed 	.word	0x08002eed
 8002ea0:	08002eff 	.word	0x08002eff
 8002ea4:	08002f41 	.word	0x08002f41
 8002ea8:	08002f47 	.word	0x08002f47
 8002eac:	08002f47 	.word	0x08002f47
 8002eb0:	08002f47 	.word	0x08002f47
 8002eb4:	08002f47 	.word	0x08002f47
 8002eb8:	08002f47 	.word	0x08002f47
 8002ebc:	08002f47 	.word	0x08002f47
 8002ec0:	08002f47 	.word	0x08002f47
 8002ec4:	08002f47 	.word	0x08002f47
 8002ec8:	08002f47 	.word	0x08002f47
 8002ecc:	08002f47 	.word	0x08002f47
 8002ed0:	08002f47 	.word	0x08002f47
 8002ed4:	08002f47 	.word	0x08002f47
 8002ed8:	08002f47 	.word	0x08002f47
 8002edc:	08002ef5 	.word	0x08002ef5
 8002ee0:	08002f09 	.word	0x08002f09
 8002ee4:	4a79      	ldr	r2, [pc, #484]	; (80030cc <HAL_GPIO_Init+0x2b4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eea:	e02c      	b.n	8002f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	623b      	str	r3, [r7, #32]
          break;
 8002ef2:	e029      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	623b      	str	r3, [r7, #32]
          break;
 8002efc:	e024      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	3308      	adds	r3, #8
 8002f04:	623b      	str	r3, [r7, #32]
          break;
 8002f06:	e01f      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	623b      	str	r3, [r7, #32]
          break;
 8002f10:	e01a      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	623b      	str	r3, [r7, #32]
          break;
 8002f1e:	e013      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d105      	bne.n	8002f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f28:	2308      	movs	r3, #8
 8002f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	611a      	str	r2, [r3, #16]
          break;
 8002f32:	e009      	b.n	8002f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f34:	2308      	movs	r3, #8
 8002f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	615a      	str	r2, [r3, #20]
          break;
 8002f3e:	e003      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
          break;
 8002f44:	e000      	b.n	8002f48 <HAL_GPIO_Init+0x130>
          break;
 8002f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	2bff      	cmp	r3, #255	; 0xff
 8002f4c:	d801      	bhi.n	8002f52 <HAL_GPIO_Init+0x13a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	e001      	b.n	8002f56 <HAL_GPIO_Init+0x13e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d802      	bhi.n	8002f64 <HAL_GPIO_Init+0x14c>
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	e002      	b.n	8002f6a <HAL_GPIO_Init+0x152>
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	3b08      	subs	r3, #8
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	210f      	movs	r1, #15
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	fa01 f303 	lsl.w	r3, r1, r3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80b1 	beq.w	80030fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f98:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_GPIO_Init+0x2b8>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_GPIO_Init+0x2b8>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6193      	str	r3, [r2, #24]
 8002fa4:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_GPIO_Init+0x2b8>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fb0:	4a48      	ldr	r2, [pc, #288]	; (80030d4 <HAL_GPIO_Init+0x2bc>)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HAL_GPIO_Init+0x2c0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d013      	beq.n	8003004 <HAL_GPIO_Init+0x1ec>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a3f      	ldr	r2, [pc, #252]	; (80030dc <HAL_GPIO_Init+0x2c4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00d      	beq.n	8003000 <HAL_GPIO_Init+0x1e8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a3e      	ldr	r2, [pc, #248]	; (80030e0 <HAL_GPIO_Init+0x2c8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <HAL_GPIO_Init+0x1e4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3d      	ldr	r2, [pc, #244]	; (80030e4 <HAL_GPIO_Init+0x2cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <HAL_GPIO_Init+0x1e0>
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e006      	b.n	8003006 <HAL_GPIO_Init+0x1ee>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	e004      	b.n	8003006 <HAL_GPIO_Init+0x1ee>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e002      	b.n	8003006 <HAL_GPIO_Init+0x1ee>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <HAL_GPIO_Init+0x1ee>
 8003004:	2300      	movs	r3, #0
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	f002 0203 	and.w	r2, r2, #3
 800300c:	0092      	lsls	r2, r2, #2
 800300e:	4093      	lsls	r3, r2
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003016:	492f      	ldr	r1, [pc, #188]	; (80030d4 <HAL_GPIO_Init+0x2bc>)
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003030:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	492c      	ldr	r1, [pc, #176]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800303e:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	43db      	mvns	r3, r3
 8003046:	4928      	ldr	r1, [pc, #160]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003048:	4013      	ands	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003058:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4922      	ldr	r1, [pc, #136]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e006      	b.n	8003074 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	43db      	mvns	r3, r3
 800306e:	491e      	ldr	r1, [pc, #120]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003070:	4013      	ands	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4918      	ldr	r1, [pc, #96]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]
 800308c:	e006      	b.n	800309c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	43db      	mvns	r3, r3
 8003096:	4914      	ldr	r1, [pc, #80]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 8003098:	4013      	ands	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d021      	beq.n	80030ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_GPIO_Init+0x2d0>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
 80030b4:	e021      	b.n	80030fa <HAL_GPIO_Init+0x2e2>
 80030b6:	bf00      	nop
 80030b8:	10320000 	.word	0x10320000
 80030bc:	10310000 	.word	0x10310000
 80030c0:	10220000 	.word	0x10220000
 80030c4:	10210000 	.word	0x10210000
 80030c8:	10120000 	.word	0x10120000
 80030cc:	10110000 	.word	0x10110000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40010800 	.word	0x40010800
 80030dc:	40010c00 	.word	0x40010c00
 80030e0:	40011000 	.word	0x40011000
 80030e4:	40011400 	.word	0x40011400
 80030e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030ec:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_GPIO_Init+0x304>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	4909      	ldr	r1, [pc, #36]	; (800311c <HAL_GPIO_Init+0x304>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	3301      	adds	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	f47f ae8e 	bne.w	8002e2c <HAL_GPIO_Init+0x14>
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	372c      	adds	r7, #44	; 0x2c
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	40010400 	.word	0x40010400

08003120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e12b      	b.n	800338a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe ff20 	bl	8001f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003184:	f001 fc36 	bl	80049f4 <HAL_RCC_GetPCLK1Freq>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a81      	ldr	r2, [pc, #516]	; (8003394 <HAL_I2C_Init+0x274>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d807      	bhi.n	80031a4 <HAL_I2C_Init+0x84>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a80      	ldr	r2, [pc, #512]	; (8003398 <HAL_I2C_Init+0x278>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e006      	b.n	80031b2 <HAL_I2C_Init+0x92>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a7d      	ldr	r2, [pc, #500]	; (800339c <HAL_I2C_Init+0x27c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0e7      	b.n	800338a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a78      	ldr	r2, [pc, #480]	; (80033a0 <HAL_I2C_Init+0x280>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_I2C_Init+0x274>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d802      	bhi.n	80031f4 <HAL_I2C_Init+0xd4>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	e009      	b.n	8003208 <HAL_I2C_Init+0xe8>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a69      	ldr	r2, [pc, #420]	; (80033a4 <HAL_I2C_Init+0x284>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	3301      	adds	r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800321a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	495c      	ldr	r1, [pc, #368]	; (8003394 <HAL_I2C_Init+0x274>)
 8003224:	428b      	cmp	r3, r1
 8003226:	d819      	bhi.n	800325c <HAL_I2C_Init+0x13c>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e59      	subs	r1, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fbb1 f3f3 	udiv	r3, r1, r3
 8003236:	1c59      	adds	r1, r3, #1
 8003238:	f640 73fc 	movw	r3, #4092	; 0xffc
 800323c:	400b      	ands	r3, r1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_I2C_Init+0x138>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e59      	subs	r1, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003256:	e051      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 8003258:	2304      	movs	r3, #4
 800325a:	e04f      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d111      	bne.n	8003288 <HAL_I2C_Init+0x168>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e012      	b.n	80032ae <HAL_I2C_Init+0x18e>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Init+0x196>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e022      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10e      	bne.n	80032dc <HAL_I2C_Init+0x1bc>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1e58      	subs	r0, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	440b      	add	r3, r1
 80032cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d0:	3301      	adds	r3, #1
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032da:	e00f      	b.n	80032fc <HAL_I2C_Init+0x1dc>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1e58      	subs	r0, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	0099      	lsls	r1, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	6809      	ldr	r1, [r1, #0]
 8003300:	4313      	orrs	r3, r2
 8003302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800332a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6911      	ldr	r1, [r2, #16]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68d2      	ldr	r2, [r2, #12]
 8003336:	4311      	orrs	r1, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	430b      	orrs	r3, r1
 800333e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	000186a0 	.word	0x000186a0
 8003398:	001e847f 	.word	0x001e847f
 800339c:	003d08ff 	.word	0x003d08ff
 80033a0:	431bde83 	.word	0x431bde83
 80033a4:	10624dd3 	.word	0x10624dd3

080033a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	607a      	str	r2, [r7, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	460b      	mov	r3, r1
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	4613      	mov	r3, r2
 80033ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7fe ff22 	bl	8002204 <HAL_GetTick>
 80033c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	f040 80e0 	bne.w	8003590 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2319      	movs	r3, #25
 80033d6:	2201      	movs	r2, #1
 80033d8:	4970      	ldr	r1, [pc, #448]	; (800359c <HAL_I2C_Master_Transmit+0x1f4>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fdb0 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0d3      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x50>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e0cc      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d007      	beq.n	800341e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800342c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2210      	movs	r2, #16
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	893a      	ldrh	r2, [r7, #8]
 800344e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fc40 	bl	8003cec <I2C_MasterRequestWrite>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e08d      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800348c:	e066      	b.n	800355c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	6a39      	ldr	r1, [r7, #32]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fe2a 	bl	80040ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00d      	beq.n	80034ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d107      	bne.n	80034b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06b      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11b      	bne.n	8003530 <HAL_I2C_Master_Transmit+0x188>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d017      	beq.n	8003530 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	781a      	ldrb	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	6a39      	ldr	r1, [r7, #32]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fe1a 	bl	800416e <I2C_WaitOnBTFFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	2b04      	cmp	r3, #4
 8003546:	d107      	bne.n	8003558 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003556:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e01a      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d194      	bne.n	800348e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	00100002 	.word	0x00100002
 80035a0:	ffff0000 	.word	0xffff0000

080035a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	460b      	mov	r3, r1
 80035b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7fe fe26 	bl	8002204 <HAL_GetTick>
 80035b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	f040 8111 	bne.w	80037ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2319      	movs	r3, #25
 80035d2:	2201      	movs	r2, #1
 80035d4:	4988      	ldr	r1, [pc, #544]	; (80037f8 <HAL_I2C_IsDeviceReady+0x254>)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fcb2 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	e104      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2C_IsDeviceReady+0x50>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e0fd      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d007      	beq.n	800361a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0201 	orr.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2224      	movs	r2, #36	; 0x24
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a70      	ldr	r2, [pc, #448]	; (80037fc <HAL_I2C_IsDeviceReady+0x258>)
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fc70 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d103      	bne.n	800367e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0b6      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003682:	897b      	ldrh	r3, [r7, #10]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003690:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe fdb7 	bl	8002204 <HAL_GetTick>
 8003696:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036bc:	bf0c      	ite	eq
 80036be:	2301      	moveq	r3, #1
 80036c0:	2300      	movne	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036c6:	e025      	b.n	8003714 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fe fd9c 	bl	8002204 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <HAL_I2C_IsDeviceReady+0x13a>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d103      	bne.n	80036e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22a0      	movs	r2, #160	; 0xa0
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2ba0      	cmp	r3, #160	; 0xa0
 800371e:	d005      	beq.n	800372c <HAL_I2C_IsDeviceReady+0x188>
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <HAL_I2C_IsDeviceReady+0x188>
 8003726:	7dbb      	ldrb	r3, [r7, #22]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0cd      	beq.n	80036c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d129      	bne.n	8003796 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003750:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2319      	movs	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	4921      	ldr	r1, [pc, #132]	; (80037f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fbe4 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e036      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e02c      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2319      	movs	r3, #25
 80037b6:	2201      	movs	r2, #1
 80037b8:	490f      	ldr	r1, [pc, #60]	; (80037f8 <HAL_I2C_IsDeviceReady+0x254>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fbc0 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e012      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	3301      	adds	r3, #1
 80037ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f4ff af32 	bcc.w	800363e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	00100002 	.word	0x00100002
 80037fc:	ffff0000 	.word	0xffff0000

08003800 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003818:	2300      	movs	r3, #0
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003822:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_I2C_ER_IRQHandler+0x5e>
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	0a1b      	lsrs	r3, r3, #8
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d010      	beq.n	800385e <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800384c:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	0a5b      	lsrs	r3, r3, #9
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <HAL_I2C_ER_IRQHandler+0x88>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003886:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	0a9b      	lsrs	r3, r3, #10
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d03f      	beq.n	8003914 <HAL_I2C_ER_IRQHandler+0x114>
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d039      	beq.n	8003914 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80038a0:	7efb      	ldrb	r3, [r7, #27]
 80038a2:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038ba:	7ebb      	ldrb	r3, [r7, #26]
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d112      	bne.n	80038e6 <HAL_I2C_ER_IRQHandler+0xe6>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_I2C_ER_IRQHandler+0xe6>
 80038c6:	7cfb      	ldrb	r3, [r7, #19]
 80038c8:	2b21      	cmp	r3, #33	; 0x21
 80038ca:	d008      	beq.n	80038de <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b29      	cmp	r3, #41	; 0x29
 80038d0:	d005      	beq.n	80038de <HAL_I2C_ER_IRQHandler+0xde>
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b28      	cmp	r3, #40	; 0x28
 80038d6:	d106      	bne.n	80038e6 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d103      	bne.n	80038e6 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f862 	bl	80039a8 <I2C_Slave_AF>
 80038e4:	e016      	b.n	8003914 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ee:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	f043 0304 	orr.w	r3, r3, #4
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038f8:	7efb      	ldrb	r3, [r7, #27]
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d002      	beq.n	8003904 <HAL_I2C_ER_IRQHandler+0x104>
 80038fe:	7efb      	ldrb	r3, [r7, #27]
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d107      	bne.n	8003914 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003912:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	0adb      	lsrs	r3, r3, #11
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00e      	beq.n	800393e <HAL_I2C_ER_IRQHandler+0x13e>
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800393c:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d008      	beq.n	8003956 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f899 	bl	8003a88 <I2C_ITError>
  }
}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
	...

080039a8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d002      	beq.n	80039ca <I2C_Slave_AF+0x22>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d129      	bne.n	8003a1e <I2C_Slave_AF+0x76>
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b28      	cmp	r3, #40	; 0x28
 80039ce:	d126      	bne.n	8003a1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <I2C_Slave_AF+0xdc>)
 80039d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039e4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff ffaa 	bl	8003970 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a1c:	e02e      	b.n	8003a7c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b21      	cmp	r3, #33	; 0x21
 8003a22:	d126      	bne.n	8003a72 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <I2C_Slave_AF+0xdc>)
 8003a28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2221      	movs	r2, #33	; 0x21
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff77 	bl	800395e <HAL_I2C_SlaveTxCpltCallback>
}
 8003a70:	e004      	b.n	8003a7c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7a:	615a      	str	r2, [r3, #20]
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	ffff0000 	.word	0xffff0000

08003a88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003aa0:	7bbb      	ldrb	r3, [r7, #14]
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d002      	beq.n	8003aac <I2C_ITError+0x24>
 8003aa6:	7bbb      	ldrb	r3, [r7, #14]
 8003aa8:	2b40      	cmp	r3, #64	; 0x40
 8003aaa:	d10a      	bne.n	8003ac2 <I2C_ITError+0x3a>
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2b22      	cmp	r3, #34	; 0x22
 8003ab0:	d107      	bne.n	8003ac2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ac8:	2b28      	cmp	r3, #40	; 0x28
 8003aca:	d107      	bne.n	8003adc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2228      	movs	r2, #40	; 0x28
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ada:	e015      	b.n	8003b08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aea:	d00a      	beq.n	8003b02 <I2C_ITError+0x7a>
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	2b60      	cmp	r3, #96	; 0x60
 8003af0:	d007      	beq.n	8003b02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b16:	d161      	bne.n	8003bdc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d020      	beq.n	8003b76 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	4a6a      	ldr	r2, [pc, #424]	; (8003ce4 <I2C_ITError+0x25c>)
 8003b3a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff f8f3 	bl	8002d2c <HAL_DMA_Abort_IT>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8089 	beq.w	8003c60 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
 8003b74:	e074      	b.n	8003c60 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	4a5a      	ldr	r2, [pc, #360]	; (8003ce4 <I2C_ITError+0x25c>)
 8003b7c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f8d2 	bl	8002d2c <HAL_DMA_Abort_IT>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d068      	beq.n	8003c60 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d10b      	bne.n	8003bb4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	4798      	blx	r3
 8003bda:	e041      	b.n	8003c60 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b60      	cmp	r3, #96	; 0x60
 8003be6:	d125      	bne.n	8003c34 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d10b      	bne.n	8003c1c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff feb1 	bl	8003994 <HAL_I2C_AbortCpltCallback>
 8003c32:	e015      	b.n	8003c60 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10b      	bne.n	8003c5a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fe91 	bl	8003982 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10e      	bne.n	8003c8e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d113      	bne.n	8003cda <I2C_ITError+0x252>
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b28      	cmp	r3, #40	; 0x28
 8003cb6:	d110      	bne.n	8003cda <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0b      	ldr	r2, [pc, #44]	; (8003ce8 <I2C_ITError+0x260>)
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fe4b 	bl	8003970 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08003df1 	.word	0x08003df1
 8003ce8:	ffff0000 	.word	0xffff0000

08003cec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d006      	beq.n	8003d16 <I2C_MasterRequestWrite+0x2a>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d003      	beq.n	8003d16 <I2C_MasterRequestWrite+0x2a>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d14:	d108      	bne.n	8003d28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e00b      	b.n	8003d40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	2b12      	cmp	r3, #18
 8003d2e:	d107      	bne.n	8003d40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f8f7 	bl	8003f40 <I2C_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d66:	d103      	bne.n	8003d70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e035      	b.n	8003de0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7c:	d108      	bne.n	8003d90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d8c:	611a      	str	r2, [r3, #16]
 8003d8e:	e01b      	b.n	8003dc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d90:	897b      	ldrh	r3, [r7, #10]
 8003d92:	11db      	asrs	r3, r3, #7
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f003 0306 	and.w	r3, r3, #6
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	f063 030f 	orn	r3, r3, #15
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <I2C_MasterRequestWrite+0xfc>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f91d 	bl	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e010      	b.n	8003de0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dbe:	897b      	ldrh	r3, [r7, #10]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4907      	ldr	r1, [pc, #28]	; (8003dec <I2C_MasterRequestWrite+0x100>)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f90d 	bl	8003fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010008 	.word	0x00010008
 8003dec:	00010002 	.word	0x00010002

08003df0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e0a:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <I2C_DMAAbort+0x148>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	4a4a      	ldr	r2, [pc, #296]	; (8003f3c <I2C_DMAAbort+0x14c>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a1a      	lsrs	r2, r3, #8
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00da      	lsls	r2, r3, #3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f043 0220 	orr.w	r2, r3, #32
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003e36:	e00a      	b.n	8003e4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4c:	d0ea      	beq.n	8003e24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	2200      	movs	r2, #0
 8003e92:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b60      	cmp	r3, #96	; 0x60
 8003ebe:	d10e      	bne.n	8003ede <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ed6:	6978      	ldr	r0, [r7, #20]
 8003ed8:	f7ff fd5c 	bl	8003994 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003edc:	e027      	b.n	8003f2e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ee4:	2b28      	cmp	r3, #40	; 0x28
 8003ee6:	d117      	bne.n	8003f18 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0201 	orr.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2228      	movs	r2, #40	; 0x28
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f16:	e007      	b.n	8003f28 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f28:	6978      	ldr	r0, [r7, #20]
 8003f2a:	f7ff fd2a 	bl	8003982 <HAL_I2C_ErrorCallback>
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000010 	.word	0x20000010
 8003f3c:	14f8b589 	.word	0x14f8b589

08003f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f50:	e025      	b.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d021      	beq.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fe f953 	bl	8002204 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d116      	bne.n	8003f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e023      	b.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10d      	bne.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	e00c      	b.n	8003fde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d0b6      	beq.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b084      	sub	sp, #16
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ffc:	e051      	b.n	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400c:	d123      	bne.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004026:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e046      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d021      	beq.n	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe f8d1 	bl	8002204 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d116      	bne.n	80040a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f043 0220 	orr.w	r2, r3, #32
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e020      	b.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10c      	bne.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	e00b      	b.n	80040de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	43da      	mvns	r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4013      	ands	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d18d      	bne.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f8:	e02d      	b.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f878 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e02d      	b.n	8004166 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d021      	beq.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe f877 	bl	8002204 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d116      	bne.n	8004156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e007      	b.n	8004166 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d1ca      	bne.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800417a:	e02d      	b.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f837 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e02d      	b.n	80041e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d021      	beq.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004194:	f7fe f836 	bl	8002204 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e007      	b.n	80041e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d1ca      	bne.n	800417c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d11b      	bne.n	8004240 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004210:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0204 	orr.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e26c      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8087 	beq.w	800437a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800426c:	4b92      	ldr	r3, [pc, #584]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b04      	cmp	r3, #4
 8004276:	d00c      	beq.n	8004292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004278:	4b8f      	ldr	r3, [pc, #572]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b08      	cmp	r3, #8
 8004282:	d112      	bne.n	80042aa <HAL_RCC_OscConfig+0x5e>
 8004284:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d10b      	bne.n	80042aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004292:	4b89      	ldr	r3, [pc, #548]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06c      	beq.n	8004378 <HAL_RCC_OscConfig+0x12c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d168      	bne.n	8004378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e246      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x76>
 80042b4:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7f      	ldr	r2, [pc, #508]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e02e      	b.n	8004320 <HAL_RCC_OscConfig+0xd4>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x98>
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a77      	ldr	r2, [pc, #476]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xd4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0xbc>
 80042ee:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a71      	ldr	r2, [pc, #452]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6e      	ldr	r2, [pc, #440]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xd4>
 8004308:	4b6b      	ldr	r3, [pc, #428]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6a      	ldr	r2, [pc, #424]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a67      	ldr	r2, [pc, #412]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fd ff6c 	bl	8002204 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd ff68 	bl	8002204 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1fa      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xe4>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fd ff58 	bl	8002204 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd ff54 	bl	8002204 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1e6      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x10c>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b08      	cmp	r3, #8
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x18c>
 800439e:	4b46      	ldr	r3, [pc, #280]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x176>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e1ba      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4939      	ldr	r1, [pc, #228]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	e03a      	b.n	800444e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x270>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fd ff0d 	bl	8002204 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ee:	f7fd ff09 	bl	8002204 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e19b      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4927      	ldr	r1, [pc, #156]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004422:	4b26      	ldr	r3, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x270>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd feec 	bl	8002204 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004430:	f7fd fee8 	bl	8002204 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e17a      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03a      	beq.n	80044d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d019      	beq.n	8004496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <HAL_RCC_OscConfig+0x274>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004468:	f7fd fecc 	bl	8002204 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004470:	f7fd fec8 	bl	8002204 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e15a      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800448e:	2001      	movs	r0, #1
 8004490:	f000 fad8 	bl	8004a44 <RCC_Delay>
 8004494:	e01c      	b.n	80044d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <HAL_RCC_OscConfig+0x274>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449c:	f7fd feb2 	bl	8002204 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a2:	e00f      	b.n	80044c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fd feae 	bl	8002204 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d908      	bls.n	80044c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e140      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	42420000 	.word	0x42420000
 80044c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	4b9e      	ldr	r3, [pc, #632]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e9      	bne.n	80044a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a6 	beq.w	800462a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e2:	4b97      	ldr	r3, [pc, #604]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	4b94      	ldr	r3, [pc, #592]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4a93      	ldr	r2, [pc, #588]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	61d3      	str	r3, [r2, #28]
 80044fa:	4b91      	ldr	r3, [pc, #580]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b8e      	ldr	r3, [pc, #568]	; (8004744 <HAL_RCC_OscConfig+0x4f8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b8b      	ldr	r3, [pc, #556]	; (8004744 <HAL_RCC_OscConfig+0x4f8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a8a      	ldr	r2, [pc, #552]	; (8004744 <HAL_RCC_OscConfig+0x4f8>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fd fe6f 	bl	8002204 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fd fe6b 	bl	8002204 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b64      	cmp	r3, #100	; 0x64
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0fd      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b81      	ldr	r3, [pc, #516]	; (8004744 <HAL_RCC_OscConfig+0x4f8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x312>
 8004550:	4b7b      	ldr	r3, [pc, #492]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a7a      	ldr	r2, [pc, #488]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	e02d      	b.n	80045ba <HAL_RCC_OscConfig+0x36e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x334>
 8004566:	4b76      	ldr	r3, [pc, #472]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4a75      	ldr	r2, [pc, #468]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6213      	str	r3, [r2, #32]
 8004572:	4b73      	ldr	r3, [pc, #460]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a72      	ldr	r2, [pc, #456]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004578:	f023 0304 	bic.w	r3, r3, #4
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	e01c      	b.n	80045ba <HAL_RCC_OscConfig+0x36e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b05      	cmp	r3, #5
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x356>
 8004588:	4b6d      	ldr	r3, [pc, #436]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4a6c      	ldr	r2, [pc, #432]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	4b6a      	ldr	r3, [pc, #424]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a69      	ldr	r2, [pc, #420]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	e00b      	b.n	80045ba <HAL_RCC_OscConfig+0x36e>
 80045a2:	4b67      	ldr	r3, [pc, #412]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4a66      	ldr	r2, [pc, #408]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6213      	str	r3, [r2, #32]
 80045ae:	4b64      	ldr	r3, [pc, #400]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a63      	ldr	r2, [pc, #396]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fd fe1f 	bl	8002204 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fd fe1b 	bl	8002204 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0ab      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	4b57      	ldr	r3, [pc, #348]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ee      	beq.n	80045ca <HAL_RCC_OscConfig+0x37e>
 80045ec:	e014      	b.n	8004618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ee:	f7fd fe09 	bl	8002204 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f4:	e00a      	b.n	800460c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fd fe05 	bl	8002204 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e095      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	4b4c      	ldr	r3, [pc, #304]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ee      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461e:	4b48      	ldr	r3, [pc, #288]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	4a47      	ldr	r2, [pc, #284]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8081 	beq.w	8004736 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d061      	beq.n	8004704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d146      	bne.n	80046d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_OscConfig+0x4fc>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464e:	f7fd fdd9 	bl	8002204 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7fd fdd5 	bl	8002204 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e067      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004668:	4b35      	ldr	r3, [pc, #212]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d108      	bne.n	8004690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	492d      	ldr	r1, [pc, #180]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a19      	ldr	r1, [r3, #32]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	430b      	orrs	r3, r1
 80046a2:	4927      	ldr	r1, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a8:	4b27      	ldr	r3, [pc, #156]	; (8004748 <HAL_RCC_OscConfig+0x4fc>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fd fda9 	bl	8002204 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b6:	f7fd fda5 	bl	8002204 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e037      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c8:	4b1d      	ldr	r3, [pc, #116]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x46a>
 80046d4:	e02f      	b.n	8004736 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <HAL_RCC_OscConfig+0x4fc>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fd fd92 	bl	8002204 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fd fd8e 	bl	8002204 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e020      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x498>
 8004702:	e018      	b.n	8004736 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e013      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_RCC_OscConfig+0x4f4>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	429a      	cmp	r2, r3
 8004722:	d106      	bne.n	8004732 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d001      	beq.n	8004736 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000
 8004744:	40007000 	.word	0x40007000
 8004748:	42420060 	.word	0x42420060

0800474c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0d0      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b6a      	ldr	r3, [pc, #424]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d910      	bls.n	8004790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b67      	ldr	r3, [pc, #412]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 0207 	bic.w	r2, r3, #7
 8004776:	4965      	ldr	r1, [pc, #404]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b63      	ldr	r3, [pc, #396]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0b8      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a8:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a58      	ldr	r2, [pc, #352]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c0:	4b53      	ldr	r3, [pc, #332]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a52      	ldr	r2, [pc, #328]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047cc:	4b50      	ldr	r3, [pc, #320]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	494d      	ldr	r1, [pc, #308]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d040      	beq.n	800486c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d115      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e07f      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e073      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481a:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e06b      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4936      	ldr	r1, [pc, #216]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800483c:	f7fd fce2 	bl	8002204 <HAL_GetTick>
 8004840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	e00a      	b.n	800485a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004844:	f7fd fcde 	bl	8002204 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004852:	4293      	cmp	r3, r2
 8004854:	d901      	bls.n	800485a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e053      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 020c 	and.w	r2, r3, #12
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	429a      	cmp	r2, r3
 800486a:	d1eb      	bne.n	8004844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d210      	bcs.n	800489c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 0207 	bic.w	r2, r3, #7
 8004882:	4922      	ldr	r1, [pc, #136]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4313      	orrs	r3, r2
 8004888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e032      	b.n	8004902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4916      	ldr	r1, [pc, #88]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	490e      	ldr	r1, [pc, #56]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048da:	f000 f821 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048de:	4602      	mov	r2, r0
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	490a      	ldr	r1, [pc, #40]	; (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	5ccb      	ldrb	r3, [r1, r3]
 80048ee:	fa22 f303 	lsr.w	r3, r2, r3
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x1cc>)
 80048f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1d0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fd fc40 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40022000 	.word	0x40022000
 8004910:	40021000 	.word	0x40021000
 8004914:	08005c18 	.word	0x08005c18
 8004918:	20000010 	.word	0x20000010
 800491c:	20000014 	.word	0x20000014

08004920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	b490      	push	{r4, r7}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004928:	1d3c      	adds	r4, r7, #4
 800492a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800492c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004930:	f240 2301 	movw	r3, #513	; 0x201
 8004934:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	2300      	movs	r3, #0
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b04      	cmp	r3, #4
 8004958:	d002      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0x40>
 800495a:	2b08      	cmp	r3, #8
 800495c:	d003      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x46>
 800495e:	e02d      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004962:	623b      	str	r3, [r7, #32]
      break;
 8004964:	e02d      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	0c9b      	lsrs	r3, r3, #18
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004972:	4413      	add	r3, r2
 8004974:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004978:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	0c5b      	lsrs	r3, r3, #17
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004992:	4413      	add	r3, r2
 8004994:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004998:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	4a0e      	ldr	r2, [pc, #56]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499e:	fb02 f203 	mul.w	r2, r2, r3
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	e004      	b.n	80049b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80049b0:	fb02 f303 	mul.w	r3, r2, r3
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	623b      	str	r3, [r7, #32]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049be:	623b      	str	r3, [r7, #32]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc90      	pop	{r4, r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	08004e9c 	.word	0x08004e9c
 80049d4:	40021000 	.word	0x40021000
 80049d8:	007a1200 	.word	0x007a1200
 80049dc:	003d0900 	.word	0x003d0900

080049e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b02      	ldr	r3, [pc, #8]	; (80049f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	20000010 	.word	0x20000010

080049f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049f8:	f7ff fff2 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08005c28 	.word	0x08005c28

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a20:	f7ff ffde 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	0adb      	lsrs	r3, r3, #11
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4903      	ldr	r1, [pc, #12]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	08005c28 	.word	0x08005c28

08004a44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <RCC_Delay+0x34>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <RCC_Delay+0x38>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	0a5b      	lsrs	r3, r3, #9
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a60:	bf00      	nop
  }
  while (Delay --);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1e5a      	subs	r2, r3, #1
 8004a66:	60fa      	str	r2, [r7, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f9      	bne.n	8004a60 <RCC_Delay+0x1c>
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	20000010 	.word	0x20000010
 8004a7c:	10624dd3 	.word	0x10624dd3

08004a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d07d      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa0:	4b4f      	ldr	r3, [pc, #316]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b4c      	ldr	r3, [pc, #304]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	4a4b      	ldr	r2, [pc, #300]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	61d3      	str	r3, [r2, #28]
 8004ab8:	4b49      	ldr	r3, [pc, #292]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac8:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d118      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a42      	ldr	r2, [pc, #264]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae0:	f7fd fb90 	bl	8002204 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae6:	e008      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ae8:	f7fd fb8c 	bl	8002204 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e06d      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afa:	4b3a      	ldr	r3, [pc, #232]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b06:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d02e      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d027      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b24:	4b2e      	ldr	r3, [pc, #184]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b34:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b3a:	4a29      	ldr	r2, [pc, #164]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d014      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7fd fb5b 	bl	8002204 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b52:	f7fd fb57 	bl	8002204 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e036      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ee      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b74:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4917      	ldr	r1, [pc, #92]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	490b      	ldr	r1, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4904      	ldr	r1, [pc, #16]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
 8004be8:	42420440 	.word	0x42420440

08004bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b08d      	sub	sp, #52	; 0x34
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004bf4:	4b5a      	ldr	r3, [pc, #360]	; (8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004bf6:	f107 040c 	add.w	r4, r7, #12
 8004bfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c00:	f240 2301 	movw	r3, #513	; 0x201
 8004c04:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	2300      	movs	r3, #0
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	f200 8091 	bhi.w	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d04c      	beq.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d07c      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004c34:	e089      	b.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004c36:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004c3c:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8082 	beq.w	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	0c9b      	lsrs	r3, r3, #18
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c56:	4413      	add	r3, r2
 8004c58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c5c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d018      	beq.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c68:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	0c5b      	lsrs	r3, r3, #17
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c76:	4413      	add	r3, r2
 8004c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00d      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004c88:	4a37      	ldr	r2, [pc, #220]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c98:	e004      	b.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	4a33      	ldr	r2, [pc, #204]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004ca4:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb0:	d102      	bne.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004cb6:	e04a      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	4a2c      	ldr	r2, [pc, #176]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	085b      	lsrs	r3, r3, #1
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004cc6:	e042      	b.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004cc8:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd8:	d108      	bne.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cea:	e01f      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf6:	d109      	bne.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004d04:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	e00f      	b.n	8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d16:	d11c      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d016      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004d24:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d2a:	e012      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004d2c:	e011      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004d2e:	f7ff fe75 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8004d32:	4602      	mov	r2, r0
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	0b9b      	lsrs	r3, r3, #14
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d48:	e004      	b.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004d52:	bf00      	nop
    }
  }
  return (frequency);
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3734      	adds	r7, #52	; 0x34
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	08004eac 	.word	0x08004eac
 8004d64:	40021000 	.word	0x40021000
 8004d68:	007a1200 	.word	0x007a1200
 8004d6c:	003d0900 	.word	0x003d0900
 8004d70:	aaaaaaab 	.word	0xaaaaaaab

08004d74 <__libc_init_array>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	2600      	movs	r6, #0
 8004d78:	4d0c      	ldr	r5, [pc, #48]	; (8004dac <__libc_init_array+0x38>)
 8004d7a:	4c0d      	ldr	r4, [pc, #52]	; (8004db0 <__libc_init_array+0x3c>)
 8004d7c:	1b64      	subs	r4, r4, r5
 8004d7e:	10a4      	asrs	r4, r4, #2
 8004d80:	42a6      	cmp	r6, r4
 8004d82:	d109      	bne.n	8004d98 <__libc_init_array+0x24>
 8004d84:	f000 f87e 	bl	8004e84 <_init>
 8004d88:	2600      	movs	r6, #0
 8004d8a:	4d0a      	ldr	r5, [pc, #40]	; (8004db4 <__libc_init_array+0x40>)
 8004d8c:	4c0a      	ldr	r4, [pc, #40]	; (8004db8 <__libc_init_array+0x44>)
 8004d8e:	1b64      	subs	r4, r4, r5
 8004d90:	10a4      	asrs	r4, r4, #2
 8004d92:	42a6      	cmp	r6, r4
 8004d94:	d105      	bne.n	8004da2 <__libc_init_array+0x2e>
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9c:	4798      	blx	r3
 8004d9e:	3601      	adds	r6, #1
 8004da0:	e7ee      	b.n	8004d80 <__libc_init_array+0xc>
 8004da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da6:	4798      	blx	r3
 8004da8:	3601      	adds	r6, #1
 8004daa:	e7f2      	b.n	8004d92 <__libc_init_array+0x1e>
 8004dac:	08005c58 	.word	0x08005c58
 8004db0:	08005c58 	.word	0x08005c58
 8004db4:	08005c58 	.word	0x08005c58
 8004db8:	08005c5c 	.word	0x08005c5c

08004dbc <__itoa>:
 8004dbc:	1e93      	subs	r3, r2, #2
 8004dbe:	2b22      	cmp	r3, #34	; 0x22
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	d904      	bls.n	8004dd0 <__itoa+0x14>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	461c      	mov	r4, r3
 8004dca:	700b      	strb	r3, [r1, #0]
 8004dcc:	4620      	mov	r0, r4
 8004dce:	bd10      	pop	{r4, pc}
 8004dd0:	2a0a      	cmp	r2, #10
 8004dd2:	d109      	bne.n	8004de8 <__itoa+0x2c>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	da07      	bge.n	8004de8 <__itoa+0x2c>
 8004dd8:	232d      	movs	r3, #45	; 0x2d
 8004dda:	700b      	strb	r3, [r1, #0]
 8004ddc:	2101      	movs	r1, #1
 8004dde:	4240      	negs	r0, r0
 8004de0:	4421      	add	r1, r4
 8004de2:	f000 f80d 	bl	8004e00 <__utoa>
 8004de6:	e7f1      	b.n	8004dcc <__itoa+0x10>
 8004de8:	2100      	movs	r1, #0
 8004dea:	e7f9      	b.n	8004de0 <__itoa+0x24>

08004dec <itoa>:
 8004dec:	f7ff bfe6 	b.w	8004dbc <__itoa>

08004df0 <memset>:
 8004df0:	4603      	mov	r3, r0
 8004df2:	4402      	add	r2, r0
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d100      	bne.n	8004dfa <memset+0xa>
 8004df8:	4770      	bx	lr
 8004dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfe:	e7f9      	b.n	8004df4 <memset+0x4>

08004e00 <__utoa>:
 8004e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e02:	b08b      	sub	sp, #44	; 0x2c
 8004e04:	4605      	mov	r5, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	466e      	mov	r6, sp
 8004e0a:	4c1d      	ldr	r4, [pc, #116]	; (8004e80 <__utoa+0x80>)
 8004e0c:	f104 0c20 	add.w	ip, r4, #32
 8004e10:	4637      	mov	r7, r6
 8004e12:	6820      	ldr	r0, [r4, #0]
 8004e14:	6861      	ldr	r1, [r4, #4]
 8004e16:	3408      	adds	r4, #8
 8004e18:	c703      	stmia	r7!, {r0, r1}
 8004e1a:	4564      	cmp	r4, ip
 8004e1c:	463e      	mov	r6, r7
 8004e1e:	d1f7      	bne.n	8004e10 <__utoa+0x10>
 8004e20:	7921      	ldrb	r1, [r4, #4]
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	7139      	strb	r1, [r7, #4]
 8004e26:	1e91      	subs	r1, r2, #2
 8004e28:	2922      	cmp	r1, #34	; 0x22
 8004e2a:	6038      	str	r0, [r7, #0]
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	d904      	bls.n	8004e3c <__utoa+0x3c>
 8004e32:	7019      	strb	r1, [r3, #0]
 8004e34:	460b      	mov	r3, r1
 8004e36:	4618      	mov	r0, r3
 8004e38:	b00b      	add	sp, #44	; 0x2c
 8004e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3c:	1e58      	subs	r0, r3, #1
 8004e3e:	4684      	mov	ip, r0
 8004e40:	fbb5 f7f2 	udiv	r7, r5, r2
 8004e44:	fb02 5617 	mls	r6, r2, r7, r5
 8004e48:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004e4c:	4476      	add	r6, lr
 8004e4e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004e52:	460c      	mov	r4, r1
 8004e54:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004e58:	462e      	mov	r6, r5
 8004e5a:	42b2      	cmp	r2, r6
 8004e5c:	463d      	mov	r5, r7
 8004e5e:	f101 0101 	add.w	r1, r1, #1
 8004e62:	d9ed      	bls.n	8004e40 <__utoa+0x40>
 8004e64:	2200      	movs	r2, #0
 8004e66:	545a      	strb	r2, [r3, r1]
 8004e68:	1919      	adds	r1, r3, r4
 8004e6a:	1aa5      	subs	r5, r4, r2
 8004e6c:	42aa      	cmp	r2, r5
 8004e6e:	dae2      	bge.n	8004e36 <__utoa+0x36>
 8004e70:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004e74:	780e      	ldrb	r6, [r1, #0]
 8004e76:	3201      	adds	r2, #1
 8004e78:	7006      	strb	r6, [r0, #0]
 8004e7a:	f801 5901 	strb.w	r5, [r1], #-1
 8004e7e:	e7f4      	b.n	8004e6a <__utoa+0x6a>
 8004e80:	08005c30 	.word	0x08005c30

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
