
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a4  080060a4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080060a4  080060a4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060a4  080060a4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080060ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000001c  080060c8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  080060c8  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb2b  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecf  00000000  00000000  0002bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002da40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001779f  00000000  00000000  0002ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c46c  00000000  00000000  0004646f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086e10  00000000  00000000  000528db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d96eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a8  00000000  00000000  000d9740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	080052e0 	.word	0x080052e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	080052e0 	.word	0x080052e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <trimm>:
uint8_t pointer_p1 = 0x01;
uint8_t dataDAC [3] = {0x40, 0xFF, 0xFF};
uint32_t ADCout [4];

char* trimm(float f)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	static char trimmed [4];

	f *= 100;
 8000f7c:	4929      	ldr	r1, [pc, #164]	; (8001024 <trimm+0xb0>)
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fe12 	bl	8000ba8 <__aeabi_fmul>
 8000f84:	4603      	mov	r3, r0
 8000f86:	607b      	str	r3, [r7, #4]
	uint16_t g = f;
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffd3 	bl	8000f34 <__aeabi_f2uiz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	81bb      	strh	r3, [r7, #12]
	itoa(g, trimmed, 10);
 8000f92:	89bb      	ldrh	r3, [r7, #12]
 8000f94:	220a      	movs	r2, #10
 8000f96:	4924      	ldr	r1, [pc, #144]	; (8001028 <trimm+0xb4>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 f955 	bl	8005248 <itoa>

	if(g<10)
 8000f9e:	89bb      	ldrh	r3, [r7, #12]
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	d80c      	bhi.n	8000fbe <trimm+0x4a>
	{
		trimmed[3] = trimmed[0];
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <trimm+0xb4>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <trimm+0xb4>)
 8000faa:	70da      	strb	r2, [r3, #3]
		trimmed[2] = '0';
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <trimm+0xb4>)
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <trimm+0xb4>)
 8000fb4:	2230      	movs	r2, #48	; 0x30
 8000fb6:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <trimm+0xb4>)
 8000fba:	2220      	movs	r2, #32
 8000fbc:	701a      	strb	r2, [r3, #0]


	}
	if((g<100)&&(g>9))
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	2b63      	cmp	r3, #99	; 0x63
 8000fc2:	d810      	bhi.n	8000fe6 <trimm+0x72>
 8000fc4:	89bb      	ldrh	r3, [r7, #12]
 8000fc6:	2b09      	cmp	r3, #9
 8000fc8:	d90d      	bls.n	8000fe6 <trimm+0x72>
	{
		trimmed[3] = trimmed[1];
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <trimm+0xb4>)
 8000fcc:	785a      	ldrb	r2, [r3, #1]
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <trimm+0xb4>)
 8000fd0:	70da      	strb	r2, [r3, #3]
		trimmed[2] = trimmed[0];
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <trimm+0xb4>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <trimm+0xb4>)
 8000fd8:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <trimm+0xb4>)
 8000fdc:	2230      	movs	r2, #48	; 0x30
 8000fde:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <trimm+0xb4>)
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	701a      	strb	r2, [r3, #0]

	}
	if((g<1000)&&(g>99))
 8000fe6:	89bb      	ldrh	r3, [r7, #12]
 8000fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fec:	d215      	bcs.n	800101a <trimm+0xa6>
 8000fee:	89bb      	ldrh	r3, [r7, #12]
 8000ff0:	2b63      	cmp	r3, #99	; 0x63
 8000ff2:	d912      	bls.n	800101a <trimm+0xa6>
	{
		for(uint8_t i = 3; i>0; i--)
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e009      	b.n	800100e <trimm+0x9a>
		{
			trimmed[i] = trimmed[i-1];
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	1e5a      	subs	r2, r3, #1
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4909      	ldr	r1, [pc, #36]	; (8001028 <trimm+0xb4>)
 8001002:	5c89      	ldrb	r1, [r1, r2]
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <trimm+0xb4>)
 8001006:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 3; i>0; i--)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3b01      	subs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1f2      	bne.n	8000ffa <trimm+0x86>
		}
		trimmed[0] = ' ';
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <trimm+0xb4>)
 8001016:	2220      	movs	r2, #32
 8001018:	701a      	strb	r2, [r3, #0]

	}

	return trimmed;
 800101a:	4b03      	ldr	r3, [pc, #12]	; (8001028 <trimm+0xb4>)
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	42c80000 	.word	0x42c80000
 8001028:	20000040 	.word	0x20000040

0800102c <drawlogoC>:
void drawlogoC (uint8_t x, uint8_t y){
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	  SSD1306_DrawLine((5+x), (y+5), (5+x), (y+11), 1);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	b29b      	uxth	r3, r3
 8001040:	3305      	adds	r3, #5
 8001042:	b298      	uxth	r0, r3
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	b29b      	uxth	r3, r3
 8001048:	3305      	adds	r3, #5
 800104a:	b299      	uxth	r1, r3
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	b29b      	uxth	r3, r3
 8001050:	3305      	adds	r3, #5
 8001052:	b29a      	uxth	r2, r3
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	b29b      	uxth	r3, r3
 8001058:	330b      	adds	r3, #11
 800105a:	b29b      	uxth	r3, r3
 800105c:	2401      	movs	r4, #1
 800105e:	9400      	str	r4, [sp, #0]
 8001060:	f000 ff18 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((6+x), (y+3), (6+x), (y+13), 1);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	b29b      	uxth	r3, r3
 8001068:	3306      	adds	r3, #6
 800106a:	b298      	uxth	r0, r3
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	b29b      	uxth	r3, r3
 8001070:	3303      	adds	r3, #3
 8001072:	b299      	uxth	r1, r3
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	b29b      	uxth	r3, r3
 8001078:	3306      	adds	r3, #6
 800107a:	b29a      	uxth	r2, r3
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	b29b      	uxth	r3, r3
 8001080:	330d      	adds	r3, #13
 8001082:	b29b      	uxth	r3, r3
 8001084:	2401      	movs	r4, #1
 8001086:	9400      	str	r4, [sp, #0]
 8001088:	f000 ff04 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+3), (7+x), (y+5), 1);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	b29b      	uxth	r3, r3
 8001090:	3307      	adds	r3, #7
 8001092:	b298      	uxth	r0, r3
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	b29b      	uxth	r3, r3
 8001098:	3303      	adds	r3, #3
 800109a:	b299      	uxth	r1, r3
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	3307      	adds	r3, #7
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3305      	adds	r3, #5
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2401      	movs	r4, #1
 80010ae:	9400      	str	r4, [sp, #0]
 80010b0:	f000 fef0 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+11), (7+x), (y+13), 1);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3307      	adds	r3, #7
 80010ba:	b298      	uxth	r0, r3
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	330b      	adds	r3, #11
 80010c2:	b299      	uxth	r1, r3
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3307      	adds	r3, #7
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	330d      	adds	r3, #13
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2401      	movs	r4, #1
 80010d6:	9400      	str	r4, [sp, #0]
 80010d8:	f000 fedc 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+14), (10+x), (y+14), 1);
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3308      	adds	r3, #8
 80010e2:	b298      	uxth	r0, r3
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	330e      	adds	r3, #14
 80010ea:	b299      	uxth	r1, r3
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	330a      	adds	r3, #10
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	330e      	adds	r3, #14
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2401      	movs	r4, #1
 80010fe:	9400      	str	r4, [sp, #0]
 8001100:	f000 fec8 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+13), (10+x), (y+13), 1);
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	b29b      	uxth	r3, r3
 8001108:	3308      	adds	r3, #8
 800110a:	b298      	uxth	r0, r3
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	b29b      	uxth	r3, r3
 8001110:	330d      	adds	r3, #13
 8001112:	b299      	uxth	r1, r3
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	b29b      	uxth	r3, r3
 8001118:	330a      	adds	r3, #10
 800111a:	b29a      	uxth	r2, r3
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	b29b      	uxth	r3, r3
 8001120:	330d      	adds	r3, #13
 8001122:	b29b      	uxth	r3, r3
 8001124:	2401      	movs	r4, #1
 8001126:	9400      	str	r4, [sp, #0]
 8001128:	f000 feb4 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+2), (10+x), (y+2), 1);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	b29b      	uxth	r3, r3
 8001130:	3308      	adds	r3, #8
 8001132:	b298      	uxth	r0, r3
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	b29b      	uxth	r3, r3
 8001138:	3302      	adds	r3, #2
 800113a:	b299      	uxth	r1, r3
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	b29b      	uxth	r3, r3
 8001140:	330a      	adds	r3, #10
 8001142:	b29a      	uxth	r2, r3
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	b29b      	uxth	r3, r3
 8001148:	3302      	adds	r3, #2
 800114a:	b29b      	uxth	r3, r3
 800114c:	2401      	movs	r4, #1
 800114e:	9400      	str	r4, [sp, #0]
 8001150:	f000 fea0 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+3), (10+x), (y+3), 1);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	b29b      	uxth	r3, r3
 8001158:	3308      	adds	r3, #8
 800115a:	b298      	uxth	r0, r3
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	b29b      	uxth	r3, r3
 8001160:	3303      	adds	r3, #3
 8001162:	b299      	uxth	r1, r3
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	b29b      	uxth	r3, r3
 8001168:	330a      	adds	r3, #10
 800116a:	b29a      	uxth	r2, r3
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	b29b      	uxth	r3, r3
 8001170:	3303      	adds	r3, #3
 8001172:	b29b      	uxth	r3, r3
 8001174:	2401      	movs	r4, #1
 8001176:	9400      	str	r4, [sp, #0]
 8001178:	f000 fe8c 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+3), (11+x), (y+4), 1);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	b29b      	uxth	r3, r3
 8001180:	330b      	adds	r3, #11
 8001182:	b298      	uxth	r0, r3
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	b29b      	uxth	r3, r3
 8001188:	3303      	adds	r3, #3
 800118a:	b299      	uxth	r1, r3
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	b29b      	uxth	r3, r3
 8001190:	330b      	adds	r3, #11
 8001192:	b29a      	uxth	r2, r3
 8001194:	79bb      	ldrb	r3, [r7, #6]
 8001196:	b29b      	uxth	r3, r3
 8001198:	3304      	adds	r3, #4
 800119a:	b29b      	uxth	r3, r3
 800119c:	2401      	movs	r4, #1
 800119e:	9400      	str	r4, [sp, #0]
 80011a0:	f000 fe78 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+13), (11+x), (y+12), 1);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	330b      	adds	r3, #11
 80011aa:	b298      	uxth	r0, r3
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	330d      	adds	r3, #13
 80011b2:	b299      	uxth	r1, r3
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	330b      	adds	r3, #11
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	330c      	adds	r3, #12
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2401      	movs	r4, #1
 80011c6:	9400      	str	r4, [sp, #0]
 80011c8:	f000 fe64 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+4), (12+x), (y+6), 1);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	330c      	adds	r3, #12
 80011d2:	b298      	uxth	r0, r3
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3304      	adds	r3, #4
 80011da:	b299      	uxth	r1, r3
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	330c      	adds	r3, #12
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	3306      	adds	r3, #6
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	2401      	movs	r4, #1
 80011ee:	9400      	str	r4, [sp, #0]
 80011f0:	f000 fe50 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+12), (12+x), (y+10), 1);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	330c      	adds	r3, #12
 80011fa:	b298      	uxth	r0, r3
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	330c      	adds	r3, #12
 8001202:	b299      	uxth	r1, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	b29b      	uxth	r3, r3
 8001208:	330c      	adds	r3, #12
 800120a:	b29a      	uxth	r2, r3
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	b29b      	uxth	r3, r3
 8001210:	330a      	adds	r3, #10
 8001212:	b29b      	uxth	r3, r3
 8001214:	2401      	movs	r4, #1
 8001216:	9400      	str	r4, [sp, #0]
 8001218:	f000 fe3c 	bl	8001e94 <SSD1306_DrawLine>
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}

08001224 <drawmenu1>:
void drawmenu1(uint8_t cursorm1, uint8_t cvcc, float x, float y)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08b      	sub	sp, #44	; 0x2c
 8001228:	af02      	add	r7, sp, #8
 800122a:	60ba      	str	r2, [r7, #8]
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	460b      	mov	r3, r1
 8001234:	73bb      	strb	r3, [r7, #14]
	  SSD1306_Clear();
 8001236:	f000 ff28 	bl	800208a <SSD1306_Clear>
	  cursorm1 = ~cursorm1;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	43db      	mvns	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]
	  char* mecha = trimm(y);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fe97 	bl	8000f74 <trimm>
 8001246:	61b8      	str	r0, [r7, #24]
	  SSD1306_GotoXY (26,3);
 8001248:	2103      	movs	r1, #3
 800124a:	201a      	movs	r0, #26
 800124c:	f000 fd8c 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[0], &Font_11x18, ((cursorm1 & 0x08)>>3));
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	7818      	ldrb	r0, [r3, #0]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	10db      	asrs	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4952      	ldr	r1, [pc, #328]	; (80013ac <drawmenu1+0x188>)
 8001264:	f000 fd96 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (37,3);
 8001268:	2103      	movs	r1, #3
 800126a:	2025      	movs	r0, #37	; 0x25
 800126c:	f000 fd7c 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[1], &Font_11x18, ((cursorm1 & 0x04)>>2));
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	3301      	adds	r3, #1
 8001274:	7818      	ldrb	r0, [r3, #0]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	109b      	asrs	r3, r3, #2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	4949      	ldr	r1, [pc, #292]	; (80013ac <drawmenu1+0x188>)
 8001286:	f000 fd85 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (48,3);
 800128a:	2103      	movs	r1, #3
 800128c:	2030      	movs	r0, #48	; 0x30
 800128e:	f000 fd6b 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 8001292:	2201      	movs	r2, #1
 8001294:	4945      	ldr	r1, [pc, #276]	; (80013ac <drawmenu1+0x188>)
 8001296:	202c      	movs	r0, #44	; 0x2c
 8001298:	f000 fd7c 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (59,3);
 800129c:	2103      	movs	r1, #3
 800129e:	203b      	movs	r0, #59	; 0x3b
 80012a0:	f000 fd62 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[2], &Font_11x18, ((cursorm1 & 0x02)>>1));
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3302      	adds	r3, #2
 80012a8:	7818      	ldrb	r0, [r3, #0]
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	105b      	asrs	r3, r3, #1
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	493c      	ldr	r1, [pc, #240]	; (80013ac <drawmenu1+0x188>)
 80012ba:	f000 fd6b 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (70,3);
 80012be:	2103      	movs	r1, #3
 80012c0:	2046      	movs	r0, #70	; 0x46
 80012c2:	f000 fd51 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[3], &Font_11x18, (cursorm1 & 0x01));
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	3303      	adds	r3, #3
 80012ca:	7818      	ldrb	r0, [r3, #0]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	4935      	ldr	r1, [pc, #212]	; (80013ac <drawmenu1+0x188>)
 80012d8:	f000 fd5c 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (107,3);
 80012dc:	2103      	movs	r1, #3
 80012de:	206b      	movs	r0, #107	; 0x6b
 80012e0:	f000 fd42 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc('V', &Font_11x18, 1);
 80012e4:	2201      	movs	r2, #1
 80012e6:	4931      	ldr	r1, [pc, #196]	; (80013ac <drawmenu1+0x188>)
 80012e8:	2056      	movs	r0, #86	; 0x56
 80012ea:	f000 fd53 	bl	8001d94 <SSD1306_Putc>
	  char* proud = trimm(x);
 80012ee:	68b8      	ldr	r0, [r7, #8]
 80012f0:	f7ff fe40 	bl	8000f74 <trimm>
 80012f4:	6178      	str	r0, [r7, #20]
	  SSD1306_GotoXY (26,25);
 80012f6:	2119      	movs	r1, #25
 80012f8:	201a      	movs	r0, #26
 80012fa:	f000 fd35 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[0], &Font_11x18, ((cursorm1 & 0x80)>>7));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	7818      	ldrb	r0, [r3, #0]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	09db      	lsrs	r3, r3, #7
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4928      	ldr	r1, [pc, #160]	; (80013ac <drawmenu1+0x188>)
 800130c:	f000 fd42 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (37,25);
 8001310:	2119      	movs	r1, #25
 8001312:	2025      	movs	r0, #37	; 0x25
 8001314:	f000 fd28 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[1], &Font_11x18, ((cursorm1 & 0x40)>>6));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	7818      	ldrb	r0, [r3, #0]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	119b      	asrs	r3, r3, #6
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	491f      	ldr	r1, [pc, #124]	; (80013ac <drawmenu1+0x188>)
 800132e:	f000 fd31 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (48,25);
 8001332:	2119      	movs	r1, #25
 8001334:	2030      	movs	r0, #48	; 0x30
 8001336:	f000 fd17 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 800133a:	2201      	movs	r2, #1
 800133c:	491b      	ldr	r1, [pc, #108]	; (80013ac <drawmenu1+0x188>)
 800133e:	202c      	movs	r0, #44	; 0x2c
 8001340:	f000 fd28 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (59,25);
 8001344:	2119      	movs	r1, #25
 8001346:	203b      	movs	r0, #59	; 0x3b
 8001348:	f000 fd0e 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[2], &Font_11x18, ((cursorm1 & 0x20)>>5));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3302      	adds	r3, #2
 8001350:	7818      	ldrb	r0, [r3, #0]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	115b      	asrs	r3, r3, #5
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	4912      	ldr	r1, [pc, #72]	; (80013ac <drawmenu1+0x188>)
 8001362:	f000 fd17 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (70,25);
 8001366:	2119      	movs	r1, #25
 8001368:	2046      	movs	r0, #70	; 0x46
 800136a:	f000 fcfd 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[3], &Font_11x18, ((cursorm1 & 0x10)>>4));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3303      	adds	r3, #3
 8001372:	7818      	ldrb	r0, [r3, #0]
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	111b      	asrs	r3, r3, #4
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	490a      	ldr	r1, [pc, #40]	; (80013ac <drawmenu1+0x188>)
 8001384:	f000 fd06 	bl	8001d94 <SSD1306_Putc>
	  SSD1306_GotoXY (107,25);
 8001388:	2119      	movs	r1, #25
 800138a:	206b      	movs	r0, #107	; 0x6b
 800138c:	f000 fcec 	bl	8001d68 <SSD1306_GotoXY>
	  SSD1306_Putc('A', &Font_11x18, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	4906      	ldr	r1, [pc, #24]	; (80013ac <drawmenu1+0x188>)
 8001394:	2041      	movs	r0, #65	; 0x41
 8001396:	f000 fcfd 	bl	8001d94 <SSD1306_Putc>
	  uint8_t xcvcc = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	77fb      	strb	r3, [r7, #31]
	  uint8_t ycvcc = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	77bb      	strb	r3, [r7, #30]
	  if (cvcc) {
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80c5 	beq.w	8001534 <drawmenu1+0x310>
 80013aa:	e001      	b.n	80013b0 <drawmenu1+0x18c>
 80013ac:	20000000 	.word	0x20000000
		  xcvcc = 81;
 80013b0:	2351      	movs	r3, #81	; 0x51
 80013b2:	77fb      	strb	r3, [r7, #31]
		  ycvcc = 45;
 80013b4:	232d      	movs	r3, #45	; 0x2d
 80013b6:	77bb      	strb	r3, [r7, #30]
		  drawlogoC(92, ycvcc);
 80013b8:	7fbb      	ldrb	r3, [r7, #30]
 80013ba:	4619      	mov	r1, r3
 80013bc:	205c      	movs	r0, #92	; 0x5c
 80013be:	f7ff fe35 	bl	800102c <drawlogoC>
		  SSD1306_DrawLine((5+xcvcc), (ycvcc+2), (5+xcvcc), (ycvcc+6), 1);
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	3305      	adds	r3, #5
 80013c8:	b298      	uxth	r0, r3
 80013ca:	7fbb      	ldrb	r3, [r7, #30]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	3302      	adds	r3, #2
 80013d0:	b299      	uxth	r1, r3
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	3305      	adds	r3, #5
 80013d8:	b29a      	uxth	r2, r3
 80013da:	7fbb      	ldrb	r3, [r7, #30]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3306      	adds	r3, #6
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	2401      	movs	r4, #1
 80013e4:	9400      	str	r4, [sp, #0]
 80013e6:	f000 fd55 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((13+xcvcc), (ycvcc+2), (13+xcvcc), (ycvcc+6), 1);
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	330d      	adds	r3, #13
 80013f0:	b298      	uxth	r0, r3
 80013f2:	7fbb      	ldrb	r3, [r7, #30]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3302      	adds	r3, #2
 80013f8:	b299      	uxth	r1, r3
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	330d      	adds	r3, #13
 8001400:	b29a      	uxth	r2, r3
 8001402:	7fbb      	ldrb	r3, [r7, #30]
 8001404:	b29b      	uxth	r3, r3
 8001406:	3306      	adds	r3, #6
 8001408:	b29b      	uxth	r3, r3
 800140a:	2401      	movs	r4, #1
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	f000 fd41 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((6+xcvcc), (ycvcc+2), (6+xcvcc), (ycvcc+11), 1);
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	b29b      	uxth	r3, r3
 8001416:	3306      	adds	r3, #6
 8001418:	b298      	uxth	r0, r3
 800141a:	7fbb      	ldrb	r3, [r7, #30]
 800141c:	b29b      	uxth	r3, r3
 800141e:	3302      	adds	r3, #2
 8001420:	b299      	uxth	r1, r3
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	b29b      	uxth	r3, r3
 8001426:	3306      	adds	r3, #6
 8001428:	b29a      	uxth	r2, r3
 800142a:	7fbb      	ldrb	r3, [r7, #30]
 800142c:	b29b      	uxth	r3, r3
 800142e:	330b      	adds	r3, #11
 8001430:	b29b      	uxth	r3, r3
 8001432:	2401      	movs	r4, #1
 8001434:	9400      	str	r4, [sp, #0]
 8001436:	f000 fd2d 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((12+xcvcc), (ycvcc+2), (12+xcvcc), (ycvcc+11), 1);
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	b29b      	uxth	r3, r3
 800143e:	330c      	adds	r3, #12
 8001440:	b298      	uxth	r0, r3
 8001442:	7fbb      	ldrb	r3, [r7, #30]
 8001444:	b29b      	uxth	r3, r3
 8001446:	3302      	adds	r3, #2
 8001448:	b299      	uxth	r1, r3
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	b29b      	uxth	r3, r3
 800144e:	330c      	adds	r3, #12
 8001450:	b29a      	uxth	r2, r3
 8001452:	7fbb      	ldrb	r3, [r7, #30]
 8001454:	b29b      	uxth	r3, r3
 8001456:	330b      	adds	r3, #11
 8001458:	b29b      	uxth	r3, r3
 800145a:	2401      	movs	r4, #1
 800145c:	9400      	str	r4, [sp, #0]
 800145e:	f000 fd19 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((7+xcvcc), (ycvcc+6), (7+xcvcc), (ycvcc+13), 1);
 8001462:	7ffb      	ldrb	r3, [r7, #31]
 8001464:	b29b      	uxth	r3, r3
 8001466:	3307      	adds	r3, #7
 8001468:	b298      	uxth	r0, r3
 800146a:	7fbb      	ldrb	r3, [r7, #30]
 800146c:	b29b      	uxth	r3, r3
 800146e:	3306      	adds	r3, #6
 8001470:	b299      	uxth	r1, r3
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	b29b      	uxth	r3, r3
 8001476:	3307      	adds	r3, #7
 8001478:	b29a      	uxth	r2, r3
 800147a:	7fbb      	ldrb	r3, [r7, #30]
 800147c:	b29b      	uxth	r3, r3
 800147e:	330d      	adds	r3, #13
 8001480:	b29b      	uxth	r3, r3
 8001482:	2401      	movs	r4, #1
 8001484:	9400      	str	r4, [sp, #0]
 8001486:	f000 fd05 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((11+xcvcc), (ycvcc+6), (11+xcvcc), (ycvcc+13), 1);
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	b29b      	uxth	r3, r3
 800148e:	330b      	adds	r3, #11
 8001490:	b298      	uxth	r0, r3
 8001492:	7fbb      	ldrb	r3, [r7, #30]
 8001494:	b29b      	uxth	r3, r3
 8001496:	3306      	adds	r3, #6
 8001498:	b299      	uxth	r1, r3
 800149a:	7ffb      	ldrb	r3, [r7, #31]
 800149c:	b29b      	uxth	r3, r3
 800149e:	330b      	adds	r3, #11
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	7fbb      	ldrb	r3, [r7, #30]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	330d      	adds	r3, #13
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	2401      	movs	r4, #1
 80014ac:	9400      	str	r4, [sp, #0]
 80014ae:	f000 fcf1 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((8+xcvcc), (ycvcc+11), (8+xcvcc), (ycvcc+14), 1);
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3308      	adds	r3, #8
 80014b8:	b298      	uxth	r0, r3
 80014ba:	7fbb      	ldrb	r3, [r7, #30]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	330b      	adds	r3, #11
 80014c0:	b299      	uxth	r1, r3
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3308      	adds	r3, #8
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	7fbb      	ldrb	r3, [r7, #30]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	330e      	adds	r3, #14
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2401      	movs	r4, #1
 80014d4:	9400      	str	r4, [sp, #0]
 80014d6:	f000 fcdd 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawLine((10+xcvcc), (ycvcc+11), (10+xcvcc), (ycvcc+14), 1);
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	330a      	adds	r3, #10
 80014e0:	b298      	uxth	r0, r3
 80014e2:	7fbb      	ldrb	r3, [r7, #30]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	330b      	adds	r3, #11
 80014e8:	b299      	uxth	r1, r3
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	330a      	adds	r3, #10
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	7fbb      	ldrb	r3, [r7, #30]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	330e      	adds	r3, #14
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2401      	movs	r4, #1
 80014fc:	9400      	str	r4, [sp, #0]
 80014fe:	f000 fcc9 	bl	8001e94 <SSD1306_DrawLine>
		  SSD1306_DrawPixel((9+xcvcc), (ycvcc+13), 1);
 8001502:	7ffb      	ldrb	r3, [r7, #31]
 8001504:	b29b      	uxth	r3, r3
 8001506:	3309      	adds	r3, #9
 8001508:	b298      	uxth	r0, r3
 800150a:	7fbb      	ldrb	r3, [r7, #30]
 800150c:	b29b      	uxth	r3, r3
 800150e:	330d      	adds	r3, #13
 8001510:	b29b      	uxth	r3, r3
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	f000 fbc9 	bl	8001cac <SSD1306_DrawPixel>
		  SSD1306_DrawPixel((9+xcvcc), (ycvcc+14), 1);
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	b29b      	uxth	r3, r3
 800151e:	3309      	adds	r3, #9
 8001520:	b298      	uxth	r0, r3
 8001522:	7fbb      	ldrb	r3, [r7, #30]
 8001524:	b29b      	uxth	r3, r3
 8001526:	330e      	adds	r3, #14
 8001528:	b29b      	uxth	r3, r3
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	f000 fbbd 	bl	8001cac <SSD1306_DrawPixel>
 8001532:	e011      	b.n	8001558 <drawmenu1+0x334>
	  } else {
		  xcvcc = 20;
 8001534:	2314      	movs	r3, #20
 8001536:	77fb      	strb	r3, [r7, #31]
		  ycvcc = 45;
 8001538:	232d      	movs	r3, #45	; 0x2d
 800153a:	77bb      	strb	r3, [r7, #30]
		  drawlogoC(xcvcc, ycvcc);
 800153c:	7fba      	ldrb	r2, [r7, #30]
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd72 	bl	800102c <drawlogoC>
		  drawlogoC((xcvcc+10), ycvcc);
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	330a      	adds	r3, #10
 800154c:	b2db      	uxtb	r3, r3
 800154e:	7fba      	ldrb	r2, [r7, #30]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fd6a 	bl	800102c <drawlogoC>
	  }
	  SSD1306_DrawLine((2+xcvcc), ycvcc , (25+xcvcc), ycvcc, 1);
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	b29b      	uxth	r3, r3
 800155c:	3302      	adds	r3, #2
 800155e:	b298      	uxth	r0, r3
 8001560:	7fbb      	ldrb	r3, [r7, #30]
 8001562:	b299      	uxth	r1, r3
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	b29b      	uxth	r3, r3
 8001568:	3319      	adds	r3, #25
 800156a:	b29a      	uxth	r2, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	b29b      	uxth	r3, r3
 8001570:	2401      	movs	r4, #1
 8001572:	9400      	str	r4, [sp, #0]
 8001574:	f000 fc8e 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine(xcvcc, (ycvcc+2), xcvcc, (ycvcc+15), 1);
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	b298      	uxth	r0, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	b29b      	uxth	r3, r3
 8001580:	3302      	adds	r3, #2
 8001582:	b299      	uxth	r1, r3
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	b29a      	uxth	r2, r3
 8001588:	7fbb      	ldrb	r3, [r7, #30]
 800158a:	b29b      	uxth	r3, r3
 800158c:	330f      	adds	r3, #15
 800158e:	b29b      	uxth	r3, r3
 8001590:	2401      	movs	r4, #1
 8001592:	9400      	str	r4, [sp, #0]
 8001594:	f000 fc7e 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((2+xcvcc), (ycvcc+17), (25+xcvcc), (ycvcc+17), 1);
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	b29b      	uxth	r3, r3
 800159c:	3302      	adds	r3, #2
 800159e:	b298      	uxth	r0, r3
 80015a0:	7fbb      	ldrb	r3, [r7, #30]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3311      	adds	r3, #17
 80015a6:	b299      	uxth	r1, r3
 80015a8:	7ffb      	ldrb	r3, [r7, #31]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3319      	adds	r3, #25
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	7fbb      	ldrb	r3, [r7, #30]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3311      	adds	r3, #17
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2401      	movs	r4, #1
 80015ba:	9400      	str	r4, [sp, #0]
 80015bc:	f000 fc6a 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawLine((27+xcvcc), (ycvcc+2), (27+xcvcc), (ycvcc+15), 1);
 80015c0:	7ffb      	ldrb	r3, [r7, #31]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	331b      	adds	r3, #27
 80015c6:	b298      	uxth	r0, r3
 80015c8:	7fbb      	ldrb	r3, [r7, #30]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3302      	adds	r3, #2
 80015ce:	b299      	uxth	r1, r3
 80015d0:	7ffb      	ldrb	r3, [r7, #31]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	331b      	adds	r3, #27
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	7fbb      	ldrb	r3, [r7, #30]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	330f      	adds	r3, #15
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2401      	movs	r4, #1
 80015e2:	9400      	str	r4, [sp, #0]
 80015e4:	f000 fc56 	bl	8001e94 <SSD1306_DrawLine>
	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+1), 1);
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	b298      	uxth	r0, r3
 80015f0:	7fbb      	ldrb	r3, [r7, #30]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f000 fb56 	bl	8001cac <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+16), 1);
 8001600:	7ffb      	ldrb	r3, [r7, #31]
 8001602:	b29b      	uxth	r3, r3
 8001604:	3301      	adds	r3, #1
 8001606:	b298      	uxth	r0, r3
 8001608:	7fbb      	ldrb	r3, [r7, #30]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3310      	adds	r3, #16
 800160e:	b29b      	uxth	r3, r3
 8001610:	2201      	movs	r2, #1
 8001612:	4619      	mov	r1, r3
 8001614:	f000 fb4a 	bl	8001cac <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+1), 1);
 8001618:	7ffb      	ldrb	r3, [r7, #31]
 800161a:	b29b      	uxth	r3, r3
 800161c:	331a      	adds	r3, #26
 800161e:	b298      	uxth	r0, r3
 8001620:	7fbb      	ldrb	r3, [r7, #30]
 8001622:	b29b      	uxth	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	f000 fb3e 	bl	8001cac <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+16), 1);
 8001630:	7ffb      	ldrb	r3, [r7, #31]
 8001632:	b29b      	uxth	r3, r3
 8001634:	331a      	adds	r3, #26
 8001636:	b298      	uxth	r0, r3
 8001638:	7fbb      	ldrb	r3, [r7, #30]
 800163a:	b29b      	uxth	r3, r3
 800163c:	3310      	adds	r3, #16
 800163e:	b29b      	uxth	r3, r3
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	f000 fb32 	bl	8001cac <SSD1306_DrawPixel>

	  SSD1306_UpdateScreen(); // update screen
 8001648:	f000 faea 	bl	8001c20 <SSD1306_UpdateScreen>
}
 800164c:	bf00      	nop
 800164e:	3724      	adds	r7, #36	; 0x24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd90      	pop	{r4, r7, pc}

08001654 <setDAC1>:
void setDAC1 (uint16_t data) // zapíše vpravo zarovnaná 12-bit data do DAC1 na I2C2
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af02      	add	r7, sp, #8
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	b29b      	uxth	r3, r3
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <setDAC1+0x38>)
 8001668:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <setDAC1+0x38>)
 8001672:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c2, (0b1100001<<1), dataDAC, 3, 10);
 8001674:	230a      	movs	r3, #10
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2303      	movs	r3, #3
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <setDAC1+0x38>)
 800167c:	21c2      	movs	r1, #194	; 0xc2
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <setDAC1+0x3c>)
 8001680:	f002 f998 	bl	80039b4 <HAL_I2C_Master_Transmit>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000000c 	.word	0x2000000c
 8001690:	200004a0 	.word	0x200004a0
 8001694:	00000000 	.word	0x00000000

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169c:	f000 fefe 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a0:	f000 f89c 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a4:	f000 f9d0 	bl	8001a48 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016a8:	f000 f954 	bl	8001954 <MX_I2C1_Init>
  MX_I2C2_Init();
 80016ac:	f000 f980 	bl	80019b0 <MX_I2C2_Init>
  MX_DMA_Init();
 80016b0:	f000 f9ac 	bl	8001a0c <MX_DMA_Init>
  MX_ADC1_Init();
 80016b4:	f000 f8e4 	bl	8001880 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80016b8:	f000 f9ee 	bl	8001a98 <SSD1306_Init>
  HAL_ADC_Start_DMA(&hadc1, ADCout, 4);
 80016bc:	2204      	movs	r2, #4
 80016be:	4940      	ldr	r1, [pc, #256]	; (80017c0 <main+0x128>)
 80016c0:	4840      	ldr	r0, [pc, #256]	; (80017c4 <main+0x12c>)
 80016c2:	f001 f849 	bl	8002758 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  drawmenu1(pointer_p1, 1,t, ((p*5)/4095));
 80016c6:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <main+0x130>)
 80016c8:	781c      	ldrb	r4, [r3, #0]
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <main+0x134>)
 80016cc:	681d      	ldr	r5, [r3, #0]
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <main+0x138>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4940      	ldr	r1, [pc, #256]	; (80017d4 <main+0x13c>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fa67 	bl	8000ba8 <__aeabi_fmul>
 80016da:	4603      	mov	r3, r0
 80016dc:	493e      	ldr	r1, [pc, #248]	; (80017d8 <main+0x140>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb16 	bl	8000d10 <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	462a      	mov	r2, r5
 80016e8:	2101      	movs	r1, #1
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff fd9a 	bl	8001224 <drawmenu1>
	  p += 1;
 80016f0:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <main+0x138>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f94d 	bl	8000998 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <main+0x138>)
 8001704:	601a      	str	r2, [r3, #0]
	  pointer_p1 *= 2;
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <main+0x130>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <main+0x130>)
 8001710:	701a      	strb	r2, [r3, #0]
	  t = ADCout[0];
 8001712:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <main+0x128>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff f9ee 	bl	8000af8 <__aeabi_ui2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a2b      	ldr	r2, [pc, #172]	; (80017cc <main+0x134>)
 8001720:	6013      	str	r3, [r2, #0]
	  t = ((t*3.3)/4095)*2;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <main+0x134>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fe76 	bl	8000418 <__aeabi_f2d>
 800172c:	a320      	add	r3, pc, #128	; (adr r3, 80017b0 <main+0x118>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe fec9 	bl	80004c8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a31e      	add	r3, pc, #120	; (adr r3, 80017b8 <main+0x120>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ffea 	bl	800071c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	f7fe fd02 	bl	800015c <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f8c4 	bl	80008ec <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <main+0x134>)
 8001768:	6013      	str	r3, [r2, #0]
	  if(pointer_p1 == 0)
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <main+0x130>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d102      	bne.n	8001778 <main+0xe0>
	  {
		  pointer_p1 = 1;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <main+0x130>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
	  }
	  if(p>0xFFF){p=0;}
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <main+0x138>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4916      	ldr	r1, [pc, #88]	; (80017d8 <main+0x140>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fbce 	bl	8000f20 <__aeabi_fcmpgt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <main+0xfa>
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <main+0x138>)
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	  setDAC1(p);
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <main+0x138>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fbcc 	bl	8000f34 <__aeabi_f2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff57 	bl	8001654 <setDAC1>
	  HAL_Delay(100);
 80017a6:	2064      	movs	r0, #100	; 0x64
 80017a8:	f000 feda 	bl	8002560 <HAL_Delay>
	  drawmenu1(pointer_p1, 1,t, ((p*5)/4095));
 80017ac:	e78b      	b.n	80016c6 <main+0x2e>
 80017ae:	bf00      	nop
 80017b0:	66666666 	.word	0x66666666
 80017b4:	400a6666 	.word	0x400a6666
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40affe00 	.word	0x40affe00
 80017c0:	20000524 	.word	0x20000524
 80017c4:	200004f4 	.word	0x200004f4
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000038 	.word	0x20000038
 80017d0:	2000003c 	.word	0x2000003c
 80017d4:	40a00000 	.word	0x40a00000
 80017d8:	457ff000 	.word	0x457ff000

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	; 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e6:	2228      	movs	r2, #40	; 0x28
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fd2e 	bl	800524c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	2302      	movs	r3, #2
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001810:	2301      	movs	r3, #1
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001814:	2310      	movs	r3, #16
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001818:	2300      	movs	r3, #0
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800181c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001820:	4618      	mov	r0, r3
 8001822:	f003 f819 	bl	8004858 <HAL_RCC_OscConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800182c:	f000 f92e 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001830:	230f      	movs	r3, #15
 8001832:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001840:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001844:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fa83 	bl	8004d58 <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001858:	f000 f918 	bl	8001a8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800185c:	2302      	movs	r3, #2
 800185e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001860:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001864:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fbfb 	bl	8005064 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001874:	f000 f90a 	bl	8001a8c <Error_Handler>
  }
}
 8001878:	bf00      	nop
 800187a:	3750      	adds	r7, #80	; 0x50
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <MX_ADC1_Init+0xcc>)
 8001892:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <MX_ADC1_Init+0xd0>)
 8001894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <MX_ADC1_Init+0xcc>)
 8001898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <MX_ADC1_Init+0xcc>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_ADC1_Init+0xcc>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <MX_ADC1_Init+0xcc>)
 80018ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_ADC1_Init+0xcc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <MX_ADC1_Init+0xcc>)
 80018ba:	2204      	movs	r2, #4
 80018bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018be:	4823      	ldr	r0, [pc, #140]	; (800194c <MX_ADC1_Init+0xcc>)
 80018c0:	f000 fe72 	bl	80025a8 <HAL_ADC_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80018ca:	f000 f8df 	bl	8001a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018d2:	2301      	movs	r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	481b      	ldr	r0, [pc, #108]	; (800194c <MX_ADC1_Init+0xcc>)
 80018e0:	f001 f834 	bl	800294c <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 f8cf 	bl	8001a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018ee:	2301      	movs	r3, #1
 80018f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4814      	ldr	r0, [pc, #80]	; (800194c <MX_ADC1_Init+0xcc>)
 80018fc:	f001 f826 	bl	800294c <HAL_ADC_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001906:	f000 f8c1 	bl	8001a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800190a:	2302      	movs	r3, #2
 800190c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800190e:	2303      	movs	r3, #3
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_ADC1_Init+0xcc>)
 8001918:	f001 f818 	bl	800294c <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001922:	f000 f8b3 	bl	8001a8c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001926:	2303      	movs	r3, #3
 8001928:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800192a:	2304      	movs	r3, #4
 800192c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4806      	ldr	r0, [pc, #24]	; (800194c <MX_ADC1_Init+0xcc>)
 8001934:	f001 f80a 	bl	800294c <HAL_ADC_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800193e:	f000 f8a5 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200004f4 	.word	0x200004f4
 8001950:	40012400 	.word	0x40012400

08001954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_I2C1_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_I2C1_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001992:	f001 fecb 	bl	800372c <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f876 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000044c 	.word	0x2000044c
 80019a8:	40005400 	.word	0x40005400
 80019ac:	00061a80 	.word	0x00061a80

080019b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019b6:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <MX_I2C2_Init+0x54>)
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <MX_I2C2_Init+0x58>)
 80019be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_I2C2_Init+0x50>)
 80019ee:	f001 fe9d 	bl	800372c <HAL_I2C_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019f8:	f000 f848 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200004a0 	.word	0x200004a0
 8001a04:	40005800 	.word	0x40005800
 8001a08:	000186a0 	.word	0x000186a0

08001a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_DMA_Init+0x38>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <MX_DMA_Init+0x38>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <MX_DMA_Init+0x38>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	200b      	movs	r0, #11
 8001a30:	f001 fa5d 	bl	8002eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a34:	200b      	movs	r0, #11
 8001a36:	f001 fa76 	bl	8002f26 <HAL_NVIC_EnableIRQ>

}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000

08001a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <MX_GPIO_Init+0x40>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	4a0d      	ldr	r2, [pc, #52]	; (8001a88 <MX_GPIO_Init+0x40>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	6193      	str	r3, [r2, #24]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <MX_GPIO_Init+0x40>)
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <MX_GPIO_Init+0x40>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <MX_GPIO_Init+0x40>)
 8001a6c:	f043 0308 	orr.w	r3, r3, #8
 8001a70:	6193      	str	r3, [r2, #24]
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <MX_GPIO_Init+0x40>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a9e:	f000 fafb 	bl	8002098 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001aa2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2178      	movs	r1, #120	; 0x78
 8001aaa:	485b      	ldr	r0, [pc, #364]	; (8001c18 <SSD1306_Init+0x180>)
 8001aac:	f002 f880 	bl	8003bb0 <HAL_I2C_IsDeviceReady>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e0a9      	b.n	8001c0e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001aba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001abe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ac0:	e002      	b.n	8001ac8 <SSD1306_Init+0x30>
		p--;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ace:	22ae      	movs	r2, #174	; 0xae
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2078      	movs	r0, #120	; 0x78
 8001ad4:	f000 fb3c 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001ad8:	2220      	movs	r2, #32
 8001ada:	2100      	movs	r1, #0
 8001adc:	2078      	movs	r0, #120	; 0x78
 8001ade:	f000 fb37 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2078      	movs	r0, #120	; 0x78
 8001ae8:	f000 fb32 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001aec:	22b0      	movs	r2, #176	; 0xb0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2078      	movs	r0, #120	; 0x78
 8001af2:	f000 fb2d 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001af6:	22c8      	movs	r2, #200	; 0xc8
 8001af8:	2100      	movs	r1, #0
 8001afa:	2078      	movs	r0, #120	; 0x78
 8001afc:	f000 fb28 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2078      	movs	r0, #120	; 0x78
 8001b06:	f000 fb23 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2078      	movs	r0, #120	; 0x78
 8001b10:	f000 fb1e 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	2100      	movs	r1, #0
 8001b18:	2078      	movs	r0, #120	; 0x78
 8001b1a:	f000 fb19 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001b1e:	2281      	movs	r2, #129	; 0x81
 8001b20:	2100      	movs	r1, #0
 8001b22:	2078      	movs	r0, #120	; 0x78
 8001b24:	f000 fb14 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001b28:	22ff      	movs	r2, #255	; 0xff
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2078      	movs	r0, #120	; 0x78
 8001b2e:	f000 fb0f 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001b32:	22a1      	movs	r2, #161	; 0xa1
 8001b34:	2100      	movs	r1, #0
 8001b36:	2078      	movs	r0, #120	; 0x78
 8001b38:	f000 fb0a 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001b3c:	22a6      	movs	r2, #166	; 0xa6
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2078      	movs	r0, #120	; 0x78
 8001b42:	f000 fb05 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001b46:	22a8      	movs	r2, #168	; 0xa8
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2078      	movs	r0, #120	; 0x78
 8001b4c:	f000 fb00 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001b50:	223f      	movs	r2, #63	; 0x3f
 8001b52:	2100      	movs	r1, #0
 8001b54:	2078      	movs	r0, #120	; 0x78
 8001b56:	f000 fafb 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b5a:	22a4      	movs	r2, #164	; 0xa4
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2078      	movs	r0, #120	; 0x78
 8001b60:	f000 faf6 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001b64:	22d3      	movs	r2, #211	; 0xd3
 8001b66:	2100      	movs	r1, #0
 8001b68:	2078      	movs	r0, #120	; 0x78
 8001b6a:	f000 faf1 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2078      	movs	r0, #120	; 0x78
 8001b74:	f000 faec 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b78:	22d5      	movs	r2, #213	; 0xd5
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2078      	movs	r0, #120	; 0x78
 8001b7e:	f000 fae7 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b82:	22f0      	movs	r2, #240	; 0xf0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2078      	movs	r0, #120	; 0x78
 8001b88:	f000 fae2 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b8c:	22d9      	movs	r2, #217	; 0xd9
 8001b8e:	2100      	movs	r1, #0
 8001b90:	2078      	movs	r0, #120	; 0x78
 8001b92:	f000 fadd 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b96:	2222      	movs	r2, #34	; 0x22
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2078      	movs	r0, #120	; 0x78
 8001b9c:	f000 fad8 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001ba0:	22da      	movs	r2, #218	; 0xda
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	2078      	movs	r0, #120	; 0x78
 8001ba6:	f000 fad3 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001baa:	2212      	movs	r2, #18
 8001bac:	2100      	movs	r1, #0
 8001bae:	2078      	movs	r0, #120	; 0x78
 8001bb0:	f000 face 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001bb4:	22db      	movs	r2, #219	; 0xdb
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2078      	movs	r0, #120	; 0x78
 8001bba:	f000 fac9 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2078      	movs	r0, #120	; 0x78
 8001bc4:	f000 fac4 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001bc8:	228d      	movs	r2, #141	; 0x8d
 8001bca:	2100      	movs	r1, #0
 8001bcc:	2078      	movs	r0, #120	; 0x78
 8001bce:	f000 fabf 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001bd2:	2214      	movs	r2, #20
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2078      	movs	r0, #120	; 0x78
 8001bd8:	f000 faba 	bl	8002150 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001bdc:	22af      	movs	r2, #175	; 0xaf
 8001bde:	2100      	movs	r1, #0
 8001be0:	2078      	movs	r0, #120	; 0x78
 8001be2:	f000 fab5 	bl	8002150 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001be6:	222e      	movs	r2, #46	; 0x2e
 8001be8:	2100      	movs	r1, #0
 8001bea:	2078      	movs	r0, #120	; 0x78
 8001bec:	f000 fab0 	bl	8002150 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 f843 	bl	8001c7c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001bf6:	f000 f813 	bl	8001c20 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <SSD1306_Init+0x184>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <SSD1306_Init+0x184>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SSD1306_Init+0x184>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000044c 	.word	0x2000044c
 8001c1c:	20000444 	.word	0x20000444

08001c20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	e01d      	b.n	8001c68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	3b50      	subs	r3, #80	; 0x50
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	2078      	movs	r0, #120	; 0x78
 8001c38:	f000 fa8a 	bl	8002150 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2078      	movs	r0, #120	; 0x78
 8001c42:	f000 fa85 	bl	8002150 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001c46:	2210      	movs	r2, #16
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2078      	movs	r0, #120	; 0x78
 8001c4c:	f000 fa80 	bl	8002150 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	01db      	lsls	r3, r3, #7
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <SSD1306_UpdateScreen+0x58>)
 8001c56:	441a      	add	r2, r3
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	2078      	movs	r0, #120	; 0x78
 8001c5e:	f000 fa2f 	bl	80020c0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	3301      	adds	r3, #1
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d9de      	bls.n	8001c2c <SSD1306_UpdateScreen+0xc>
	}
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000044 	.word	0x20000044

08001c7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <SSD1306_Fill+0x14>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e000      	b.n	8001c92 <SSD1306_Fill+0x16>
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c96:	4619      	mov	r1, r3
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <SSD1306_Fill+0x2c>)
 8001c9a:	f003 fad7 	bl	800524c <memset>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000044 	.word	0x20000044

08001cac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	80bb      	strh	r3, [r7, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	70fb      	strb	r3, [r7, #3]
	if (
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8001cc2:	d848      	bhi.n	8001d56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001cc4:	88bb      	ldrh	r3, [r7, #4]
 8001cc6:	2b3f      	cmp	r3, #63	; 0x3f
 8001cc8:	d845      	bhi.n	8001d56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <SSD1306_DrawPixel+0xb4>)
 8001ccc:	791b      	ldrb	r3, [r3, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	bf0c      	ite	eq
 8001cd8:	2301      	moveq	r3, #1
 8001cda:	2300      	movne	r3, #0
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d11a      	bne.n	8001d1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ce6:	88fa      	ldrh	r2, [r7, #6]
 8001ce8:	88bb      	ldrh	r3, [r7, #4]
 8001cea:	08db      	lsrs	r3, r3, #3
 8001cec:	b298      	uxth	r0, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	01db      	lsls	r3, r3, #7
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <SSD1306_DrawPixel+0xb8>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	b25a      	sxtb	r2, r3
 8001cfa:	88bb      	ldrh	r3, [r7, #4]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	b25b      	sxtb	r3, r3
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b259      	sxtb	r1, r3
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	01db      	lsls	r3, r3, #7
 8001d12:	4413      	add	r3, r2
 8001d14:	b2c9      	uxtb	r1, r1
 8001d16:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <SSD1306_DrawPixel+0xb8>)
 8001d18:	54d1      	strb	r1, [r2, r3]
 8001d1a:	e01d      	b.n	8001d58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d1c:	88fa      	ldrh	r2, [r7, #6]
 8001d1e:	88bb      	ldrh	r3, [r7, #4]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	b298      	uxth	r0, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <SSD1306_DrawPixel+0xb8>)
 8001d2c:	5cd3      	ldrb	r3, [r2, r3]
 8001d2e:	b25a      	sxtb	r2, r3
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	2101      	movs	r1, #1
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4013      	ands	r3, r2
 8001d44:	b259      	sxtb	r1, r3
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	4603      	mov	r3, r0
 8001d4a:	01db      	lsls	r3, r3, #7
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2c9      	uxtb	r1, r1
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <SSD1306_DrawPixel+0xb8>)
 8001d52:	54d1      	strb	r1, [r2, r3]
 8001d54:	e000      	b.n	8001d58 <SSD1306_DrawPixel+0xac>
		return;
 8001d56:	bf00      	nop
	}
}
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20000444 	.word	0x20000444
 8001d64:	20000044 	.word	0x20000044

08001d68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460a      	mov	r2, r1
 8001d72:	80fb      	strh	r3, [r7, #6]
 8001d74:	4613      	mov	r3, r2
 8001d76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <SSD1306_GotoXY+0x28>)
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <SSD1306_GotoXY+0x28>)
 8001d80:	88bb      	ldrh	r3, [r7, #4]
 8001d82:	8053      	strh	r3, [r2, #2]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000444 	.word	0x20000444

08001d94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001da4:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
	if (
 8001db0:	2b7f      	cmp	r3, #127	; 0x7f
 8001db2:	dc07      	bgt.n	8001dc4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	461a      	mov	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001dc0:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc2:	dd01      	ble.n	8001dc8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e05e      	b.n	8001e86 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e04b      	b.n	8001e66 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	3b20      	subs	r3, #32
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	7849      	ldrb	r1, [r1, #1]
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	440b      	add	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e030      	b.n	8001e54 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d010      	beq.n	8001e24 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001e02:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001e04:	881a      	ldrh	r2, [r3, #0]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b298      	uxth	r0, r3
 8001e0e:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001e10:	885a      	ldrh	r2, [r3, #2]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	79ba      	ldrb	r2, [r7, #6]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f7ff ff45 	bl	8001cac <SSD1306_DrawPixel>
 8001e22:	e014      	b.n	8001e4e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b298      	uxth	r0, r3
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001e32:	885a      	ldrh	r2, [r3, #2]
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf0c      	ite	eq
 8001e42:	2301      	moveq	r3, #1
 8001e44:	2300      	movne	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f7ff ff2f 	bl	8001cac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	3301      	adds	r3, #1
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d3c8      	bcc.n	8001df2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d3ad      	bcc.n	8001dce <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <SSD1306_Putc+0xfc>)
 8001e82:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000444 	.word	0x20000444

08001e94 <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	80fb      	strh	r3, [r7, #6]
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80bb      	strh	r3, [r7, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	807b      	strh	r3, [r7, #2]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb6:	d901      	bls.n	8001ebc <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001eb8:	237f      	movs	r3, #127	; 0x7f
 8001eba:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8001ec0:	d901      	bls.n	8001ec6 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001ec2:	237f      	movs	r3, #127	; 0x7f
 8001ec4:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	2b3f      	cmp	r3, #63	; 0x3f
 8001eca:	d901      	bls.n	8001ed0 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001ecc:	233f      	movs	r3, #63	; 0x3f
 8001ece:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001ed0:	883b      	ldrh	r3, [r7, #0]
 8001ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed4:	d901      	bls.n	8001eda <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001ed6:	233f      	movs	r3, #63	; 0x3f
 8001ed8:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001eda:	88fa      	ldrh	r2, [r7, #6]
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d205      	bcs.n	8001eee <SSD1306_DrawLine+0x5a>
 8001ee2:	887a      	ldrh	r2, [r7, #2]
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	b21b      	sxth	r3, r3
 8001eec:	e004      	b.n	8001ef8 <SSD1306_DrawLine+0x64>
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	887b      	ldrh	r3, [r7, #2]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001efa:	88ba      	ldrh	r2, [r7, #4]
 8001efc:	883b      	ldrh	r3, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d205      	bcs.n	8001f0e <SSD1306_DrawLine+0x7a>
 8001f02:	883a      	ldrh	r2, [r7, #0]
 8001f04:	88bb      	ldrh	r3, [r7, #4]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b21b      	sxth	r3, r3
 8001f0c:	e004      	b.n	8001f18 <SSD1306_DrawLine+0x84>
 8001f0e:	88ba      	ldrh	r2, [r7, #4]
 8001f10:	883b      	ldrh	r3, [r7, #0]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d201      	bcs.n	8001f26 <SSD1306_DrawLine+0x92>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e001      	b.n	8001f2a <SSD1306_DrawLine+0x96>
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001f2c:	88ba      	ldrh	r2, [r7, #4]
 8001f2e:	883b      	ldrh	r3, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d201      	bcs.n	8001f38 <SSD1306_DrawLine+0xa4>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e001      	b.n	8001f3c <SSD1306_DrawLine+0xa8>
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001f3e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dd06      	ble.n	8001f58 <SSD1306_DrawLine+0xc4>
 8001f4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f4e:	0fda      	lsrs	r2, r3, #31
 8001f50:	4413      	add	r3, r2
 8001f52:	105b      	asrs	r3, r3, #1
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	e006      	b.n	8001f66 <SSD1306_DrawLine+0xd2>
 8001f58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f5c:	0fda      	lsrs	r2, r3, #31
 8001f5e:	4413      	add	r3, r2
 8001f60:	105b      	asrs	r3, r3, #1
 8001f62:	425b      	negs	r3, r3
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001f68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d129      	bne.n	8001fc4 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001f70:	883a      	ldrh	r2, [r7, #0]
 8001f72:	88bb      	ldrh	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d205      	bcs.n	8001f84 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001f78:	883b      	ldrh	r3, [r7, #0]
 8001f7a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001f7c:	88bb      	ldrh	r3, [r7, #4]
 8001f7e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001f80:	893b      	ldrh	r3, [r7, #8]
 8001f82:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d205      	bcs.n	8001f98 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001f94:	893b      	ldrh	r3, [r7, #8]
 8001f96:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001f98:	88bb      	ldrh	r3, [r7, #4]
 8001f9a:	82bb      	strh	r3, [r7, #20]
 8001f9c:	e00c      	b.n	8001fb8 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001f9e:	8ab9      	ldrh	r1, [r7, #20]
 8001fa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fe80 	bl	8001cac <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001fac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	82bb      	strh	r3, [r7, #20]
 8001fb8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001fbc:	883b      	ldrh	r3, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dded      	ble.n	8001f9e <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001fc2:	e05f      	b.n	8002084 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001fc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d129      	bne.n	8002020 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001fcc:	883a      	ldrh	r2, [r7, #0]
 8001fce:	88bb      	ldrh	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d205      	bcs.n	8001fe0 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001fd4:	883b      	ldrh	r3, [r7, #0]
 8001fd6:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001fd8:	88bb      	ldrh	r3, [r7, #4]
 8001fda:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d205      	bcs.n	8001ff4 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001fe8:	887b      	ldrh	r3, [r7, #2]
 8001fea:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001ff0:	893b      	ldrh	r3, [r7, #8]
 8001ff2:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	82bb      	strh	r3, [r7, #20]
 8001ff8:	e00c      	b.n	8002014 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001ffa:	8abb      	ldrh	r3, [r7, #20]
 8001ffc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002000:	88b9      	ldrh	r1, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fe52 	bl	8001cac <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002008:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800200c:	b29b      	uxth	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b29b      	uxth	r3, r3
 8002012:	82bb      	strh	r3, [r7, #20]
 8002014:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	429a      	cmp	r2, r3
 800201c:	dded      	ble.n	8001ffa <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 800201e:	e031      	b.n	8002084 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002020:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002024:	88b9      	ldrh	r1, [r7, #4]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fe3f 	bl	8001cac <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	429a      	cmp	r2, r3
 8002034:	d103      	bne.n	800203e <SSD1306_DrawLine+0x1aa>
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	883b      	ldrh	r3, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d021      	beq.n	8002082 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 800203e:	8afb      	ldrh	r3, [r7, #22]
 8002040:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002042:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002046:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800204a:	425b      	negs	r3, r3
 800204c:	429a      	cmp	r2, r3
 800204e:	dd08      	ble.n	8002062 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002050:	8afa      	ldrh	r2, [r7, #22]
 8002052:	8a3b      	ldrh	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	b29b      	uxth	r3, r3
 8002058:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800205a:	89fa      	ldrh	r2, [r7, #14]
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	4413      	add	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002062:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002066:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800206a:	429a      	cmp	r2, r3
 800206c:	dad8      	bge.n	8002020 <SSD1306_DrawLine+0x18c>
			err += dx;
 800206e:	8afa      	ldrh	r2, [r7, #22]
 8002070:	8a7b      	ldrh	r3, [r7, #18]
 8002072:	4413      	add	r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002078:	89ba      	ldrh	r2, [r7, #12]
 800207a:	88bb      	ldrh	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002080:	e7ce      	b.n	8002020 <SSD1306_DrawLine+0x18c>
			break;
 8002082:	bf00      	nop
		} 
	}
}
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}

0800208a <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fdf4 	bl	8001c7c <SSD1306_Fill>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800209e:	4b07      	ldr	r3, [pc, #28]	; (80020bc <ssd1306_I2C_Init+0x24>)
 80020a0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020a2:	e002      	b.n	80020aa <ssd1306_I2C_Init+0x12>
		p--;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	0003d090 	.word	0x0003d090

080020c0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b0c7      	sub	sp, #284	; 0x11c
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	4604      	mov	r4, r0
 80020c8:	4608      	mov	r0, r1
 80020ca:	4639      	mov	r1, r7
 80020cc:	600a      	str	r2, [r1, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	4622      	mov	r2, r4
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	1dbb      	adds	r3, r7, #6
 80020d8:	4602      	mov	r2, r0
 80020da:	701a      	strb	r2, [r3, #0]
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	460a      	mov	r2, r1
 80020e0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80020f2:	e010      	b.n	8002116 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80020f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020f8:	463a      	mov	r2, r7
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	441a      	add	r2, r3
 80020fe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002102:	3301      	adds	r3, #1
 8002104:	7811      	ldrb	r1, [r2, #0]
 8002106:	f107 020c 	add.w	r2, r7, #12
 800210a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800210c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002110:	3301      	adds	r3, #1
 8002112:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002116:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800211a:	b29b      	uxth	r3, r3
 800211c:	1d3a      	adds	r2, r7, #4
 800211e:	8812      	ldrh	r2, [r2, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8e7      	bhi.n	80020f4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b299      	uxth	r1, r3
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	b29b      	uxth	r3, r3
 8002132:	f107 020c 	add.w	r2, r7, #12
 8002136:	200a      	movs	r0, #10
 8002138:	9000      	str	r0, [sp, #0]
 800213a:	4804      	ldr	r0, [pc, #16]	; (800214c <ssd1306_I2C_WriteMulti+0x8c>)
 800213c:	f001 fc3a 	bl	80039b4 <HAL_I2C_Master_Transmit>
}
 8002140:	bf00      	nop
 8002142:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002146:	46bd      	mov	sp, r7
 8002148:	bd90      	pop	{r4, r7, pc}
 800214a:	bf00      	nop
 800214c:	2000044c 	.word	0x2000044c

08002150 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af02      	add	r7, sp, #8
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	460b      	mov	r3, r1
 800215c:	71bb      	strb	r3, [r7, #6]
 800215e:	4613      	mov	r3, r2
 8002160:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002162:	79bb      	ldrb	r3, [r7, #6]
 8002164:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002166:	797b      	ldrb	r3, [r7, #5]
 8002168:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	b299      	uxth	r1, r3
 800216e:	f107 020c 	add.w	r2, r7, #12
 8002172:	230a      	movs	r3, #10
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2302      	movs	r3, #2
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <ssd1306_I2C_Write+0x38>)
 800217a:	f001 fc1b 	bl	80039b4 <HAL_I2C_Master_Transmit>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000044c 	.word	0x2000044c

0800218c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_MspInit+0x5c>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <HAL_MspInit+0x5c>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6193      	str	r3, [r2, #24]
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_MspInit+0x5c>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_MspInit+0x5c>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_MspInit+0x5c>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	61d3      	str	r3, [r2, #28]
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <HAL_MspInit+0x5c>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_MspInit+0x60>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_MspInit+0x60>)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000

080021f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0310 	add.w	r3, r7, #16
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <HAL_ADC_MspInit+0xbc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d149      	bne.n	80022a4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_ADC_MspInit+0xc0>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <HAL_ADC_MspInit+0xc0>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_ADC_MspInit+0xc0>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_ADC_MspInit+0xc0>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <HAL_ADC_MspInit+0xc0>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_ADC_MspInit+0xc0>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002240:	230f      	movs	r3, #15
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002244:	2303      	movs	r3, #3
 8002246:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	4619      	mov	r1, r3
 800224e:	4819      	ldr	r0, [pc, #100]	; (80022b4 <HAL_ADC_MspInit+0xc4>)
 8002250:	f001 f8e8 	bl	8003424 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 8002256:	4a19      	ldr	r2, [pc, #100]	; (80022bc <HAL_ADC_MspInit+0xcc>)
 8002258:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 800225c:	2200      	movs	r2, #0
 800225e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002260:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 800226e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002272:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 8002276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 800227e:	2220      	movs	r2, #32
 8002280:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 800228a:	f000 fe67 	bl	8002f5c <HAL_DMA_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002294:	f7ff fbfa 	bl	8001a8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 800229c:	621a      	str	r2, [r3, #32]
 800229e:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_ADC_MspInit+0xc8>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40012400 	.word	0x40012400
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010800 	.word	0x40010800
 80022b8:	20000534 	.word	0x20000534
 80022bc:	40020008 	.word	0x40020008

080022c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0318 	add.w	r3, r7, #24
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a33      	ldr	r2, [pc, #204]	; (80023a8 <HAL_I2C_MspInit+0xe8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d12c      	bne.n	800233a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_I2C_MspInit+0xec>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a31      	ldr	r2, [pc, #196]	; (80023ac <HAL_I2C_MspInit+0xec>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_I2C_MspInit+0xec>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022f8:	23c0      	movs	r3, #192	; 0xc0
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fc:	2312      	movs	r3, #18
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4619      	mov	r1, r3
 800230a:	4829      	ldr	r0, [pc, #164]	; (80023b0 <HAL_I2C_MspInit+0xf0>)
 800230c:	f001 f88a 	bl	8003424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_I2C_MspInit+0xec>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a25      	ldr	r2, [pc, #148]	; (80023ac <HAL_I2C_MspInit+0xec>)
 8002316:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231a:	61d3      	str	r3, [r2, #28]
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <HAL_I2C_MspInit+0xec>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	2020      	movs	r0, #32
 800232e:	f000 fdde 	bl	8002eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002332:	2020      	movs	r0, #32
 8002334:	f000 fdf7 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002338:	e031      	b.n	800239e <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_I2C_MspInit+0xf4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d12c      	bne.n	800239e <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_I2C_MspInit+0xec>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_I2C_MspInit+0xec>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_I2C_MspInit+0xec>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800235c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002362:	2312      	movs	r3, #18
 8002364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002366:	2303      	movs	r3, #3
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	4619      	mov	r1, r3
 8002370:	480f      	ldr	r0, [pc, #60]	; (80023b0 <HAL_I2C_MspInit+0xf0>)
 8002372:	f001 f857 	bl	8003424 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_I2C_MspInit+0xec>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_I2C_MspInit+0xec>)
 800237c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_I2C_MspInit+0xec>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	2022      	movs	r0, #34	; 0x22
 8002394:	f000 fdab 	bl	8002eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002398:	2022      	movs	r0, #34	; 0x22
 800239a:	f000 fdc4 	bl	8002f26 <HAL_NVIC_EnableIRQ>
}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	; 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40005400 	.word	0x40005400
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010c00 	.word	0x40010c00
 80023b4:	40005800 	.word	0x40005800

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <NMI_Handler+0x4>

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023fe:	f000 f893 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA1_Channel1_IRQHandler+0x10>)
 800240e:	f000 fed5 	bl	80031bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000534 	.word	0x20000534

0800241c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <I2C1_ER_IRQHandler+0x10>)
 8002422:	f001 fcf3 	bl	8003e0c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000044c 	.word	0x2000044c

08002430 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <I2C2_ER_IRQHandler+0x10>)
 8002436:	f001 fce9 	bl	8003e0c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200004a0 	.word	0x200004a0

08002444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002476:	f7ff ffe5 	bl	8002444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f002 fea9 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800247e:	f7ff f90b 	bl	8001698 <main>
  bx lr
 8002482:	4770      	bx	lr
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800248c:	080060ac 	.word	0x080060ac
  ldr r2, =_sbss
 8002490:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002494:	2000057c 	.word	0x2000057c

08002498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_2_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HAL_Init+0x28>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a07      	ldr	r2, [pc, #28]	; (80024c4 <HAL_Init+0x28>)
 80024a6:	f043 0310 	orr.w	r3, r3, #16
 80024aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 fd13 	bl	8002ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b2:	200f      	movs	r0, #15
 80024b4:	f000 f808 	bl	80024c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b8:	f7ff fe68 	bl	800218c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000

080024c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_InitTick+0x54>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_InitTick+0x58>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024de:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fd2b 	bl	8002f42 <HAL_SYSTICK_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00e      	b.n	8002514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d80a      	bhi.n	8002512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024fc:	2200      	movs	r2, #0
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f000 fcf3 	bl	8002eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002508:	4a06      	ldr	r2, [pc, #24]	; (8002524 <HAL_InitTick+0x5c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000010 	.word	0x20000010
 8002520:	20000018 	.word	0x20000018
 8002524:	20000014 	.word	0x20000014

08002528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_IncTick+0x1c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_IncTick+0x20>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4413      	add	r3, r2
 8002538:	4a03      	ldr	r2, [pc, #12]	; (8002548 <HAL_IncTick+0x20>)
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000018 	.word	0x20000018
 8002548:	20000578 	.word	0x20000578

0800254c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b02      	ldr	r3, [pc, #8]	; (800255c <HAL_GetTick+0x10>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000578 	.word	0x20000578

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff fff0 	bl	800254c <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffe0 	bl	800254c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000018 	.word	0x20000018

080025a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b0:	2300      	movs	r3, #0
 80025b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0be      	b.n	8002748 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fe02 	bl	80021f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 faff 	bl	8002bf0 <ADC_ConversionStop_Disable>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f040 8099 	bne.w	8002736 <HAL_ADC_Init+0x18e>
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8095 	bne.w	8002736 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002614:	f023 0302 	bic.w	r3, r3, #2
 8002618:	f043 0202 	orr.w	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002628:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7b1b      	ldrb	r3, [r3, #12]
 800262e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002630:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	4313      	orrs	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002640:	d003      	beq.n	800264a <HAL_ADC_Init+0xa2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_ADC_Init+0xa8>
 800264a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264e:	e000      	b.n	8002652 <HAL_ADC_Init+0xaa>
 8002650:	2300      	movs	r3, #0
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7d1b      	ldrb	r3, [r3, #20]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d119      	bne.n	8002694 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	3b01      	subs	r3, #1
 800266e:	035a      	lsls	r2, r3, #13
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e00b      	b.n	8002694 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	f043 0201 	orr.w	r2, r3, #1
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_ADC_Init+0x1a8>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d003      	beq.n	80026ce <HAL_ADC_Init+0x126>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d104      	bne.n	80026d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	051b      	lsls	r3, r3, #20
 80026d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_ADC_Init+0x1ac>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d10b      	bne.n	8002714 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002712:	e018      	b.n	8002746 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f023 0312 	bic.w	r3, r3, #18
 800271c:	f043 0210 	orr.w	r2, r3, #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002734:	e007      	b.n	8002746 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	ffe1f7fd 	.word	0xffe1f7fd
 8002754:	ff1f0efe 	.word	0xff1f0efe

08002758 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a64      	ldr	r2, [pc, #400]	; (8002900 <HAL_ADC_Start_DMA+0x1a8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_ADC_Start_DMA+0x24>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a63      	ldr	r2, [pc, #396]	; (8002904 <HAL_ADC_Start_DMA+0x1ac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d106      	bne.n	800278a <HAL_ADC_Start_DMA+0x32>
 800277c:	4b60      	ldr	r3, [pc, #384]	; (8002900 <HAL_ADC_Start_DMA+0x1a8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f040 80b3 	bne.w	80028f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_ADC_Start_DMA+0x40>
 8002794:	2302      	movs	r3, #2
 8002796:	e0ae      	b.n	80028f6 <HAL_ADC_Start_DMA+0x19e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 f9cb 	bl	8002b3c <ADC_Enable>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 809a 	bne.w	80028e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a4e      	ldr	r2, [pc, #312]	; (8002904 <HAL_ADC_Start_DMA+0x1ac>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d105      	bne.n	80027dc <HAL_ADC_Start_DMA+0x84>
 80027d0:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <HAL_ADC_Start_DMA+0x1a8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d115      	bne.n	8002808 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d026      	beq.n	8002844 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002806:	e01d      	b.n	8002844 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_ADC_Start_DMA+0x1a8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_ADC_Start_DMA+0xd0>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a38      	ldr	r2, [pc, #224]	; (8002904 <HAL_ADC_Start_DMA+0x1ac>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10d      	bne.n	8002844 <HAL_ADC_Start_DMA+0xec>
 8002828:	4b35      	ldr	r3, [pc, #212]	; (8002900 <HAL_ADC_Start_DMA+0x1a8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d007      	beq.n	8002844 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800283c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	f023 0206 	bic.w	r2, r3, #6
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
 800285c:	e002      	b.n	8002864 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <HAL_ADC_Start_DMA+0x1b0>)
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_ADC_Start_DMA+0x1b4>)
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4a23      	ldr	r2, [pc, #140]	; (8002910 <HAL_ADC_Start_DMA+0x1b8>)
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0202 	mvn.w	r2, #2
 800288c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a18      	ldr	r0, [r3, #32]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	334c      	adds	r3, #76	; 0x4c
 80028a8:	4619      	mov	r1, r3
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f000 fbaf 	bl	8003010 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028c0:	d108      	bne.n	80028d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80028d2:	e00f      	b.n	80028f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80028e4:	e006      	b.n	80028f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80028ee:	e001      	b.n	80028f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40012400 	.word	0x40012400
 8002904:	40012800 	.word	0x40012800
 8002908:	08002c73 	.word	0x08002c73
 800290c:	08002cef 	.word	0x08002cef
 8002910:	08002d0b 	.word	0x08002d0b

08002914 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
	...

0800294c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x20>
 8002968:	2302      	movs	r3, #2
 800296a:	e0dc      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x1da>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d81c      	bhi.n	80029b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b05      	subs	r3, #5
 800298e:	221f      	movs	r2, #31
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	4019      	ands	r1, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	3b05      	subs	r3, #5
 80029a8:	fa00 f203 	lsl.w	r2, r0, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34
 80029b4:	e03c      	b.n	8002a30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d81c      	bhi.n	80029f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	3b23      	subs	r3, #35	; 0x23
 80029d0:	221f      	movs	r2, #31
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	4019      	ands	r1, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	3b23      	subs	r3, #35	; 0x23
 80029ea:	fa00 f203 	lsl.w	r2, r0, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
 80029f6:	e01b      	b.n	8002a30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b41      	subs	r3, #65	; 0x41
 8002a0a:	221f      	movs	r2, #31
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	4019      	ands	r1, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b41      	subs	r3, #65	; 0x41
 8002a24:	fa00 f203 	lsl.w	r2, r0, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b09      	cmp	r3, #9
 8002a36:	d91c      	bls.n	8002a72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	3b1e      	subs	r3, #30
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4019      	ands	r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6898      	ldr	r0, [r3, #8]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	fa00 f203 	lsl.w	r2, r0, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	e019      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6919      	ldr	r1, [r3, #16]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	2207      	movs	r2, #7
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	4019      	ands	r1, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6898      	ldr	r0, [r3, #8]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d003      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ab2:	2b11      	cmp	r3, #17
 8002ab4:	d132      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <HAL_ADC_ConfigChannel+0x1e4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d125      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d126      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002adc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d11a      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae6:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_ADC_ConfigChannel+0x1ec>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	0c9a      	lsrs	r2, r3, #18
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002afc:	e002      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f9      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1b2>
 8002b0a:	e007      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	40012400 	.word	0x40012400
 8002b34:	20000010 	.word	0x20000010
 8002b38:	431bde83 	.word	0x431bde83

08002b3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d040      	beq.n	8002bdc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <ADC_Enable+0xac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <ADC_Enable+0xb0>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b78:	e002      	b.n	8002b80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f9      	bne.n	8002b7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b86:	f7ff fce1 	bl	800254c <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b8c:	e01f      	b.n	8002bce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b8e:	f7ff fcdd 	bl	800254c <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d918      	bls.n	8002bce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d011      	beq.n	8002bce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e007      	b.n	8002bde <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d1d8      	bne.n	8002b8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000010 	.word	0x20000010
 8002bec:	431bde83 	.word	0x431bde83

08002bf0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d12e      	bne.n	8002c68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c1a:	f7ff fc97 	bl	800254c <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c20:	e01b      	b.n	8002c5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c22:	f7ff fc93 	bl	800254c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d914      	bls.n	8002c5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10d      	bne.n	8002c5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f043 0210 	orr.w	r2, r3, #16
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f043 0201 	orr.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e007      	b.n	8002c6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d0dc      	beq.n	8002c22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d127      	bne.n	8002cdc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ca2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ca6:	d115      	bne.n	8002cd4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff fe1d 	bl	8002914 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cda:	e004      	b.n	8002ce6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f7ff fe12 	bl	8002926 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fe01 	bl	8002938 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d72:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <__NVIC_SetPriorityGrouping+0x44>)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	60d3      	str	r3, [r2, #12]
}
 8002d78:	bf00      	nop
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	f003 0307 	and.w	r3, r3, #7
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db0b      	blt.n	8002dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	f003 021f 	and.w	r2, r3, #31
 8002dbc:	4906      	ldr	r1, [pc, #24]	; (8002dd8 <__NVIC_EnableIRQ+0x34>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea4:	d301      	bcc.n	8002eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00f      	b.n	8002eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <SysTick_Config+0x40>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	f7ff ff90 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <SysTick_Config+0x40>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec2:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <SysTick_Config+0x40>)
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	e000e010 	.word	0xe000e010

08002ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff ff2d 	bl	8002d40 <__NVIC_SetPriorityGrouping>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b086      	sub	sp, #24
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f00:	f7ff ff42 	bl	8002d88 <__NVIC_GetPriorityGrouping>
 8002f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7ff ff90 	bl	8002e30 <NVIC_EncodePriority>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff5f 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff35 	bl	8002da4 <__NVIC_EnableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffa2 	bl	8002e94 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e043      	b.n	8002ffa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <HAL_DMA_Init+0xa8>)
 8002f7a:	4413      	add	r3, r2
 8002f7c:	4a22      	ldr	r2, [pc, #136]	; (8003008 <HAL_DMA_Init+0xac>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	009a      	lsls	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_DMA_Init+0xb0>)
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fa6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002faa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	bffdfff8 	.word	0xbffdfff8
 8003008:	cccccccd 	.word	0xcccccccd
 800300c:	40020000 	.word	0x40020000

08003010 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_DMA_Start_IT+0x20>
 800302c:	2302      	movs	r3, #2
 800302e:	e04a      	b.n	80030c6 <HAL_DMA_Start_IT+0xb6>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800303e:	2b01      	cmp	r3, #1
 8003040:	d13a      	bne.n	80030b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f9ae 	bl	80033c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 020e 	orr.w	r2, r2, #14
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e00f      	b.n	80030a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0204 	bic.w	r2, r2, #4
 8003094:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 020a 	orr.w	r2, r2, #10
 80030a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0201 	orr.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e005      	b.n	80030c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
 80030c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d005      	beq.n	80030f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2204      	movs	r2, #4
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e051      	b.n	8003196 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 020e 	bic.w	r2, r2, #14
 8003100:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_DMA_Abort_IT+0xd0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d029      	beq.n	8003170 <HAL_DMA_Abort_IT+0xa0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_DMA_Abort_IT+0xd4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d022      	beq.n	800316c <HAL_DMA_Abort_IT+0x9c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_DMA_Abort_IT+0xd8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d01a      	beq.n	8003166 <HAL_DMA_Abort_IT+0x96>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_DMA_Abort_IT+0xdc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d012      	beq.n	8003160 <HAL_DMA_Abort_IT+0x90>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <HAL_DMA_Abort_IT+0xe0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00a      	beq.n	800315a <HAL_DMA_Abort_IT+0x8a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_DMA_Abort_IT+0xe4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d102      	bne.n	8003154 <HAL_DMA_Abort_IT+0x84>
 800314e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003152:	e00e      	b.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 8003154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003158:	e00b      	b.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 800315a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800315e:	e008      	b.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 8003160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003164:	e005      	b.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 8003166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316a:	e002      	b.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 800316c:	2310      	movs	r3, #16
 800316e:	e000      	b.n	8003172 <HAL_DMA_Abort_IT+0xa2>
 8003170:	2301      	movs	r3, #1
 8003172:	4a11      	ldr	r2, [pc, #68]	; (80031b8 <HAL_DMA_Abort_IT+0xe8>)
 8003174:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
    } 
  }
  return status;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40020008 	.word	0x40020008
 80031a4:	4002001c 	.word	0x4002001c
 80031a8:	40020030 	.word	0x40020030
 80031ac:	40020044 	.word	0x40020044
 80031b0:	40020058 	.word	0x40020058
 80031b4:	4002006c 	.word	0x4002006c
 80031b8:	40020000 	.word	0x40020000

080031bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2204      	movs	r2, #4
 80031da:	409a      	lsls	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d04f      	beq.n	8003284 <HAL_DMA_IRQHandler+0xc8>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d04a      	beq.n	8003284 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d107      	bne.n	800320c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0204 	bic.w	r2, r2, #4
 800320a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a66      	ldr	r2, [pc, #408]	; (80033ac <HAL_DMA_IRQHandler+0x1f0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d029      	beq.n	800326a <HAL_DMA_IRQHandler+0xae>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a65      	ldr	r2, [pc, #404]	; (80033b0 <HAL_DMA_IRQHandler+0x1f4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMA_IRQHandler+0xaa>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <HAL_DMA_IRQHandler+0x1f8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01a      	beq.n	8003260 <HAL_DMA_IRQHandler+0xa4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a62      	ldr	r2, [pc, #392]	; (80033b8 <HAL_DMA_IRQHandler+0x1fc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d012      	beq.n	800325a <HAL_DMA_IRQHandler+0x9e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a60      	ldr	r2, [pc, #384]	; (80033bc <HAL_DMA_IRQHandler+0x200>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00a      	beq.n	8003254 <HAL_DMA_IRQHandler+0x98>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5f      	ldr	r2, [pc, #380]	; (80033c0 <HAL_DMA_IRQHandler+0x204>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d102      	bne.n	800324e <HAL_DMA_IRQHandler+0x92>
 8003248:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800324c:	e00e      	b.n	800326c <HAL_DMA_IRQHandler+0xb0>
 800324e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003252:	e00b      	b.n	800326c <HAL_DMA_IRQHandler+0xb0>
 8003254:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003258:	e008      	b.n	800326c <HAL_DMA_IRQHandler+0xb0>
 800325a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800325e:	e005      	b.n	800326c <HAL_DMA_IRQHandler+0xb0>
 8003260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003264:	e002      	b.n	800326c <HAL_DMA_IRQHandler+0xb0>
 8003266:	2340      	movs	r3, #64	; 0x40
 8003268:	e000      	b.n	800326c <HAL_DMA_IRQHandler+0xb0>
 800326a:	2304      	movs	r3, #4
 800326c:	4a55      	ldr	r2, [pc, #340]	; (80033c4 <HAL_DMA_IRQHandler+0x208>)
 800326e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8094 	beq.w	80033a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003282:	e08e      	b.n	80033a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2202      	movs	r2, #2
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d056      	beq.n	8003342 <HAL_DMA_IRQHandler+0x186>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d051      	beq.n	8003342 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020a 	bic.w	r2, r2, #10
 80032ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_DMA_IRQHandler+0x1f0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d029      	beq.n	8003322 <HAL_DMA_IRQHandler+0x166>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <HAL_DMA_IRQHandler+0x1f4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_IRQHandler+0x162>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <HAL_DMA_IRQHandler+0x1f8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01a      	beq.n	8003318 <HAL_DMA_IRQHandler+0x15c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a34      	ldr	r2, [pc, #208]	; (80033b8 <HAL_DMA_IRQHandler+0x1fc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d012      	beq.n	8003312 <HAL_DMA_IRQHandler+0x156>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a32      	ldr	r2, [pc, #200]	; (80033bc <HAL_DMA_IRQHandler+0x200>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00a      	beq.n	800330c <HAL_DMA_IRQHandler+0x150>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a31      	ldr	r2, [pc, #196]	; (80033c0 <HAL_DMA_IRQHandler+0x204>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <HAL_DMA_IRQHandler+0x14a>
 8003300:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003304:	e00e      	b.n	8003324 <HAL_DMA_IRQHandler+0x168>
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	e00b      	b.n	8003324 <HAL_DMA_IRQHandler+0x168>
 800330c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003310:	e008      	b.n	8003324 <HAL_DMA_IRQHandler+0x168>
 8003312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003316:	e005      	b.n	8003324 <HAL_DMA_IRQHandler+0x168>
 8003318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800331c:	e002      	b.n	8003324 <HAL_DMA_IRQHandler+0x168>
 800331e:	2320      	movs	r3, #32
 8003320:	e000      	b.n	8003324 <HAL_DMA_IRQHandler+0x168>
 8003322:	2302      	movs	r3, #2
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <HAL_DMA_IRQHandler+0x208>)
 8003326:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d034      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003340:	e02f      	b.n	80033a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2208      	movs	r2, #8
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d028      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x1e8>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	d023      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 020e 	bic.w	r2, r2, #14
 800336a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f202 	lsl.w	r2, r1, r2
 800337a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
    }
  }
  return;
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
}
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40020008 	.word	0x40020008
 80033b0:	4002001c 	.word	0x4002001c
 80033b4:	40020030 	.word	0x40020030
 80033b8:	40020044 	.word	0x40020044
 80033bc:	40020058 	.word	0x40020058
 80033c0:	4002006c 	.word	0x4002006c
 80033c4:	40020000 	.word	0x40020000

080033c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d108      	bne.n	8003408 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003406:	e007      	b.n	8003418 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	60da      	str	r2, [r3, #12]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
	...

08003424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003424:	b480      	push	{r7}
 8003426:	b08b      	sub	sp, #44	; 0x2c
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003436:	e169      	b.n	800370c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003438:	2201      	movs	r2, #1
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	4013      	ands	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8158 	bne.w	8003706 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a9a      	ldr	r2, [pc, #616]	; (80036c4 <HAL_GPIO_Init+0x2a0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d05e      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003460:	4a98      	ldr	r2, [pc, #608]	; (80036c4 <HAL_GPIO_Init+0x2a0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d875      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 8003466:	4a98      	ldr	r2, [pc, #608]	; (80036c8 <HAL_GPIO_Init+0x2a4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d058      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 800346c:	4a96      	ldr	r2, [pc, #600]	; (80036c8 <HAL_GPIO_Init+0x2a4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d86f      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 8003472:	4a96      	ldr	r2, [pc, #600]	; (80036cc <HAL_GPIO_Init+0x2a8>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d052      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003478:	4a94      	ldr	r2, [pc, #592]	; (80036cc <HAL_GPIO_Init+0x2a8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d869      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 800347e:	4a94      	ldr	r2, [pc, #592]	; (80036d0 <HAL_GPIO_Init+0x2ac>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d04c      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003484:	4a92      	ldr	r2, [pc, #584]	; (80036d0 <HAL_GPIO_Init+0x2ac>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d863      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 800348a:	4a92      	ldr	r2, [pc, #584]	; (80036d4 <HAL_GPIO_Init+0x2b0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d046      	beq.n	800351e <HAL_GPIO_Init+0xfa>
 8003490:	4a90      	ldr	r2, [pc, #576]	; (80036d4 <HAL_GPIO_Init+0x2b0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d85d      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 8003496:	2b12      	cmp	r3, #18
 8003498:	d82a      	bhi.n	80034f0 <HAL_GPIO_Init+0xcc>
 800349a:	2b12      	cmp	r3, #18
 800349c:	d859      	bhi.n	8003552 <HAL_GPIO_Init+0x12e>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_GPIO_Init+0x80>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	0800351f 	.word	0x0800351f
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	0800350b 	.word	0x0800350b
 80034b0:	0800354d 	.word	0x0800354d
 80034b4:	08003553 	.word	0x08003553
 80034b8:	08003553 	.word	0x08003553
 80034bc:	08003553 	.word	0x08003553
 80034c0:	08003553 	.word	0x08003553
 80034c4:	08003553 	.word	0x08003553
 80034c8:	08003553 	.word	0x08003553
 80034cc:	08003553 	.word	0x08003553
 80034d0:	08003553 	.word	0x08003553
 80034d4:	08003553 	.word	0x08003553
 80034d8:	08003553 	.word	0x08003553
 80034dc:	08003553 	.word	0x08003553
 80034e0:	08003553 	.word	0x08003553
 80034e4:	08003553 	.word	0x08003553
 80034e8:	08003501 	.word	0x08003501
 80034ec:	08003515 	.word	0x08003515
 80034f0:	4a79      	ldr	r2, [pc, #484]	; (80036d8 <HAL_GPIO_Init+0x2b4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034f6:	e02c      	b.n	8003552 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	623b      	str	r3, [r7, #32]
          break;
 80034fe:	e029      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	3304      	adds	r3, #4
 8003506:	623b      	str	r3, [r7, #32]
          break;
 8003508:	e024      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	3308      	adds	r3, #8
 8003510:	623b      	str	r3, [r7, #32]
          break;
 8003512:	e01f      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	330c      	adds	r3, #12
 800351a:	623b      	str	r3, [r7, #32]
          break;
 800351c:	e01a      	b.n	8003554 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003526:	2304      	movs	r3, #4
 8003528:	623b      	str	r3, [r7, #32]
          break;
 800352a:	e013      	b.n	8003554 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003534:	2308      	movs	r3, #8
 8003536:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	611a      	str	r2, [r3, #16]
          break;
 800353e:	e009      	b.n	8003554 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003540:	2308      	movs	r3, #8
 8003542:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	615a      	str	r2, [r3, #20]
          break;
 800354a:	e003      	b.n	8003554 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800354c:	2300      	movs	r3, #0
 800354e:	623b      	str	r3, [r7, #32]
          break;
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x130>
          break;
 8003552:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2bff      	cmp	r3, #255	; 0xff
 8003558:	d801      	bhi.n	800355e <HAL_GPIO_Init+0x13a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	e001      	b.n	8003562 <HAL_GPIO_Init+0x13e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2bff      	cmp	r3, #255	; 0xff
 8003568:	d802      	bhi.n	8003570 <HAL_GPIO_Init+0x14c>
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	e002      	b.n	8003576 <HAL_GPIO_Init+0x152>
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	3b08      	subs	r3, #8
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	210f      	movs	r1, #15
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	401a      	ands	r2, r3
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	431a      	orrs	r2, r3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80b1 	beq.w	8003706 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035a4:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <HAL_GPIO_Init+0x2b8>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	4a4c      	ldr	r2, [pc, #304]	; (80036dc <HAL_GPIO_Init+0x2b8>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6193      	str	r3, [r2, #24]
 80035b0:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_GPIO_Init+0x2b8>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035bc:	4a48      	ldr	r2, [pc, #288]	; (80036e0 <HAL_GPIO_Init+0x2bc>)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	220f      	movs	r2, #15
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <HAL_GPIO_Init+0x2c0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_GPIO_Init+0x1ec>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3f      	ldr	r2, [pc, #252]	; (80036e8 <HAL_GPIO_Init+0x2c4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00d      	beq.n	800360c <HAL_GPIO_Init+0x1e8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3e      	ldr	r2, [pc, #248]	; (80036ec <HAL_GPIO_Init+0x2c8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <HAL_GPIO_Init+0x1e4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <HAL_GPIO_Init+0x2cc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_GPIO_Init+0x1e0>
 8003600:	2303      	movs	r3, #3
 8003602:	e006      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 8003604:	2304      	movs	r3, #4
 8003606:	e004      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 8003608:	2302      	movs	r3, #2
 800360a:	e002      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_GPIO_Init+0x1ee>
 8003610:	2300      	movs	r3, #0
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	f002 0203 	and.w	r2, r2, #3
 8003618:	0092      	lsls	r2, r2, #2
 800361a:	4093      	lsls	r3, r2
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003622:	492f      	ldr	r1, [pc, #188]	; (80036e0 <HAL_GPIO_Init+0x2bc>)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	089b      	lsrs	r3, r3, #2
 8003628:	3302      	adds	r3, #2
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d006      	beq.n	800364a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800363c:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	492c      	ldr	r1, [pc, #176]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e006      	b.n	8003658 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	43db      	mvns	r3, r3
 8003652:	4928      	ldr	r1, [pc, #160]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003654:	4013      	ands	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d006      	beq.n	8003672 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003664:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	4922      	ldr	r1, [pc, #136]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
 8003670:	e006      	b.n	8003680 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	43db      	mvns	r3, r3
 800367a:	491e      	ldr	r1, [pc, #120]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800367c:	4013      	ands	r3, r2
 800367e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	4918      	ldr	r1, [pc, #96]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	608b      	str	r3, [r1, #8]
 8003698:	e006      	b.n	80036a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	4914      	ldr	r1, [pc, #80]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d021      	beq.n	80036f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <HAL_GPIO_Init+0x2d0>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
 80036c0:	e021      	b.n	8003706 <HAL_GPIO_Init+0x2e2>
 80036c2:	bf00      	nop
 80036c4:	10320000 	.word	0x10320000
 80036c8:	10310000 	.word	0x10310000
 80036cc:	10220000 	.word	0x10220000
 80036d0:	10210000 	.word	0x10210000
 80036d4:	10120000 	.word	0x10120000
 80036d8:	10110000 	.word	0x10110000
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40010000 	.word	0x40010000
 80036e4:	40010800 	.word	0x40010800
 80036e8:	40010c00 	.word	0x40010c00
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40011400 	.word	0x40011400
 80036f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_GPIO_Init+0x304>)
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	43db      	mvns	r3, r3
 8003700:	4909      	ldr	r1, [pc, #36]	; (8003728 <HAL_GPIO_Init+0x304>)
 8003702:	4013      	ands	r3, r2
 8003704:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	3301      	adds	r3, #1
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	fa22 f303 	lsr.w	r3, r2, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	f47f ae8e 	bne.w	8003438 <HAL_GPIO_Init+0x14>
  }
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	372c      	adds	r7, #44	; 0x2c
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e12b      	b.n	8003996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fe fdb4 	bl	80022c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0201 	bic.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800377e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800378e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003790:	f001 fc36 	bl	8005000 <HAL_RCC_GetPCLK1Freq>
 8003794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a81      	ldr	r2, [pc, #516]	; (80039a0 <HAL_I2C_Init+0x274>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d807      	bhi.n	80037b0 <HAL_I2C_Init+0x84>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a80      	ldr	r2, [pc, #512]	; (80039a4 <HAL_I2C_Init+0x278>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	bf94      	ite	ls
 80037a8:	2301      	movls	r3, #1
 80037aa:	2300      	movhi	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e006      	b.n	80037be <HAL_I2C_Init+0x92>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a7d      	ldr	r2, [pc, #500]	; (80039a8 <HAL_I2C_Init+0x27c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bf94      	ite	ls
 80037b8:	2301      	movls	r3, #1
 80037ba:	2300      	movhi	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0e7      	b.n	8003996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a78      	ldr	r2, [pc, #480]	; (80039ac <HAL_I2C_Init+0x280>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	0c9b      	lsrs	r3, r3, #18
 80037d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a6a      	ldr	r2, [pc, #424]	; (80039a0 <HAL_I2C_Init+0x274>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d802      	bhi.n	8003800 <HAL_I2C_Init+0xd4>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	3301      	adds	r3, #1
 80037fe:	e009      	b.n	8003814 <HAL_I2C_Init+0xe8>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	4a69      	ldr	r2, [pc, #420]	; (80039b0 <HAL_I2C_Init+0x284>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	3301      	adds	r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	495c      	ldr	r1, [pc, #368]	; (80039a0 <HAL_I2C_Init+0x274>)
 8003830:	428b      	cmp	r3, r1
 8003832:	d819      	bhi.n	8003868 <HAL_I2C_Init+0x13c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e59      	subs	r1, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003848:	400b      	ands	r3, r1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_I2C_Init+0x138>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1e59      	subs	r1, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fbb1 f3f3 	udiv	r3, r1, r3
 800385c:	3301      	adds	r3, #1
 800385e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003862:	e051      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003864:	2304      	movs	r3, #4
 8003866:	e04f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d111      	bne.n	8003894 <HAL_I2C_Init+0x168>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	1e58      	subs	r0, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6859      	ldr	r1, [r3, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	440b      	add	r3, r1
 800387e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003882:	3301      	adds	r3, #1
 8003884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e012      	b.n	80038ba <HAL_I2C_Init+0x18e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e58      	subs	r0, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	0099      	lsls	r1, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x196>
 80038be:	2301      	movs	r3, #1
 80038c0:	e022      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10e      	bne.n	80038e8 <HAL_I2C_Init+0x1bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e58      	subs	r0, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	440b      	add	r3, r1
 80038d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038e6:	e00f      	b.n	8003908 <HAL_I2C_Init+0x1dc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1e58      	subs	r0, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	0099      	lsls	r1, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	6809      	ldr	r1, [r1, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69da      	ldr	r2, [r3, #28]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6911      	ldr	r1, [r2, #16]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68d2      	ldr	r2, [r2, #12]
 8003942:	4311      	orrs	r1, r2
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	000186a0 	.word	0x000186a0
 80039a4:	001e847f 	.word	0x001e847f
 80039a8:	003d08ff 	.word	0x003d08ff
 80039ac:	431bde83 	.word	0x431bde83
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	461a      	mov	r2, r3
 80039c0:	460b      	mov	r3, r1
 80039c2:	817b      	strh	r3, [r7, #10]
 80039c4:	4613      	mov	r3, r2
 80039c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f7fe fdc0 	bl	800254c <HAL_GetTick>
 80039cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	f040 80e0 	bne.w	8003b9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2319      	movs	r3, #25
 80039e2:	2201      	movs	r2, #1
 80039e4:	4970      	ldr	r1, [pc, #448]	; (8003ba8 <HAL_I2C_Master_Transmit+0x1f4>)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fdb0 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0d3      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2C_Master_Transmit+0x50>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0cc      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d007      	beq.n	8003a2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0201 	orr.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2221      	movs	r2, #33	; 0x21
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2210      	movs	r2, #16
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	893a      	ldrh	r2, [r7, #8]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a50      	ldr	r2, [pc, #320]	; (8003bac <HAL_I2C_Master_Transmit+0x1f8>)
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a6c:	8979      	ldrh	r1, [r7, #10]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fc40 	bl	80042f8 <I2C_MasterRequestWrite>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e08d      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a98:	e066      	b.n	8003b68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fe2a 	bl	80046f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d11b      	bne.n	8003b3c <HAL_I2C_Master_Transmit+0x188>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d017      	beq.n	8003b3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	6a39      	ldr	r1, [r7, #32]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fe1a 	bl	800477a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d107      	bne.n	8003b64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e01a      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d194      	bne.n	8003a9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e000      	b.n	8003b9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b9c:	2302      	movs	r3, #2
  }
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	00100002 	.word	0x00100002
 8003bac:	ffff0000 	.word	0xffff0000

08003bb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7fe fcc4 	bl	800254c <HAL_GetTick>
 8003bc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	f040 8111 	bne.w	8003dfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	2319      	movs	r3, #25
 8003bde:	2201      	movs	r2, #1
 8003be0:	4988      	ldr	r1, [pc, #544]	; (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fcb2 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e104      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_I2C_IsDeviceReady+0x50>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0fd      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d007      	beq.n	8003c26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2224      	movs	r2, #36	; 0x24
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4a70      	ldr	r2, [pc, #448]	; (8003e08 <HAL_I2C_IsDeviceReady+0x258>)
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fc70 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c80:	d103      	bne.n	8003c8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0b6      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c8e:	897b      	ldrh	r3, [r7, #10]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fc55 	bl	800254c <HAL_GetTick>
 8003ca2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	bf0c      	ite	eq
 8003cb2:	2301      	moveq	r3, #1
 8003cb4:	2300      	movne	r3, #0
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cd2:	e025      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fe fc3a 	bl	800254c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <HAL_I2C_IsDeviceReady+0x13a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d103      	bne.n	8003cf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22a0      	movs	r2, #160	; 0xa0
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2ba0      	cmp	r3, #160	; 0xa0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_I2C_IsDeviceReady+0x188>
 8003d32:	7dbb      	ldrb	r3, [r7, #22]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0cd      	beq.n	8003cd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d129      	bne.n	8003da2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4921      	ldr	r1, [pc, #132]	; (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fbe4 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e036      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e02c      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	2319      	movs	r3, #25
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	490f      	ldr	r1, [pc, #60]	; (8003e04 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 fbc0 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e012      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f4ff af32 	bcc.w	8003c4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3720      	adds	r7, #32
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00100002 	.word	0x00100002
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	; 0x28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d016      	beq.n	8003e6a <HAL_I2C_ER_IRQHandler+0x5e>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e58:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	0a5b      	lsrs	r3, r3, #9
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00e      	beq.n	8003e94 <HAL_I2C_ER_IRQHandler+0x88>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003e92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03f      	beq.n	8003f20 <HAL_I2C_ER_IRQHandler+0x114>
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d039      	beq.n	8003f20 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003eac:	7efb      	ldrb	r3, [r7, #27]
 8003eae:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebe:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ec6:	7ebb      	ldrb	r3, [r7, #26]
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d112      	bne.n	8003ef2 <HAL_I2C_ER_IRQHandler+0xe6>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_I2C_ER_IRQHandler+0xe6>
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	2b21      	cmp	r3, #33	; 0x21
 8003ed6:	d008      	beq.n	8003eea <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ed8:	7cfb      	ldrb	r3, [r7, #19]
 8003eda:	2b29      	cmp	r3, #41	; 0x29
 8003edc:	d005      	beq.n	8003eea <HAL_I2C_ER_IRQHandler+0xde>
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	2b28      	cmp	r3, #40	; 0x28
 8003ee2:	d106      	bne.n	8003ef2 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b21      	cmp	r3, #33	; 0x21
 8003ee8:	d103      	bne.n	8003ef2 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f862 	bl	8003fb4 <I2C_Slave_AF>
 8003ef0:	e016      	b.n	8003f20 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003efa:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f043 0304 	orr.w	r3, r3, #4
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f04:	7efb      	ldrb	r3, [r7, #27]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d002      	beq.n	8003f10 <HAL_I2C_ER_IRQHandler+0x104>
 8003f0a:	7efb      	ldrb	r3, [r7, #27]
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	d107      	bne.n	8003f20 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	0adb      	lsrs	r3, r3, #11
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_I2C_ER_IRQHandler+0x13e>
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	f043 0308 	orr.w	r3, r3, #8
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f48:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f899 	bl	8004094 <I2C_ITError>
  }
}
 8003f62:	bf00      	nop
 8003f64:	3728      	adds	r7, #40	; 0x28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d002      	beq.n	8003fd6 <I2C_Slave_AF+0x22>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d129      	bne.n	800402a <I2C_Slave_AF+0x76>
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b28      	cmp	r3, #40	; 0x28
 8003fda:	d126      	bne.n	800402a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <I2C_Slave_AF+0xdc>)
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ff0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ffa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffaa 	bl	8003f7c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004028:	e02e      	b.n	8004088 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b21      	cmp	r3, #33	; 0x21
 800402e:	d126      	bne.n	800407e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a17      	ldr	r2, [pc, #92]	; (8004090 <I2C_Slave_AF+0xdc>)
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2221      	movs	r2, #33	; 0x21
 800403a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800405a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004064:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004074:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff ff77 	bl	8003f6a <HAL_I2C_SlaveTxCpltCallback>
}
 800407c:	e004      	b.n	8004088 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004086:	615a      	str	r2, [r3, #20]
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	ffff0000 	.word	0xffff0000

08004094 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80040ac:	7bbb      	ldrb	r3, [r7, #14]
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d002      	beq.n	80040b8 <I2C_ITError+0x24>
 80040b2:	7bbb      	ldrb	r3, [r7, #14]
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d10a      	bne.n	80040ce <I2C_ITError+0x3a>
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b22      	cmp	r3, #34	; 0x22
 80040bc:	d107      	bne.n	80040ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040d4:	2b28      	cmp	r3, #40	; 0x28
 80040d6:	d107      	bne.n	80040e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2228      	movs	r2, #40	; 0x28
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040e6:	e015      	b.n	8004114 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f6:	d00a      	beq.n	800410e <I2C_ITError+0x7a>
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
 80040fa:	2b60      	cmp	r3, #96	; 0x60
 80040fc:	d007      	beq.n	800410e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004122:	d161      	bne.n	80041e8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800413c:	2b01      	cmp	r3, #1
 800413e:	d020      	beq.n	8004182 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004144:	4a6a      	ldr	r2, [pc, #424]	; (80042f0 <I2C_ITError+0x25c>)
 8004146:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ffbf 	bl	80030d0 <HAL_DMA_Abort_IT>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8089 	beq.w	800426c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3
 8004180:	e074      	b.n	800426c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	4a5a      	ldr	r2, [pc, #360]	; (80042f0 <I2C_ITError+0x25c>)
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe ff9e 	bl	80030d0 <HAL_DMA_Abort_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d068      	beq.n	800426c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d10b      	bne.n	80041c0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041e2:	4610      	mov	r0, r2
 80041e4:	4798      	blx	r3
 80041e6:	e041      	b.n	800426c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b60      	cmp	r3, #96	; 0x60
 80041f2:	d125      	bne.n	8004240 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d10b      	bne.n	8004228 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff feb1 	bl	8003fa0 <HAL_I2C_AbortCpltCallback>
 800423e:	e015      	b.n	800426c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d10b      	bne.n	8004266 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fe91 	bl	8003f8e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10e      	bne.n	800429a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800428c:	2b00      	cmp	r3, #0
 800428e:	d104      	bne.n	800429a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042a8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d113      	bne.n	80042e6 <I2C_ITError+0x252>
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b28      	cmp	r3, #40	; 0x28
 80042c2:	d110      	bne.n	80042e6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <I2C_ITError+0x260>)
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fe4b 	bl	8003f7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	080043fd 	.word	0x080043fd
 80042f4:	ffff0000 	.word	0xffff0000

080042f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	607a      	str	r2, [r7, #4]
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	460b      	mov	r3, r1
 8004306:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d006      	beq.n	8004322 <I2C_MasterRequestWrite+0x2a>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d003      	beq.n	8004322 <I2C_MasterRequestWrite+0x2a>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004320:	d108      	bne.n	8004334 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e00b      	b.n	800434c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	2b12      	cmp	r3, #18
 800433a:	d107      	bne.n	800434c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800434a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f8f7 	bl	800454c <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d103      	bne.n	800437c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e035      	b.n	80043ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004388:	d108      	bne.n	800439c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800438a:	897b      	ldrh	r3, [r7, #10]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004398:	611a      	str	r2, [r3, #16]
 800439a:	e01b      	b.n	80043d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800439c:	897b      	ldrh	r3, [r7, #10]
 800439e:	11db      	asrs	r3, r3, #7
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 0306 	and.w	r3, r3, #6
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f063 030f 	orn	r3, r3, #15
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <I2C_MasterRequestWrite+0xfc>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 f91d 	bl	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e010      	b.n	80043ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043ca:	897b      	ldrh	r3, [r7, #10]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4907      	ldr	r1, [pc, #28]	; (80043f8 <I2C_MasterRequestWrite+0x100>)
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f90d 	bl	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	00010008 	.word	0x00010008
 80043f8:	00010002 	.word	0x00010002

080043fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004416:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <I2C_DMAAbort+0x148>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	08db      	lsrs	r3, r3, #3
 800441c:	4a4a      	ldr	r2, [pc, #296]	; (8004548 <I2C_DMAAbort+0x14c>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	0a1a      	lsrs	r2, r3, #8
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	00da      	lsls	r2, r3, #3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004442:	e00a      	b.n	800445a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004458:	d0ea      	beq.n	8004430 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	2200      	movs	r2, #0
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	2200      	movs	r2, #0
 800449e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b60      	cmp	r3, #96	; 0x60
 80044ca:	d10e      	bne.n	80044ea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80044e2:	6978      	ldr	r0, [r7, #20]
 80044e4:	f7ff fd5c 	bl	8003fa0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044e8:	e027      	b.n	800453a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044f0:	2b28      	cmp	r3, #40	; 0x28
 80044f2:	d117      	bne.n	8004524 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004512:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2228      	movs	r2, #40	; 0x28
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004522:	e007      	b.n	8004534 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004534:	6978      	ldr	r0, [r7, #20]
 8004536:	f7ff fd2a 	bl	8003f8e <HAL_I2C_ErrorCallback>
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000010 	.word	0x20000010
 8004548:	14f8b589 	.word	0x14f8b589

0800454c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	4613      	mov	r3, r2
 800455a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455c:	e025      	b.n	80045aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d021      	beq.n	80045aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fd fff1 	bl	800254c <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e023      	b.n	80045f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10d      	bne.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4013      	ands	r3, r2
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	bf0c      	ite	eq
 80045c6:	2301      	moveq	r3, #1
 80045c8:	2300      	movne	r3, #0
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	e00c      	b.n	80045ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4013      	ands	r3, r2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d0b6      	beq.n	800455e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004608:	e051      	b.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004618:	d123      	bne.n	8004662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004628:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004632:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e046      	b.n	80046f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d021      	beq.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466a:	f7fd ff6f 	bl	800254c <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d302      	bcc.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d116      	bne.n	80046ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f043 0220 	orr.w	r2, r3, #32
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e020      	b.n	80046f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d10c      	bne.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	43da      	mvns	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bf14      	ite	ne
 80046ca:	2301      	movne	r3, #1
 80046cc:	2300      	moveq	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	e00b      	b.n	80046ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	43da      	mvns	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d18d      	bne.n	800460a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004704:	e02d      	b.n	8004762 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f878 	bl	80047fc <I2C_IsAcknowledgeFailed>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e02d      	b.n	8004772 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d021      	beq.n	8004762 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fd ff15 	bl	800254c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d116      	bne.n	8004762 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0220 	orr.w	r2, r3, #32
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e007      	b.n	8004772 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476c:	2b80      	cmp	r3, #128	; 0x80
 800476e:	d1ca      	bne.n	8004706 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	60f8      	str	r0, [r7, #12]
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004786:	e02d      	b.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f837 	bl	80047fc <I2C_IsAcknowledgeFailed>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e02d      	b.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d021      	beq.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a0:	f7fd fed4 	bl	800254c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d302      	bcc.n	80047b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d116      	bne.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d1ca      	bne.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004812:	d11b      	bne.n	800484c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e26c      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8087 	beq.w	8004986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004878:	4b92      	ldr	r3, [pc, #584]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b04      	cmp	r3, #4
 8004882:	d00c      	beq.n	800489e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004884:	4b8f      	ldr	r3, [pc, #572]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b08      	cmp	r3, #8
 800488e:	d112      	bne.n	80048b6 <HAL_RCC_OscConfig+0x5e>
 8004890:	4b8c      	ldr	r3, [pc, #560]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d10b      	bne.n	80048b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489e:	4b89      	ldr	r3, [pc, #548]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d06c      	beq.n	8004984 <HAL_RCC_OscConfig+0x12c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d168      	bne.n	8004984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e246      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x76>
 80048c0:	4b80      	ldr	r3, [pc, #512]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7f      	ldr	r2, [pc, #508]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e02e      	b.n	800492c <HAL_RCC_OscConfig+0xd4>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x98>
 80048d6:	4b7b      	ldr	r3, [pc, #492]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7a      	ldr	r2, [pc, #488]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b78      	ldr	r3, [pc, #480]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a77      	ldr	r2, [pc, #476]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xd4>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0xbc>
 80048fa:	4b72      	ldr	r3, [pc, #456]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a71      	ldr	r2, [pc, #452]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6e      	ldr	r2, [pc, #440]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xd4>
 8004914:	4b6b      	ldr	r3, [pc, #428]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6a      	ldr	r2, [pc, #424]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b68      	ldr	r3, [pc, #416]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a67      	ldr	r2, [pc, #412]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fd fe0a 	bl	800254c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd fe06 	bl	800254c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1fa      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xe4>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fdf6 	bl	800254c <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd fdf2 	bl	800254c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1e6      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x10c>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d063      	beq.n	8004a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004992:	4b4c      	ldr	r3, [pc, #304]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800499e:	4b49      	ldr	r3, [pc, #292]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d11c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x18c>
 80049aa:	4b46      	ldr	r3, [pc, #280]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d116      	bne.n	80049e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_RCC_OscConfig+0x176>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e1ba      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ce:	4b3d      	ldr	r3, [pc, #244]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4939      	ldr	r1, [pc, #228]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	e03a      	b.n	8004a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ec:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fd fdab 	bl	800254c <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fa:	f7fd fda7 	bl	800254c <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e19b      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a18:	4b2a      	ldr	r3, [pc, #168]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4927      	ldr	r1, [pc, #156]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
 8004a2c:	e015      	b.n	8004a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2e:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a34:	f7fd fd8a 	bl	800254c <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fd86 	bl	800254c <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e17a      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03a      	beq.n	8004adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d019      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <HAL_RCC_OscConfig+0x274>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a74:	f7fd fd6a 	bl	800254c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fd fd66 	bl	800254c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e15a      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <HAL_RCC_OscConfig+0x26c>)
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f000 fac4 	bl	8005028 <RCC_Delay>
 8004aa0:	e01c      	b.n	8004adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_RCC_OscConfig+0x274>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fd50 	bl	800254c <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aae:	e00f      	b.n	8004ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fd fd4c 	bl	800254c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d908      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e140      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	42420000 	.word	0x42420000
 8004acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad0:	4b9e      	ldr	r3, [pc, #632]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e9      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a6 	beq.w	8004c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aea:	2300      	movs	r3, #0
 8004aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aee:	4b97      	ldr	r3, [pc, #604]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10d      	bne.n	8004b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	4b94      	ldr	r3, [pc, #592]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4a93      	ldr	r2, [pc, #588]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	61d3      	str	r3, [r2, #28]
 8004b06:	4b91      	ldr	r3, [pc, #580]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b8e      	ldr	r3, [pc, #568]	; (8004d50 <HAL_RCC_OscConfig+0x4f8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d118      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b22:	4b8b      	ldr	r3, [pc, #556]	; (8004d50 <HAL_RCC_OscConfig+0x4f8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a8a      	ldr	r2, [pc, #552]	; (8004d50 <HAL_RCC_OscConfig+0x4f8>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd fd0d 	bl	800254c <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b36:	f7fd fd09 	bl	800254c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b64      	cmp	r3, #100	; 0x64
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e0fd      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	4b81      	ldr	r3, [pc, #516]	; (8004d50 <HAL_RCC_OscConfig+0x4f8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x312>
 8004b5c:	4b7b      	ldr	r3, [pc, #492]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	4a7a      	ldr	r2, [pc, #488]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6213      	str	r3, [r2, #32]
 8004b68:	e02d      	b.n	8004bc6 <HAL_RCC_OscConfig+0x36e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x334>
 8004b72:	4b76      	ldr	r3, [pc, #472]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4a75      	ldr	r2, [pc, #468]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	6213      	str	r3, [r2, #32]
 8004b7e:	4b73      	ldr	r3, [pc, #460]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	4a72      	ldr	r2, [pc, #456]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	f023 0304 	bic.w	r3, r3, #4
 8004b88:	6213      	str	r3, [r2, #32]
 8004b8a:	e01c      	b.n	8004bc6 <HAL_RCC_OscConfig+0x36e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d10c      	bne.n	8004bae <HAL_RCC_OscConfig+0x356>
 8004b94:	4b6d      	ldr	r3, [pc, #436]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4a6c      	ldr	r2, [pc, #432]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	6213      	str	r3, [r2, #32]
 8004ba0:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4a69      	ldr	r2, [pc, #420]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6213      	str	r3, [r2, #32]
 8004bac:	e00b      	b.n	8004bc6 <HAL_RCC_OscConfig+0x36e>
 8004bae:	4b67      	ldr	r3, [pc, #412]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4a66      	ldr	r2, [pc, #408]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	6213      	str	r3, [r2, #32]
 8004bba:	4b64      	ldr	r3, [pc, #400]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	4a63      	ldr	r2, [pc, #396]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004bc0:	f023 0304 	bic.w	r3, r3, #4
 8004bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d015      	beq.n	8004bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bce:	f7fd fcbd 	bl	800254c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fd fcb9 	bl	800254c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0ab      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bec:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0ee      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x37e>
 8004bf8:	e014      	b.n	8004c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfa:	f7fd fca7 	bl	800254c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fd fca3 	bl	800254c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e095      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c18:	4b4c      	ldr	r3, [pc, #304]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1ee      	bne.n	8004c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d105      	bne.n	8004c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2a:	4b48      	ldr	r3, [pc, #288]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4a47      	ldr	r2, [pc, #284]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8081 	beq.w	8004d42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c40:	4b42      	ldr	r3, [pc, #264]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 030c 	and.w	r3, r3, #12
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d061      	beq.n	8004d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d146      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c54:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <HAL_RCC_OscConfig+0x4fc>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5a:	f7fd fc77 	bl	800254c <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c62:	f7fd fc73 	bl	800254c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e067      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d108      	bne.n	8004c9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	492d      	ldr	r1, [pc, #180]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a19      	ldr	r1, [r3, #32]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	430b      	orrs	r3, r1
 8004cae:	4927      	ldr	r1, [pc, #156]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <HAL_RCC_OscConfig+0x4fc>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fd fc47 	bl	800254c <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fd fc43 	bl	800254c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e037      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x46a>
 8004ce0:	e02f      	b.n	8004d42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <HAL_RCC_OscConfig+0x4fc>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fc30 	bl	800254c <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fd fc2c 	bl	800254c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e020      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x498>
 8004d0e:	e018      	b.n	8004d42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e013      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40007000 	.word	0x40007000
 8004d54:	42420060 	.word	0x42420060

08004d58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e0d0      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d910      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7a:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 0207 	bic.w	r2, r3, #7
 8004d82:	4965      	ldr	r1, [pc, #404]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8a:	4b63      	ldr	r3, [pc, #396]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d001      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0b8      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d020      	beq.n	8004dea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a58      	ldr	r2, [pc, #352]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004dbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dcc:	4b53      	ldr	r3, [pc, #332]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a52      	ldr	r2, [pc, #328]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd8:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	494d      	ldr	r1, [pc, #308]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d040      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dfe:	4b47      	ldr	r3, [pc, #284]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d115      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e07f      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e073      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e26:	4b3d      	ldr	r3, [pc, #244]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e06b      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f023 0203 	bic.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4936      	ldr	r1, [pc, #216]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e48:	f7fd fb80 	bl	800254c <HAL_GetTick>
 8004e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e50:	f7fd fb7c 	bl	800254c <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e053      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 020c 	and.w	r2, r3, #12
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d1eb      	bne.n	8004e50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e78:	4b27      	ldr	r3, [pc, #156]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d210      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e86:	4b24      	ldr	r3, [pc, #144]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 0207 	bic.w	r2, r3, #7
 8004e8e:	4922      	ldr	r1, [pc, #136]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b20      	ldr	r3, [pc, #128]	; (8004f18 <HAL_RCC_ClockConfig+0x1c0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e032      	b.n	8004f0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eb4:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4916      	ldr	r1, [pc, #88]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	490e      	ldr	r1, [pc, #56]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ee6:	f000 f821 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004eea:	4602      	mov	r2, r0
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <HAL_RCC_ClockConfig+0x1c4>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	490a      	ldr	r1, [pc, #40]	; (8004f20 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	5ccb      	ldrb	r3, [r1, r3]
 8004efa:	fa22 f303 	lsr.w	r3, r2, r3
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1cc>)
 8004f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_RCC_ClockConfig+0x1d0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd fade 	bl	80024c8 <HAL_InitTick>

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	08006064 	.word	0x08006064
 8004f24:	20000010 	.word	0x20000010
 8004f28:	20000014 	.word	0x20000014

08004f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b490      	push	{r4, r7}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f34:	1d3c      	adds	r4, r7, #4
 8004f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f3c:	f240 2301 	movw	r3, #513	; 0x201
 8004f40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f56:	4b22      	ldr	r3, [pc, #136]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x40>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x46>
 8004f6a:	e02d      	b.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f6e:	623b      	str	r3, [r7, #32]
      break;
 8004f70:	e02d      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	0c9b      	lsrs	r3, r3, #18
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f7e:	4413      	add	r3, r2
 8004f80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d013      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0c5b      	lsrs	r3, r3, #17
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fa4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004faa:	fb02 f203 	mul.w	r2, r2, r3
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb6:	e004      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4a0b      	ldr	r2, [pc, #44]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	623b      	str	r3, [r7, #32]
      break;
 8004fc6:	e002      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fca:	623b      	str	r3, [r7, #32]
      break;
 8004fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fce:	6a3b      	ldr	r3, [r7, #32]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3728      	adds	r7, #40	; 0x28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc90      	pop	{r4, r7}
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	080052f8 	.word	0x080052f8
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	007a1200 	.word	0x007a1200
 8004fe8:	003d0900 	.word	0x003d0900

08004fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff0:	4b02      	ldr	r3, [pc, #8]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	20000010 	.word	0x20000010

08005000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005004:	f7ff fff2 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005008:	4602      	mov	r2, r0
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	4903      	ldr	r1, [pc, #12]	; (8005024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005016:	5ccb      	ldrb	r3, [r1, r3]
 8005018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	08006074 	.word	0x08006074

08005028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <RCC_Delay+0x34>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <RCC_Delay+0x38>)
 8005036:	fba2 2303 	umull	r2, r3, r2, r3
 800503a:	0a5b      	lsrs	r3, r3, #9
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005044:	bf00      	nop
  }
  while (Delay --);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	60fa      	str	r2, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f9      	bne.n	8005044 <RCC_Delay+0x1c>
}
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	20000010 	.word	0x20000010
 8005060:	10624dd3 	.word	0x10624dd3

08005064 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d07d      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005084:	4b4f      	ldr	r3, [pc, #316]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10d      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005090:	4b4c      	ldr	r3, [pc, #304]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509a:	61d3      	str	r3, [r2, #28]
 800509c:	4b49      	ldr	r3, [pc, #292]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d118      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050b8:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a42      	ldr	r2, [pc, #264]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050c4:	f7fd fa42 	bl	800254c <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ca:	e008      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fd fa3e 	bl	800254c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	; 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e06d      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b3a      	ldr	r3, [pc, #232]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02e      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	429a      	cmp	r2, r3
 8005106:	d027      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005112:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005114:	2201      	movs	r2, #1
 8005116:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005118:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800511e:	4a29      	ldr	r2, [pc, #164]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d014      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800512e:	f7fd fa0d 	bl	800254c <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e00a      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd fa09 	bl	800254c <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e036      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ee      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	4917      	ldr	r1, [pc, #92]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005166:	4313      	orrs	r3, r2
 8005168:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800516a:	7dfb      	ldrb	r3, [r7, #23]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800517a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	490b      	ldr	r1, [pc, #44]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40007000 	.word	0x40007000
 80051cc:	42420440 	.word	0x42420440

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	2600      	movs	r6, #0
 80051d4:	4d0c      	ldr	r5, [pc, #48]	; (8005208 <__libc_init_array+0x38>)
 80051d6:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d8:	1b64      	subs	r4, r4, r5
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	f000 f87e 	bl	80052e0 <_init>
 80051e4:	2600      	movs	r6, #0
 80051e6:	4d0a      	ldr	r5, [pc, #40]	; (8005210 <__libc_init_array+0x40>)
 80051e8:	4c0a      	ldr	r4, [pc, #40]	; (8005214 <__libc_init_array+0x44>)
 80051ea:	1b64      	subs	r4, r4, r5
 80051ec:	10a4      	asrs	r4, r4, #2
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	080060a4 	.word	0x080060a4
 800520c:	080060a4 	.word	0x080060a4
 8005210:	080060a4 	.word	0x080060a4
 8005214:	080060a8 	.word	0x080060a8

08005218 <__itoa>:
 8005218:	1e93      	subs	r3, r2, #2
 800521a:	2b22      	cmp	r3, #34	; 0x22
 800521c:	b510      	push	{r4, lr}
 800521e:	460c      	mov	r4, r1
 8005220:	d904      	bls.n	800522c <__itoa+0x14>
 8005222:	2300      	movs	r3, #0
 8005224:	461c      	mov	r4, r3
 8005226:	700b      	strb	r3, [r1, #0]
 8005228:	4620      	mov	r0, r4
 800522a:	bd10      	pop	{r4, pc}
 800522c:	2a0a      	cmp	r2, #10
 800522e:	d109      	bne.n	8005244 <__itoa+0x2c>
 8005230:	2800      	cmp	r0, #0
 8005232:	da07      	bge.n	8005244 <__itoa+0x2c>
 8005234:	232d      	movs	r3, #45	; 0x2d
 8005236:	700b      	strb	r3, [r1, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	4240      	negs	r0, r0
 800523c:	4421      	add	r1, r4
 800523e:	f000 f80d 	bl	800525c <__utoa>
 8005242:	e7f1      	b.n	8005228 <__itoa+0x10>
 8005244:	2100      	movs	r1, #0
 8005246:	e7f9      	b.n	800523c <__itoa+0x24>

08005248 <itoa>:
 8005248:	f7ff bfe6 	b.w	8005218 <__itoa>

0800524c <memset>:
 800524c:	4603      	mov	r3, r0
 800524e:	4402      	add	r2, r0
 8005250:	4293      	cmp	r3, r2
 8005252:	d100      	bne.n	8005256 <memset+0xa>
 8005254:	4770      	bx	lr
 8005256:	f803 1b01 	strb.w	r1, [r3], #1
 800525a:	e7f9      	b.n	8005250 <memset+0x4>

0800525c <__utoa>:
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525e:	b08b      	sub	sp, #44	; 0x2c
 8005260:	4605      	mov	r5, r0
 8005262:	460b      	mov	r3, r1
 8005264:	466e      	mov	r6, sp
 8005266:	4c1d      	ldr	r4, [pc, #116]	; (80052dc <__utoa+0x80>)
 8005268:	f104 0c20 	add.w	ip, r4, #32
 800526c:	4637      	mov	r7, r6
 800526e:	6820      	ldr	r0, [r4, #0]
 8005270:	6861      	ldr	r1, [r4, #4]
 8005272:	3408      	adds	r4, #8
 8005274:	c703      	stmia	r7!, {r0, r1}
 8005276:	4564      	cmp	r4, ip
 8005278:	463e      	mov	r6, r7
 800527a:	d1f7      	bne.n	800526c <__utoa+0x10>
 800527c:	7921      	ldrb	r1, [r4, #4]
 800527e:	6820      	ldr	r0, [r4, #0]
 8005280:	7139      	strb	r1, [r7, #4]
 8005282:	1e91      	subs	r1, r2, #2
 8005284:	2922      	cmp	r1, #34	; 0x22
 8005286:	6038      	str	r0, [r7, #0]
 8005288:	f04f 0100 	mov.w	r1, #0
 800528c:	d904      	bls.n	8005298 <__utoa+0x3c>
 800528e:	7019      	strb	r1, [r3, #0]
 8005290:	460b      	mov	r3, r1
 8005292:	4618      	mov	r0, r3
 8005294:	b00b      	add	sp, #44	; 0x2c
 8005296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005298:	1e58      	subs	r0, r3, #1
 800529a:	4684      	mov	ip, r0
 800529c:	fbb5 f7f2 	udiv	r7, r5, r2
 80052a0:	fb02 5617 	mls	r6, r2, r7, r5
 80052a4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80052a8:	4476      	add	r6, lr
 80052aa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80052ae:	460c      	mov	r4, r1
 80052b0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80052b4:	462e      	mov	r6, r5
 80052b6:	42b2      	cmp	r2, r6
 80052b8:	463d      	mov	r5, r7
 80052ba:	f101 0101 	add.w	r1, r1, #1
 80052be:	d9ed      	bls.n	800529c <__utoa+0x40>
 80052c0:	2200      	movs	r2, #0
 80052c2:	545a      	strb	r2, [r3, r1]
 80052c4:	1919      	adds	r1, r3, r4
 80052c6:	1aa5      	subs	r5, r4, r2
 80052c8:	42aa      	cmp	r2, r5
 80052ca:	dae2      	bge.n	8005292 <__utoa+0x36>
 80052cc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80052d0:	780e      	ldrb	r6, [r1, #0]
 80052d2:	3201      	adds	r2, #1
 80052d4:	7006      	strb	r6, [r0, #0]
 80052d6:	f801 5901 	strb.w	r5, [r1], #-1
 80052da:	e7f4      	b.n	80052c6 <__utoa+0x6a>
 80052dc:	0800607c 	.word	0x0800607c

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
