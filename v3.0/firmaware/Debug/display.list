
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de0  08007de0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08007de0  08007de0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007de0  08007de0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  20000084  08007e6c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  08007e6c  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107be  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002420  00000000  00000000  0003086b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00033be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186c7  00000000  00000000  00034a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011842  00000000  00000000  0004d127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9ca  00000000  00000000  0005e969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee333  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  000ee388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fd0 	.word	0x08006fd0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006fd0 	.word	0x08006fd0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <error>:
uint16_t ventilatorper = 0;  //výkon ventilátoru v %
uint8_t ventilatorhyst = 0;	//hystereze ventilatoru

//error
void error(uint8_t event)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	482e      	ldr	r0, [pc, #184]	; (800117c <error+0xcc>)
 80010c2:	f003 fb66 	bl	8004792 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	482b      	ldr	r0, [pc, #172]	; (800117c <error+0xcc>)
 80010ce:	f003 fb60 	bl	8004792 <HAL_GPIO_WritePin>
	SSD1306_Clear();
 80010d2:	f001 ff8d 	bl	8002ff0 <SSD1306_Clear>
	SSD1306_GotoXY (3,3);
 80010d6:	2103      	movs	r1, #3
 80010d8:	2003      	movs	r0, #3
 80010da:	f001 fdd3 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts("error:", &Font_11x18, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	4927      	ldr	r1, [pc, #156]	; (8001180 <error+0xd0>)
 80010e2:	4828      	ldr	r0, [pc, #160]	; (8001184 <error+0xd4>)
 80010e4:	f001 fe64 	bl	8002db0 <SSD1306_Puts>
	switch (event) {
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <error+0x44>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d020      	beq.n	8001134 <error+0x84>
			{
				HAL_Delay(1);
			}
			break;
		default:
			break;
 80010f2:	e03f      	b.n	8001174 <error+0xc4>
			SSD1306_GotoXY (3,25);
 80010f4:	2119      	movs	r1, #25
 80010f6:	2003      	movs	r0, #3
 80010f8:	f001 fdc4 	bl	8002c84 <SSD1306_GotoXY>
			SSD1306_Puts("mereni tep.", &Font_11x18, 1);
 80010fc:	2201      	movs	r2, #1
 80010fe:	4920      	ldr	r1, [pc, #128]	; (8001180 <error+0xd0>)
 8001100:	4821      	ldr	r0, [pc, #132]	; (8001188 <error+0xd8>)
 8001102:	f001 fe55 	bl	8002db0 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 8001106:	212d      	movs	r1, #45	; 0x2d
 8001108:	2003      	movs	r0, #3
 800110a:	f001 fdbb 	bl	8002c84 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 800110e:	2201      	movs	r2, #1
 8001110:	491b      	ldr	r1, [pc, #108]	; (8001180 <error+0xd0>)
 8001112:	481e      	ldr	r0, [pc, #120]	; (800118c <error+0xdc>)
 8001114:	f001 fe4c 	bl	8002db0 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001118:	f001 fd10 	bl	8002b3c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 800111c:	e002      	b.n	8001124 <error+0x74>
				HAL_Delay(1);
 800111e:	2001      	movs	r0, #1
 8001120:	f002 fa3a 	bl	8003598 <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 8001124:	2110      	movs	r1, #16
 8001126:	4815      	ldr	r0, [pc, #84]	; (800117c <error+0xcc>)
 8001128:	f003 fb1c 	bl	8004764 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f5      	bne.n	800111e <error+0x6e>
			break;
 8001132:	e01f      	b.n	8001174 <error+0xc4>
			SSD1306_GotoXY (3,25);
 8001134:	2119      	movs	r1, #25
 8001136:	2003      	movs	r0, #3
 8001138:	f001 fda4 	bl	8002c84 <SSD1306_GotoXY>
			SSD1306_Puts("prehrati", &Font_11x18, 1);
 800113c:	2201      	movs	r2, #1
 800113e:	4910      	ldr	r1, [pc, #64]	; (8001180 <error+0xd0>)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <error+0xe0>)
 8001142:	f001 fe35 	bl	8002db0 <SSD1306_Puts>
			SSD1306_GotoXY (3,45);
 8001146:	212d      	movs	r1, #45	; 0x2d
 8001148:	2003      	movs	r0, #3
 800114a:	f001 fd9b 	bl	8002c84 <SSD1306_GotoXY>
			SSD1306_Puts("OK=>reset", &Font_11x18, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	490b      	ldr	r1, [pc, #44]	; (8001180 <error+0xd0>)
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <error+0xdc>)
 8001154:	f001 fe2c 	bl	8002db0 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001158:	f001 fcf0 	bl	8002b3c <SSD1306_UpdateScreen>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 800115c:	e002      	b.n	8001164 <error+0xb4>
				HAL_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f002 fa1a 	bl	8003598 <HAL_Delay>
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) != 0)
 8001164:	2110      	movs	r1, #16
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <error+0xcc>)
 8001168:	f003 fafc 	bl	8004764 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f5      	bne.n	800115e <error+0xae>
			break;
 8001172:	bf00      	nop
	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40010800 	.word	0x40010800
 8001180:	20000000 	.word	0x20000000
 8001184:	08006fe8 	.word	0x08006fe8
 8001188:	08006ff0 	.word	0x08006ff0
 800118c:	08006ffc 	.word	0x08006ffc
 8001190:	08007008 	.word	0x08007008

08001194 <readbuttons>:


//vstupy

void readbuttons()	//pulling tlačítek
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	if(debounce[0] == 0)
 8001198:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <readbuttons+0x1fc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d13c      	bne.n	800121a <readbuttons+0x86>
	{
	  tlacitko[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80011a0:	2110      	movs	r1, #16
 80011a2:	487c      	ldr	r0, [pc, #496]	; (8001394 <readbuttons+0x200>)
 80011a4:	f003 fade 	bl	8004764 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <readbuttons+0x204>)
 80011ae:	701a      	strb	r2, [r3, #0]
	  if(tlacitko[0] != poslednistav[0])
 80011b0:	4b79      	ldr	r3, [pc, #484]	; (8001398 <readbuttons+0x204>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	4b79      	ldr	r3, [pc, #484]	; (800139c <readbuttons+0x208>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d02e      	beq.n	800121a <readbuttons+0x86>
	  {
		  poslednistav[0] = tlacitko[0];
 80011bc:	4b76      	ldr	r3, [pc, #472]	; (8001398 <readbuttons+0x204>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b76      	ldr	r3, [pc, #472]	; (800139c <readbuttons+0x208>)
 80011c2:	701a      	strb	r2, [r3, #0]
		  if(tlacitko[0] == 0)
 80011c4:	4b74      	ldr	r3, [pc, #464]	; (8001398 <readbuttons+0x204>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d126      	bne.n	800121a <readbuttons+0x86>
		  {
			setmodeflag = 500;
 80011cc:	4b74      	ldr	r3, [pc, #464]	; (80013a0 <readbuttons+0x20c>)
 80011ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011d2:	801a      	strh	r2, [r3, #0]
			debounce[0] = 10;
 80011d4:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <readbuttons+0x1fc>)
 80011d6:	220a      	movs	r2, #10
 80011d8:	701a      	strb	r2, [r3, #0]
			if(cursor == 0)
 80011da:	4b72      	ldr	r3, [pc, #456]	; (80013a4 <readbuttons+0x210>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <readbuttons+0x56>
			{
				  cursor = 0x04;
 80011e2:	4b70      	ldr	r3, [pc, #448]	; (80013a4 <readbuttons+0x210>)
 80011e4:	2204      	movs	r2, #4
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	e017      	b.n	800121a <readbuttons+0x86>
			}else{
			  if(cursor>0x08)
 80011ea:	4b6e      	ldr	r3, [pc, #440]	; (80013a4 <readbuttons+0x210>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d905      	bls.n	80011fe <readbuttons+0x6a>
			  {
				  cursor = 0;
 80011f2:	4b6c      	ldr	r3, [pc, #432]	; (80013a4 <readbuttons+0x210>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
				  setmodeflag = 10;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <readbuttons+0x20c>)
 80011fa:	220a      	movs	r2, #10
 80011fc:	801a      	strh	r2, [r3, #0]
			  }
			  if((cursor>0)&&(cursor<0x10))
 80011fe:	4b69      	ldr	r3, [pc, #420]	; (80013a4 <readbuttons+0x210>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <readbuttons+0x86>
 8001206:	4b67      	ldr	r3, [pc, #412]	; (80013a4 <readbuttons+0x210>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d805      	bhi.n	800121a <readbuttons+0x86>
			  {
				  cursor = (cursor<<4);
 800120e:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <readbuttons+0x210>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <readbuttons+0x210>)
 8001218:	701a      	strb	r2, [r3, #0]
			  }
			}
		 }
	  }
	}
	if(debounce[1] == 0)
 800121a:	4b5d      	ldr	r3, [pc, #372]	; (8001390 <readbuttons+0x1fc>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d139      	bne.n	8001296 <readbuttons+0x102>
	{
	  tlacitko[1] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001222:	2120      	movs	r1, #32
 8001224:	485b      	ldr	r0, [pc, #364]	; (8001394 <readbuttons+0x200>)
 8001226:	f003 fa9d 	bl	8004764 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <readbuttons+0x204>)
 8001230:	705a      	strb	r2, [r3, #1]
	  if(tlacitko[1] != poslednistav[1])
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <readbuttons+0x204>)
 8001234:	785a      	ldrb	r2, [r3, #1]
 8001236:	4b59      	ldr	r3, [pc, #356]	; (800139c <readbuttons+0x208>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	429a      	cmp	r2, r3
 800123c:	d02b      	beq.n	8001296 <readbuttons+0x102>
	  {
		  poslednistav[1] = tlacitko[1];
 800123e:	4b56      	ldr	r3, [pc, #344]	; (8001398 <readbuttons+0x204>)
 8001240:	785a      	ldrb	r2, [r3, #1]
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <readbuttons+0x208>)
 8001244:	705a      	strb	r2, [r3, #1]
		  if(tlacitko[1] == 0)
 8001246:	4b54      	ldr	r3, [pc, #336]	; (8001398 <readbuttons+0x204>)
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d123      	bne.n	8001296 <readbuttons+0x102>
		  {
			  setmodeflag = 500;
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <readbuttons+0x20c>)
 8001250:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001254:	801a      	strh	r2, [r3, #0]
			  debounce[1] = 10;
 8001256:	4b4e      	ldr	r3, [pc, #312]	; (8001390 <readbuttons+0x1fc>)
 8001258:	220a      	movs	r2, #10
 800125a:	705a      	strb	r2, [r3, #1]
				if(cursor == 0)
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <readbuttons+0x210>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <readbuttons+0xd8>
				{
					  cursor = 0x04;
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <readbuttons+0x210>)
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e015      	b.n	8001298 <readbuttons+0x104>
				}
				else
				{
					switch (cursor) {
 800126c:	4b4d      	ldr	r3, [pc, #308]	; (80013a4 <readbuttons+0x210>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b08      	cmp	r3, #8
 8001272:	d005      	beq.n	8001280 <readbuttons+0xec>
 8001274:	2b80      	cmp	r3, #128	; 0x80
 8001276:	d107      	bne.n	8001288 <readbuttons+0xf4>
						case 0x80:
							cursor = 0x10;
 8001278:	4b4a      	ldr	r3, [pc, #296]	; (80013a4 <readbuttons+0x210>)
 800127a:	2210      	movs	r2, #16
 800127c:	701a      	strb	r2, [r3, #0]
							break;
 800127e:	e00b      	b.n	8001298 <readbuttons+0x104>
						case 0x08:
							cursor = 0x01;
 8001280:	4b48      	ldr	r3, [pc, #288]	; (80013a4 <readbuttons+0x210>)
 8001282:	2201      	movs	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
							break;
 8001286:	e007      	b.n	8001298 <readbuttons+0x104>
						default:
							cursor *= 2;
 8001288:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <readbuttons+0x210>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <readbuttons+0x210>)
 8001292:	701a      	strb	r2, [r3, #0]
							break;
 8001294:	e000      	b.n	8001298 <readbuttons+0x104>
					}
				}
 8001296:	bf00      	nop
		  }
	  }
	}
	if(debounce[2] == 0)
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <readbuttons+0x1fc>)
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d13a      	bne.n	8001316 <readbuttons+0x182>
	{
	  tlacitko[2] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	483c      	ldr	r0, [pc, #240]	; (8001394 <readbuttons+0x200>)
 80012a4:	f003 fa5e 	bl	8004764 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <readbuttons+0x204>)
 80012ae:	709a      	strb	r2, [r3, #2]
	  if(tlacitko[2] != poslednistav[2])
 80012b0:	4b39      	ldr	r3, [pc, #228]	; (8001398 <readbuttons+0x204>)
 80012b2:	789a      	ldrb	r2, [r3, #2]
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <readbuttons+0x208>)
 80012b6:	789b      	ldrb	r3, [r3, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d02c      	beq.n	8001316 <readbuttons+0x182>
	  {
		  poslednistav[2] = tlacitko[2];
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <readbuttons+0x204>)
 80012be:	789a      	ldrb	r2, [r3, #2]
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <readbuttons+0x208>)
 80012c2:	709a      	strb	r2, [r3, #2]
		  if(tlacitko[2] == 0)
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <readbuttons+0x204>)
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d124      	bne.n	8001316 <readbuttons+0x182>
		  {
			setmodeflag = 500;
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <readbuttons+0x20c>)
 80012ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012d2:	801a      	strh	r2, [r3, #0]
			debounce[2] = 10;
 80012d4:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <readbuttons+0x1fc>)
 80012d6:	220a      	movs	r2, #10
 80012d8:	709a      	strb	r2, [r3, #2]
			if(cursor == 0)
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <readbuttons+0x210>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <readbuttons+0x156>
			{
				  cursor = 0x04;
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <readbuttons+0x210>)
 80012e4:	2204      	movs	r2, #4
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e016      	b.n	8001318 <readbuttons+0x184>
			}
			else
			{
				switch (cursor) {
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <readbuttons+0x210>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <readbuttons+0x164>
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d004      	beq.n	8001300 <readbuttons+0x16c>
 80012f6:	e007      	b.n	8001308 <readbuttons+0x174>
					case 0x01:
						cursor = 0x08;
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <readbuttons+0x210>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	701a      	strb	r2, [r3, #0]
						break;
 80012fe:	e00b      	b.n	8001318 <readbuttons+0x184>
					case 0x10:
						cursor = 0x80;
 8001300:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <readbuttons+0x210>)
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	701a      	strb	r2, [r3, #0]
						break;
 8001306:	e007      	b.n	8001318 <readbuttons+0x184>
					default:
						cursor = cursor>>1;
 8001308:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <readbuttons+0x210>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <readbuttons+0x210>)
 8001312:	701a      	strb	r2, [r3, #0]
						break;
 8001314:	e000      	b.n	8001318 <readbuttons+0x184>
				}

			}
 8001316:	bf00      	nop
		  }
	  }
	}
	if(debounce[3] == 0)
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <readbuttons+0x1fc>)
 800131a:	78db      	ldrb	r3, [r3, #3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d134      	bne.n	800138a <readbuttons+0x1f6>
	{
	  tlacitko[3] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	481c      	ldr	r0, [pc, #112]	; (8001394 <readbuttons+0x200>)
 8001324:	f003 fa1e 	bl	8004764 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <readbuttons+0x204>)
 800132e:	70da      	strb	r2, [r3, #3]
	  if(tlacitko[3] != poslednistav[3])
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <readbuttons+0x204>)
 8001332:	78da      	ldrb	r2, [r3, #3]
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <readbuttons+0x208>)
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	429a      	cmp	r2, r3
 800133a:	d026      	beq.n	800138a <readbuttons+0x1f6>
	  {
		  poslednistav[3] = tlacitko[3];
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <readbuttons+0x204>)
 800133e:	78da      	ldrb	r2, [r3, #3]
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <readbuttons+0x208>)
 8001342:	70da      	strb	r2, [r3, #3]
		  if(tlacitko[3] == 0)
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <readbuttons+0x204>)
 8001346:	78db      	ldrb	r3, [r3, #3]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11e      	bne.n	800138a <readbuttons+0x1f6>
		  {
			  if((setmodeflag > 0)||(menupage>0))
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <readbuttons+0x20c>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <readbuttons+0x1c8>
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <readbuttons+0x214>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <readbuttons+0x1d4>
			  {
				  menupage++;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <readbuttons+0x214>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <readbuttons+0x214>)
 8001366:	701a      	strb	r2, [r3, #0]
			  }
			  setmodeflag = 500;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <readbuttons+0x20c>)
 800136a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800136e:	801a      	strh	r2, [r3, #0]
			  debounce[3] = 10;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <readbuttons+0x1fc>)
 8001372:	220a      	movs	r2, #10
 8001374:	70da      	strb	r2, [r3, #3]
			  if(menupage>1)
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <readbuttons+0x214>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d905      	bls.n	800138a <readbuttons+0x1f6>
			  {
				  menupage = 0;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <readbuttons+0x214>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
				  setmodeflag = 10;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <readbuttons+0x20c>)
 8001386:	220a      	movs	r2, #10
 8001388:	801a      	strh	r2, [r3, #0]
			  }
		  }
	  }
	}

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000578 	.word	0x20000578
 8001394:	40010800 	.word	0x40010800
 8001398:	200004cc 	.word	0x200004cc
 800139c:	20000604 	.word	0x20000604
 80013a0:	200000ac 	.word	0x200000ac
 80013a4:	200000ae 	.word	0x200000ae
 80013a8:	200000af 	.word	0x200000af

080013ac <trimm>:

//pomocné převodní funkce

char* trimm(float f)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	static char trimmed [4];

	f *= 100;
 80013b4:	4929      	ldr	r1, [pc, #164]	; (800145c <trimm+0xb0>)
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fc94 	bl	8000ce4 <__aeabi_fmul>
 80013bc:	4603      	mov	r3, r0
 80013be:	607b      	str	r3, [r7, #4]
	uint16_t g = f;
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fe55 	bl	8001070 <__aeabi_f2uiz>
 80013c6:	4603      	mov	r3, r0
 80013c8:	81bb      	strh	r3, [r7, #12]
	itoa(g, trimmed, 10);
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	220a      	movs	r2, #10
 80013ce:	4924      	ldr	r1, [pc, #144]	; (8001460 <trimm+0xb4>)
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 fbbf 	bl	8006b54 <itoa>

	if(g<10)
 80013d6:	89bb      	ldrh	r3, [r7, #12]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d80c      	bhi.n	80013f6 <trimm+0x4a>
	{
		trimmed[3] = trimmed[0];
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <trimm+0xb4>)
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <trimm+0xb4>)
 80013e2:	70da      	strb	r2, [r3, #3]
		trimmed[2] = '0';
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <trimm+0xb4>)
 80013e6:	2230      	movs	r2, #48	; 0x30
 80013e8:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <trimm+0xb4>)
 80013ec:	2230      	movs	r2, #48	; 0x30
 80013ee:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <trimm+0xb4>)
 80013f2:	2220      	movs	r2, #32
 80013f4:	701a      	strb	r2, [r3, #0]


	}
	if((g<100)&&(g>9))
 80013f6:	89bb      	ldrh	r3, [r7, #12]
 80013f8:	2b63      	cmp	r3, #99	; 0x63
 80013fa:	d810      	bhi.n	800141e <trimm+0x72>
 80013fc:	89bb      	ldrh	r3, [r7, #12]
 80013fe:	2b09      	cmp	r3, #9
 8001400:	d90d      	bls.n	800141e <trimm+0x72>
	{
		trimmed[3] = trimmed[1];
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <trimm+0xb4>)
 8001404:	785a      	ldrb	r2, [r3, #1]
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <trimm+0xb4>)
 8001408:	70da      	strb	r2, [r3, #3]
		trimmed[2] = trimmed[0];
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <trimm+0xb4>)
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <trimm+0xb4>)
 8001410:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <trimm+0xb4>)
 8001414:	2230      	movs	r2, #48	; 0x30
 8001416:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <trimm+0xb4>)
 800141a:	2220      	movs	r2, #32
 800141c:	701a      	strb	r2, [r3, #0]

	}
	if((g<1000)&&(g>99))
 800141e:	89bb      	ldrh	r3, [r7, #12]
 8001420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001424:	d215      	bcs.n	8001452 <trimm+0xa6>
 8001426:	89bb      	ldrh	r3, [r7, #12]
 8001428:	2b63      	cmp	r3, #99	; 0x63
 800142a:	d912      	bls.n	8001452 <trimm+0xa6>
	{
		for(uint8_t i = 3; i>0; i--)
 800142c:	2303      	movs	r3, #3
 800142e:	73fb      	strb	r3, [r7, #15]
 8001430:	e009      	b.n	8001446 <trimm+0x9a>
		{
			trimmed[i] = trimmed[i-1];
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	1e5a      	subs	r2, r3, #1
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	4909      	ldr	r1, [pc, #36]	; (8001460 <trimm+0xb4>)
 800143a:	5c89      	ldrb	r1, [r1, r2]
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <trimm+0xb4>)
 800143e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 3; i>0; i--)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3b01      	subs	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f2      	bne.n	8001432 <trimm+0x86>
		}
		trimmed[0] = ' ';
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <trimm+0xb4>)
 800144e:	2220      	movs	r2, #32
 8001450:	701a      	strb	r2, [r3, #0]

	}

	return trimmed;
 8001452:	4b03      	ldr	r3, [pc, #12]	; (8001460 <trimm+0xb4>)
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	42c80000 	.word	0x42c80000
 8001460:	200000c0 	.word	0x200000c0

08001464 <ADCtoVoltage>:
float ADCtoVoltage(uint16_t ADCvalue)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
	float voltage = 0;
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
	voltage = ((ADCvalue*Uadc)/4095) + offset;
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fbe0 	bl	8000c3c <__aeabi_i2f>
 800147c:	4602      	mov	r2, r0
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <ADCtoVoltage+0x50>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4610      	mov	r0, r2
 8001486:	f7ff fc2d 	bl	8000ce4 <__aeabi_fmul>
 800148a:	4603      	mov	r3, r0
 800148c:	490a      	ldr	r1, [pc, #40]	; (80014b8 <ADCtoVoltage+0x54>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fcdc 	bl	8000e4c <__aeabi_fdiv>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <ADCtoVoltage+0x58>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff fb18 	bl	8000ad4 <__addsf3>
 80014a4:	4603      	mov	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]
	return voltage;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	457ff000 	.word	0x457ff000
 80014bc:	200000b8 	.word	0x200000b8

080014c0 <Voltagetoteperatur>:
float Voltagetoteperatur(float napeti)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	  napeti = (Uadc/ napeti)-1;
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <Voltagetoteperatur+0xb8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fcbc 	bl	8000e4c <__aeabi_fdiv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff faf8 	bl	8000ad0 <__aeabi_fsub>
 80014e0:	4603      	mov	r3, r0
 80014e2:	607b      	str	r3, [r7, #4]
	  napeti = 1/(((log(napeti))/3380)+(1/298.5));
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7fe ff97 	bl	8000418 <__aeabi_f2d>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f005 fb7b 	bl	8006bec <log>
 80014f6:	a31a      	add	r3, pc, #104	; (adr r3, 8001560 <Voltagetoteperatur+0xa0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f90e 	bl	800071c <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	a317      	add	r3, pc, #92	; (adr r3, 8001568 <Voltagetoteperatur+0xa8>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7fe fe25 	bl	800015c <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	4918      	ldr	r1, [pc, #96]	; (800157c <Voltagetoteperatur+0xbc>)
 800151c:	f7ff f8fe 	bl	800071c <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fa7e 	bl	8000a28 <__aeabi_d2f>
 800152c:	4603      	mov	r3, r0
 800152e:	607b      	str	r3, [r7, #4]
	  napeti = napeti - 273.15; // K => C
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7fe ff71 	bl	8000418 <__aeabi_f2d>
 8001536:	a30e      	add	r3, pc, #56	; (adr r3, 8001570 <Voltagetoteperatur+0xb0>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe fe0c 	bl	8000158 <__aeabi_dsub>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fa6e 	bl	8000a28 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	607b      	str	r3, [r7, #4]
	  return napeti;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	f3af 8000 	nop.w
 8001560:	00000000 	.word	0x00000000
 8001564:	40aa6800 	.word	0x40aa6800
 8001568:	84ee6b34 	.word	0x84ee6b34
 800156c:	3f6b71a2 	.word	0x3f6b71a2
 8001570:	66666666 	.word	0x66666666
 8001574:	40711266 	.word	0x40711266
 8001578:	2000000c 	.word	0x2000000c
 800157c:	3ff00000 	.word	0x3ff00000

08001580 <drawlogoC>:


//funkce vykreslování displaje

void drawlogoC (uint8_t x, uint8_t y){
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af02      	add	r7, sp, #8
 8001586:	4603      	mov	r3, r0
 8001588:	460a      	mov	r2, r1
 800158a:	71fb      	strb	r3, [r7, #7]
 800158c:	4613      	mov	r3, r2
 800158e:	71bb      	strb	r3, [r7, #6]
	  SSD1306_DrawLine((5+x), (y+5), (5+x), (y+11), 1);
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	b29b      	uxth	r3, r3
 8001594:	3305      	adds	r3, #5
 8001596:	b298      	uxth	r0, r3
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	b29b      	uxth	r3, r3
 800159c:	3305      	adds	r3, #5
 800159e:	b299      	uxth	r1, r3
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3305      	adds	r3, #5
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	330b      	adds	r3, #11
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2401      	movs	r4, #1
 80015b2:	9400      	str	r4, [sp, #0]
 80015b4:	f001 fc21 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((6+x), (y+3), (6+x), (y+13), 1);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3306      	adds	r3, #6
 80015be:	b298      	uxth	r0, r3
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3303      	adds	r3, #3
 80015c6:	b299      	uxth	r1, r3
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	3306      	adds	r3, #6
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	330d      	adds	r3, #13
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2401      	movs	r4, #1
 80015da:	9400      	str	r4, [sp, #0]
 80015dc:	f001 fc0d 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+3), (7+x), (y+5), 1);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3307      	adds	r3, #7
 80015e6:	b298      	uxth	r0, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3303      	adds	r3, #3
 80015ee:	b299      	uxth	r1, r3
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	3307      	adds	r3, #7
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	3305      	adds	r3, #5
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2401      	movs	r4, #1
 8001602:	9400      	str	r4, [sp, #0]
 8001604:	f001 fbf9 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+11), (7+x), (y+13), 1);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3307      	adds	r3, #7
 800160e:	b298      	uxth	r0, r3
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	b29b      	uxth	r3, r3
 8001614:	330b      	adds	r3, #11
 8001616:	b299      	uxth	r1, r3
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3307      	adds	r3, #7
 800161e:	b29a      	uxth	r2, r3
 8001620:	79bb      	ldrb	r3, [r7, #6]
 8001622:	b29b      	uxth	r3, r3
 8001624:	330d      	adds	r3, #13
 8001626:	b29b      	uxth	r3, r3
 8001628:	2401      	movs	r4, #1
 800162a:	9400      	str	r4, [sp, #0]
 800162c:	f001 fbe5 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+14), (10+x), (y+14), 1);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	b29b      	uxth	r3, r3
 8001634:	3308      	adds	r3, #8
 8001636:	b298      	uxth	r0, r3
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	b29b      	uxth	r3, r3
 800163c:	330e      	adds	r3, #14
 800163e:	b299      	uxth	r1, r3
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	b29b      	uxth	r3, r3
 8001644:	330a      	adds	r3, #10
 8001646:	b29a      	uxth	r2, r3
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	b29b      	uxth	r3, r3
 800164c:	330e      	adds	r3, #14
 800164e:	b29b      	uxth	r3, r3
 8001650:	2401      	movs	r4, #1
 8001652:	9400      	str	r4, [sp, #0]
 8001654:	f001 fbd1 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+13), (10+x), (y+13), 1);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	b29b      	uxth	r3, r3
 800165c:	3308      	adds	r3, #8
 800165e:	b298      	uxth	r0, r3
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	b29b      	uxth	r3, r3
 8001664:	330d      	adds	r3, #13
 8001666:	b299      	uxth	r1, r3
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	b29b      	uxth	r3, r3
 800166c:	330a      	adds	r3, #10
 800166e:	b29a      	uxth	r2, r3
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	b29b      	uxth	r3, r3
 8001674:	330d      	adds	r3, #13
 8001676:	b29b      	uxth	r3, r3
 8001678:	2401      	movs	r4, #1
 800167a:	9400      	str	r4, [sp, #0]
 800167c:	f001 fbbd 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+2), (10+x), (y+2), 1);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	b29b      	uxth	r3, r3
 8001684:	3308      	adds	r3, #8
 8001686:	b298      	uxth	r0, r3
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	b29b      	uxth	r3, r3
 800168c:	3302      	adds	r3, #2
 800168e:	b299      	uxth	r1, r3
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b29b      	uxth	r3, r3
 8001694:	330a      	adds	r3, #10
 8001696:	b29a      	uxth	r2, r3
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	b29b      	uxth	r3, r3
 800169c:	3302      	adds	r3, #2
 800169e:	b29b      	uxth	r3, r3
 80016a0:	2401      	movs	r4, #1
 80016a2:	9400      	str	r4, [sp, #0]
 80016a4:	f001 fba9 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+3), (10+x), (y+3), 1);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3308      	adds	r3, #8
 80016ae:	b298      	uxth	r0, r3
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3303      	adds	r3, #3
 80016b6:	b299      	uxth	r1, r3
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	330a      	adds	r3, #10
 80016be:	b29a      	uxth	r2, r3
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3303      	adds	r3, #3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2401      	movs	r4, #1
 80016ca:	9400      	str	r4, [sp, #0]
 80016cc:	f001 fb95 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+3), (11+x), (y+4), 1);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	330b      	adds	r3, #11
 80016d6:	b298      	uxth	r0, r3
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3303      	adds	r3, #3
 80016de:	b299      	uxth	r1, r3
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	330b      	adds	r3, #11
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3304      	adds	r3, #4
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	2401      	movs	r4, #1
 80016f2:	9400      	str	r4, [sp, #0]
 80016f4:	f001 fb81 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+13), (11+x), (y+12), 1);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	330b      	adds	r3, #11
 80016fe:	b298      	uxth	r0, r3
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	b29b      	uxth	r3, r3
 8001704:	330d      	adds	r3, #13
 8001706:	b299      	uxth	r1, r3
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	b29b      	uxth	r3, r3
 800170c:	330b      	adds	r3, #11
 800170e:	b29a      	uxth	r2, r3
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	b29b      	uxth	r3, r3
 8001714:	330c      	adds	r3, #12
 8001716:	b29b      	uxth	r3, r3
 8001718:	2401      	movs	r4, #1
 800171a:	9400      	str	r4, [sp, #0]
 800171c:	f001 fb6d 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+4), (12+x), (y+6), 1);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	b29b      	uxth	r3, r3
 8001724:	330c      	adds	r3, #12
 8001726:	b298      	uxth	r0, r3
 8001728:	79bb      	ldrb	r3, [r7, #6]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3304      	adds	r3, #4
 800172e:	b299      	uxth	r1, r3
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	b29b      	uxth	r3, r3
 8001734:	330c      	adds	r3, #12
 8001736:	b29a      	uxth	r2, r3
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	b29b      	uxth	r3, r3
 800173c:	3306      	adds	r3, #6
 800173e:	b29b      	uxth	r3, r3
 8001740:	2401      	movs	r4, #1
 8001742:	9400      	str	r4, [sp, #0]
 8001744:	f001 fb59 	bl	8002dfa <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+12), (12+x), (y+10), 1);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	b29b      	uxth	r3, r3
 800174c:	330c      	adds	r3, #12
 800174e:	b298      	uxth	r0, r3
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	b29b      	uxth	r3, r3
 8001754:	330c      	adds	r3, #12
 8001756:	b299      	uxth	r1, r3
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	b29b      	uxth	r3, r3
 800175c:	330c      	adds	r3, #12
 800175e:	b29a      	uxth	r2, r3
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	b29b      	uxth	r3, r3
 8001764:	330a      	adds	r3, #10
 8001766:	b29b      	uxth	r3, r3
 8001768:	2401      	movs	r4, #1
 800176a:	9400      	str	r4, [sp, #0]
 800176c:	f001 fb45 	bl	8002dfa <SSD1306_DrawLine>
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <drawmenu1>:
void drawmenu1(uint8_t cursorm1, uint8_t cvcc, float x, float y)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af02      	add	r7, sp, #8
 800177e:	60ba      	str	r2, [r7, #8]
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	460b      	mov	r3, r1
 8001788:	73bb      	strb	r3, [r7, #14]
	  SSD1306_Clear();
 800178a:	f001 fc31 	bl	8002ff0 <SSD1306_Clear>
	  cursorm1 = ~cursorm1;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	43db      	mvns	r3, r3
 8001792:	73fb      	strb	r3, [r7, #15]
	  char* mecha = trimm(y);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe09 	bl	80013ac <trimm>
 800179a:	61b8      	str	r0, [r7, #24]
	  SSD1306_GotoXY (26,3);
 800179c:	2103      	movs	r1, #3
 800179e:	201a      	movs	r0, #26
 80017a0:	f001 fa70 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[0], &Font_11x18, ((cursorm1 & 0x08)>>3));
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	7818      	ldrb	r0, [r3, #0]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	10db      	asrs	r3, r3, #3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	4953      	ldr	r1, [pc, #332]	; (8001904 <drawmenu1+0x18c>)
 80017b8:	f001 fa7a 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (37,3);
 80017bc:	2103      	movs	r1, #3
 80017be:	2025      	movs	r0, #37	; 0x25
 80017c0:	f001 fa60 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[1], &Font_11x18, ((cursorm1 & 0x04)>>2));
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	3301      	adds	r3, #1
 80017c8:	7818      	ldrb	r0, [r3, #0]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	109b      	asrs	r3, r3, #2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	494a      	ldr	r1, [pc, #296]	; (8001904 <drawmenu1+0x18c>)
 80017da:	f001 fa69 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (48,3);
 80017de:	2103      	movs	r1, #3
 80017e0:	2030      	movs	r0, #48	; 0x30
 80017e2:	f001 fa4f 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 80017e6:	2201      	movs	r2, #1
 80017e8:	4946      	ldr	r1, [pc, #280]	; (8001904 <drawmenu1+0x18c>)
 80017ea:	202c      	movs	r0, #44	; 0x2c
 80017ec:	f001 fa60 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (59,3);
 80017f0:	2103      	movs	r1, #3
 80017f2:	203b      	movs	r0, #59	; 0x3b
 80017f4:	f001 fa46 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[2], &Font_11x18, ((cursorm1 & 0x02)>>1));
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	3302      	adds	r3, #2
 80017fc:	7818      	ldrb	r0, [r3, #0]
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	105b      	asrs	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	493d      	ldr	r1, [pc, #244]	; (8001904 <drawmenu1+0x18c>)
 800180e:	f001 fa4f 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (70,3);
 8001812:	2103      	movs	r1, #3
 8001814:	2046      	movs	r0, #70	; 0x46
 8001816:	f001 fa35 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[3], &Font_11x18, (cursorm1 & 0x01));
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	3303      	adds	r3, #3
 800181e:	7818      	ldrb	r0, [r3, #0]
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	4936      	ldr	r1, [pc, #216]	; (8001904 <drawmenu1+0x18c>)
 800182c:	f001 fa40 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (107,3);
 8001830:	2103      	movs	r1, #3
 8001832:	206b      	movs	r0, #107	; 0x6b
 8001834:	f001 fa26 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc('V', &Font_11x18, 1);
 8001838:	2201      	movs	r2, #1
 800183a:	4932      	ldr	r1, [pc, #200]	; (8001904 <drawmenu1+0x18c>)
 800183c:	2056      	movs	r0, #86	; 0x56
 800183e:	f001 fa37 	bl	8002cb0 <SSD1306_Putc>
	  char* proud = trimm(x);
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f7ff fdb2 	bl	80013ac <trimm>
 8001848:	6178      	str	r0, [r7, #20]
	  SSD1306_GotoXY (26,25);
 800184a:	2119      	movs	r1, #25
 800184c:	201a      	movs	r0, #26
 800184e:	f001 fa19 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[0], &Font_11x18, ((cursorm1 & 0x80)>>7));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	7818      	ldrb	r0, [r3, #0]
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	09db      	lsrs	r3, r3, #7
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	4929      	ldr	r1, [pc, #164]	; (8001904 <drawmenu1+0x18c>)
 8001860:	f001 fa26 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (37,25);
 8001864:	2119      	movs	r1, #25
 8001866:	2025      	movs	r0, #37	; 0x25
 8001868:	f001 fa0c 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[1], &Font_11x18, ((cursorm1 & 0x40)>>6));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	7818      	ldrb	r0, [r3, #0]
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	119b      	asrs	r3, r3, #6
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	4920      	ldr	r1, [pc, #128]	; (8001904 <drawmenu1+0x18c>)
 8001882:	f001 fa15 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (48,25);
 8001886:	2119      	movs	r1, #25
 8001888:	2030      	movs	r0, #48	; 0x30
 800188a:	f001 f9fb 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	491c      	ldr	r1, [pc, #112]	; (8001904 <drawmenu1+0x18c>)
 8001892:	202c      	movs	r0, #44	; 0x2c
 8001894:	f001 fa0c 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (59,25);
 8001898:	2119      	movs	r1, #25
 800189a:	203b      	movs	r0, #59	; 0x3b
 800189c:	f001 f9f2 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[2], &Font_11x18, ((cursorm1 & 0x20)>>5));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3302      	adds	r3, #2
 80018a4:	7818      	ldrb	r0, [r3, #0]
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	115b      	asrs	r3, r3, #5
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4913      	ldr	r1, [pc, #76]	; (8001904 <drawmenu1+0x18c>)
 80018b6:	f001 f9fb 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (70,25);
 80018ba:	2119      	movs	r1, #25
 80018bc:	2046      	movs	r0, #70	; 0x46
 80018be:	f001 f9e1 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[3], &Font_11x18, ((cursorm1 & 0x10)>>4));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3303      	adds	r3, #3
 80018c6:	7818      	ldrb	r0, [r3, #0]
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	111b      	asrs	r3, r3, #4
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	490b      	ldr	r1, [pc, #44]	; (8001904 <drawmenu1+0x18c>)
 80018d8:	f001 f9ea 	bl	8002cb0 <SSD1306_Putc>
	  SSD1306_GotoXY (107,25);
 80018dc:	2119      	movs	r1, #25
 80018de:	206b      	movs	r0, #107	; 0x6b
 80018e0:	f001 f9d0 	bl	8002c84 <SSD1306_GotoXY>
	  SSD1306_Putc('A', &Font_11x18, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	4907      	ldr	r1, [pc, #28]	; (8001904 <drawmenu1+0x18c>)
 80018e8:	2041      	movs	r0, #65	; 0x41
 80018ea:	f001 f9e1 	bl	8002cb0 <SSD1306_Putc>
	  uint8_t xcvcc = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	77fb      	strb	r3, [r7, #31]
	  uint8_t ycvcc = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	77bb      	strb	r3, [r7, #30]
	  switch (cvcc) {
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d005      	beq.n	8001908 <drawmenu1+0x190>
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f000 80c5 	beq.w	8001a8c <drawmenu1+0x314>
			  ycvcc = 45;
			  drawlogoC(xcvcc, ycvcc);
			  drawlogoC((xcvcc+10), ycvcc);
			break;
		default:
			break;
 8001902:	e0d6      	b.n	8001ab2 <drawmenu1+0x33a>
 8001904:	20000000 	.word	0x20000000
			  xcvcc = 81;
 8001908:	2351      	movs	r3, #81	; 0x51
 800190a:	77fb      	strb	r3, [r7, #31]
			  ycvcc = 45;
 800190c:	232d      	movs	r3, #45	; 0x2d
 800190e:	77bb      	strb	r3, [r7, #30]
			  drawlogoC(92, ycvcc);
 8001910:	7fbb      	ldrb	r3, [r7, #30]
 8001912:	4619      	mov	r1, r3
 8001914:	205c      	movs	r0, #92	; 0x5c
 8001916:	f7ff fe33 	bl	8001580 <drawlogoC>
			  SSD1306_DrawLine((5+xcvcc), (ycvcc+2), (5+xcvcc), (ycvcc+6), 1);
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	b29b      	uxth	r3, r3
 800191e:	3305      	adds	r3, #5
 8001920:	b298      	uxth	r0, r3
 8001922:	7fbb      	ldrb	r3, [r7, #30]
 8001924:	b29b      	uxth	r3, r3
 8001926:	3302      	adds	r3, #2
 8001928:	b299      	uxth	r1, r3
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	b29b      	uxth	r3, r3
 800192e:	3305      	adds	r3, #5
 8001930:	b29a      	uxth	r2, r3
 8001932:	7fbb      	ldrb	r3, [r7, #30]
 8001934:	b29b      	uxth	r3, r3
 8001936:	3306      	adds	r3, #6
 8001938:	b29b      	uxth	r3, r3
 800193a:	2401      	movs	r4, #1
 800193c:	9400      	str	r4, [sp, #0]
 800193e:	f001 fa5c 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((13+xcvcc), (ycvcc+2), (13+xcvcc), (ycvcc+6), 1);
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	b29b      	uxth	r3, r3
 8001946:	330d      	adds	r3, #13
 8001948:	b298      	uxth	r0, r3
 800194a:	7fbb      	ldrb	r3, [r7, #30]
 800194c:	b29b      	uxth	r3, r3
 800194e:	3302      	adds	r3, #2
 8001950:	b299      	uxth	r1, r3
 8001952:	7ffb      	ldrb	r3, [r7, #31]
 8001954:	b29b      	uxth	r3, r3
 8001956:	330d      	adds	r3, #13
 8001958:	b29a      	uxth	r2, r3
 800195a:	7fbb      	ldrb	r3, [r7, #30]
 800195c:	b29b      	uxth	r3, r3
 800195e:	3306      	adds	r3, #6
 8001960:	b29b      	uxth	r3, r3
 8001962:	2401      	movs	r4, #1
 8001964:	9400      	str	r4, [sp, #0]
 8001966:	f001 fa48 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((6+xcvcc), (ycvcc+2), (6+xcvcc), (ycvcc+11), 1);
 800196a:	7ffb      	ldrb	r3, [r7, #31]
 800196c:	b29b      	uxth	r3, r3
 800196e:	3306      	adds	r3, #6
 8001970:	b298      	uxth	r0, r3
 8001972:	7fbb      	ldrb	r3, [r7, #30]
 8001974:	b29b      	uxth	r3, r3
 8001976:	3302      	adds	r3, #2
 8001978:	b299      	uxth	r1, r3
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	b29b      	uxth	r3, r3
 800197e:	3306      	adds	r3, #6
 8001980:	b29a      	uxth	r2, r3
 8001982:	7fbb      	ldrb	r3, [r7, #30]
 8001984:	b29b      	uxth	r3, r3
 8001986:	330b      	adds	r3, #11
 8001988:	b29b      	uxth	r3, r3
 800198a:	2401      	movs	r4, #1
 800198c:	9400      	str	r4, [sp, #0]
 800198e:	f001 fa34 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((12+xcvcc), (ycvcc+2), (12+xcvcc), (ycvcc+11), 1);
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	b29b      	uxth	r3, r3
 8001996:	330c      	adds	r3, #12
 8001998:	b298      	uxth	r0, r3
 800199a:	7fbb      	ldrb	r3, [r7, #30]
 800199c:	b29b      	uxth	r3, r3
 800199e:	3302      	adds	r3, #2
 80019a0:	b299      	uxth	r1, r3
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	330c      	adds	r3, #12
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	7fbb      	ldrb	r3, [r7, #30]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	330b      	adds	r3, #11
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	2401      	movs	r4, #1
 80019b4:	9400      	str	r4, [sp, #0]
 80019b6:	f001 fa20 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((7+xcvcc), (ycvcc+6), (7+xcvcc), (ycvcc+13), 1);
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3307      	adds	r3, #7
 80019c0:	b298      	uxth	r0, r3
 80019c2:	7fbb      	ldrb	r3, [r7, #30]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3306      	adds	r3, #6
 80019c8:	b299      	uxth	r1, r3
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3307      	adds	r3, #7
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	7fbb      	ldrb	r3, [r7, #30]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	330d      	adds	r3, #13
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2401      	movs	r4, #1
 80019dc:	9400      	str	r4, [sp, #0]
 80019de:	f001 fa0c 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((11+xcvcc), (ycvcc+6), (11+xcvcc), (ycvcc+13), 1);
 80019e2:	7ffb      	ldrb	r3, [r7, #31]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	330b      	adds	r3, #11
 80019e8:	b298      	uxth	r0, r3
 80019ea:	7fbb      	ldrb	r3, [r7, #30]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3306      	adds	r3, #6
 80019f0:	b299      	uxth	r1, r3
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	330b      	adds	r3, #11
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	7fbb      	ldrb	r3, [r7, #30]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	330d      	adds	r3, #13
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2401      	movs	r4, #1
 8001a04:	9400      	str	r4, [sp, #0]
 8001a06:	f001 f9f8 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((8+xcvcc), (ycvcc+11), (8+xcvcc), (ycvcc+14), 1);
 8001a0a:	7ffb      	ldrb	r3, [r7, #31]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3308      	adds	r3, #8
 8001a10:	b298      	uxth	r0, r3
 8001a12:	7fbb      	ldrb	r3, [r7, #30]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	330b      	adds	r3, #11
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3308      	adds	r3, #8
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	7fbb      	ldrb	r3, [r7, #30]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	330e      	adds	r3, #14
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2401      	movs	r4, #1
 8001a2c:	9400      	str	r4, [sp, #0]
 8001a2e:	f001 f9e4 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawLine((10+xcvcc), (ycvcc+11), (10+xcvcc), (ycvcc+14), 1);
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	330a      	adds	r3, #10
 8001a38:	b298      	uxth	r0, r3
 8001a3a:	7fbb      	ldrb	r3, [r7, #30]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	330b      	adds	r3, #11
 8001a40:	b299      	uxth	r1, r3
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	330a      	adds	r3, #10
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	7fbb      	ldrb	r3, [r7, #30]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	330e      	adds	r3, #14
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2401      	movs	r4, #1
 8001a54:	9400      	str	r4, [sp, #0]
 8001a56:	f001 f9d0 	bl	8002dfa <SSD1306_DrawLine>
			  SSD1306_DrawPixel((9+xcvcc), (ycvcc+13), 1);
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3309      	adds	r3, #9
 8001a60:	b298      	uxth	r0, r3
 8001a62:	7fbb      	ldrb	r3, [r7, #30]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	330d      	adds	r3, #13
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f001 f8ab 	bl	8002bc8 <SSD1306_DrawPixel>
			  SSD1306_DrawPixel((9+xcvcc), (ycvcc+14), 1);
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3309      	adds	r3, #9
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	7fbb      	ldrb	r3, [r7, #30]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	330e      	adds	r3, #14
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	2201      	movs	r2, #1
 8001a84:	4619      	mov	r1, r3
 8001a86:	f001 f89f 	bl	8002bc8 <SSD1306_DrawPixel>
			break;
 8001a8a:	e012      	b.n	8001ab2 <drawmenu1+0x33a>
			  xcvcc = 20;
 8001a8c:	2314      	movs	r3, #20
 8001a8e:	77fb      	strb	r3, [r7, #31]
			  ycvcc = 45;
 8001a90:	232d      	movs	r3, #45	; 0x2d
 8001a92:	77bb      	strb	r3, [r7, #30]
			  drawlogoC(xcvcc, ycvcc);
 8001a94:	7fba      	ldrb	r2, [r7, #30]
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fd70 	bl	8001580 <drawlogoC>
			  drawlogoC((xcvcc+10), ycvcc);
 8001aa0:	7ffb      	ldrb	r3, [r7, #31]
 8001aa2:	330a      	adds	r3, #10
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	7fba      	ldrb	r2, [r7, #30]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fd68 	bl	8001580 <drawlogoC>
			break;
 8001ab0:	bf00      	nop
	}
	  if (cvcc) {
 8001ab2:	7bbb      	ldrb	r3, [r7, #14]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d077      	beq.n	8001ba8 <drawmenu1+0x430>
		  	  SSD1306_DrawLine((2+xcvcc), ycvcc , (25+xcvcc), ycvcc, 1);
 8001ab8:	7ffb      	ldrb	r3, [r7, #31]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	3302      	adds	r3, #2
 8001abe:	b298      	uxth	r0, r3
 8001ac0:	7fbb      	ldrb	r3, [r7, #30]
 8001ac2:	b299      	uxth	r1, r3
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3319      	adds	r3, #25
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	7fbb      	ldrb	r3, [r7, #30]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2401      	movs	r4, #1
 8001ad2:	9400      	str	r4, [sp, #0]
 8001ad4:	f001 f991 	bl	8002dfa <SSD1306_DrawLine>
		  	  SSD1306_DrawLine(xcvcc, (ycvcc+2), xcvcc, (ycvcc+15), 1);
 8001ad8:	7ffb      	ldrb	r3, [r7, #31]
 8001ada:	b298      	uxth	r0, r3
 8001adc:	7fbb      	ldrb	r3, [r7, #30]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	7fbb      	ldrb	r3, [r7, #30]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	330f      	adds	r3, #15
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	2401      	movs	r4, #1
 8001af2:	9400      	str	r4, [sp, #0]
 8001af4:	f001 f981 	bl	8002dfa <SSD1306_DrawLine>
		  	  SSD1306_DrawLine((2+xcvcc), (ycvcc+17), (25+xcvcc), (ycvcc+17), 1);
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3302      	adds	r3, #2
 8001afe:	b298      	uxth	r0, r3
 8001b00:	7fbb      	ldrb	r3, [r7, #30]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3311      	adds	r3, #17
 8001b06:	b299      	uxth	r1, r3
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3319      	adds	r3, #25
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	7fbb      	ldrb	r3, [r7, #30]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	3311      	adds	r3, #17
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2401      	movs	r4, #1
 8001b1a:	9400      	str	r4, [sp, #0]
 8001b1c:	f001 f96d 	bl	8002dfa <SSD1306_DrawLine>
		  	  SSD1306_DrawLine((27+xcvcc), (ycvcc+2), (27+xcvcc), (ycvcc+15), 1);
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	331b      	adds	r3, #27
 8001b26:	b298      	uxth	r0, r3
 8001b28:	7fbb      	ldrb	r3, [r7, #30]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	7ffb      	ldrb	r3, [r7, #31]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	331b      	adds	r3, #27
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	7fbb      	ldrb	r3, [r7, #30]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	330f      	adds	r3, #15
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2401      	movs	r4, #1
 8001b42:	9400      	str	r4, [sp, #0]
 8001b44:	f001 f959 	bl	8002dfa <SSD1306_DrawLine>
		  	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+1), 1);
 8001b48:	7ffb      	ldrb	r3, [r7, #31]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	7fbb      	ldrb	r3, [r7, #30]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3301      	adds	r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f001 f834 	bl	8002bc8 <SSD1306_DrawPixel>
		  	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+16), 1);
 8001b60:	7ffb      	ldrb	r3, [r7, #31]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	3301      	adds	r3, #1
 8001b66:	b298      	uxth	r0, r3
 8001b68:	7fbb      	ldrb	r3, [r7, #30]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3310      	adds	r3, #16
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2201      	movs	r2, #1
 8001b72:	4619      	mov	r1, r3
 8001b74:	f001 f828 	bl	8002bc8 <SSD1306_DrawPixel>
		  	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+1), 1);
 8001b78:	7ffb      	ldrb	r3, [r7, #31]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	331a      	adds	r3, #26
 8001b7e:	b298      	uxth	r0, r3
 8001b80:	7fbb      	ldrb	r3, [r7, #30]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f001 f81c 	bl	8002bc8 <SSD1306_DrawPixel>
		  	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+16), 1);
 8001b90:	7ffb      	ldrb	r3, [r7, #31]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	331a      	adds	r3, #26
 8001b96:	b298      	uxth	r0, r3
 8001b98:	7fbb      	ldrb	r3, [r7, #30]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f001 f810 	bl	8002bc8 <SSD1306_DrawPixel>
	  }
	  SSD1306_UpdateScreen(); // update screen
 8001ba8:	f000 ffc8 	bl	8002b3c <SSD1306_UpdateScreen>
}
 8001bac:	bf00      	nop
 8001bae:	3724      	adds	r7, #36	; 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd90      	pop	{r4, r7, pc}

08001bb4 <drawmenu2>:
void drawmenu2()
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
	uint16_t pz = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	81fb      	strh	r3, [r7, #14]
	uint16_t temp = teplota;
 8001bbe:	4b43      	ldr	r3, [pc, #268]	; (8001ccc <drawmenu2+0x118>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa54 	bl	8001070 <__aeabi_f2uiz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	81bb      	strh	r3, [r7, #12]
	char pzc [2];
	char tempc [2];
	char ventc [2];
	itoa(temp, tempc, 10);
 8001bcc:	89bb      	ldrh	r3, [r7, #12]
 8001bce:	1d39      	adds	r1, r7, #4
 8001bd0:	220a      	movs	r2, #10
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 ffbe 	bl	8006b54 <itoa>
	itoa(ventilatorper, ventc, 10);
 8001bd8:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <drawmenu2+0x11c>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	463b      	mov	r3, r7
 8001be0:	220a      	movs	r2, #10
 8001be2:	4619      	mov	r1, r3
 8001be4:	f004 ffb6 	bl	8006b54 <itoa>
	pz = Im * Um;
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <drawmenu2+0x120>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <drawmenu2+0x124>)
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f876 	bl	8000ce4 <__aeabi_fmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fa38 	bl	8001070 <__aeabi_f2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	81fb      	strh	r3, [r7, #14]
	itoa(pz, pzc, 10);
 8001c04:	89fb      	ldrh	r3, [r7, #14]
 8001c06:	f107 0108 	add.w	r1, r7, #8
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 ffa1 	bl	8006b54 <itoa>
	SSD1306_Clear();
 8001c12:	f001 f9ed 	bl	8002ff0 <SSD1306_Clear>
	SSD1306_GotoXY (10,3);
 8001c16:	2103      	movs	r1, #3
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f001 f833 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts("Pz =", &Font_11x18, 1);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	492e      	ldr	r1, [pc, #184]	; (8001cdc <drawmenu2+0x128>)
 8001c22:	482f      	ldr	r0, [pc, #188]	; (8001ce0 <drawmenu2+0x12c>)
 8001c24:	f001 f8c4 	bl	8002db0 <SSD1306_Puts>
	SSD1306_GotoXY (65,3);
 8001c28:	2103      	movs	r1, #3
 8001c2a:	2041      	movs	r0, #65	; 0x41
 8001c2c:	f001 f82a 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts(pzc, &Font_11x18, 1);
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	2201      	movs	r2, #1
 8001c36:	4929      	ldr	r1, [pc, #164]	; (8001cdc <drawmenu2+0x128>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 f8b9 	bl	8002db0 <SSD1306_Puts>
	SSD1306_GotoXY (107,3);
 8001c3e:	2103      	movs	r1, #3
 8001c40:	206b      	movs	r0, #107	; 0x6b
 8001c42:	f001 f81f 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Putc('W', &Font_11x18, 1);
 8001c46:	2201      	movs	r2, #1
 8001c48:	4924      	ldr	r1, [pc, #144]	; (8001cdc <drawmenu2+0x128>)
 8001c4a:	2057      	movs	r0, #87	; 0x57
 8001c4c:	f001 f830 	bl	8002cb0 <SSD1306_Putc>
	SSD1306_GotoXY (10,25);
 8001c50:	2119      	movs	r1, #25
 8001c52:	200a      	movs	r0, #10
 8001c54:	f001 f816 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts("tep=", &Font_11x18, 1);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4920      	ldr	r1, [pc, #128]	; (8001cdc <drawmenu2+0x128>)
 8001c5c:	4821      	ldr	r0, [pc, #132]	; (8001ce4 <drawmenu2+0x130>)
 8001c5e:	f001 f8a7 	bl	8002db0 <SSD1306_Puts>
	SSD1306_GotoXY (65,25);
 8001c62:	2119      	movs	r1, #25
 8001c64:	2041      	movs	r0, #65	; 0x41
 8001c66:	f001 f80d 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts(tempc, &Font_11x18, 1);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	491b      	ldr	r1, [pc, #108]	; (8001cdc <drawmenu2+0x128>)
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 f89d 	bl	8002db0 <SSD1306_Puts>
	SSD1306_GotoXY (107,25);
 8001c76:	2119      	movs	r1, #25
 8001c78:	206b      	movs	r0, #107	; 0x6b
 8001c7a:	f001 f803 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Putc('C', &Font_11x18, 1);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4916      	ldr	r1, [pc, #88]	; (8001cdc <drawmenu2+0x128>)
 8001c82:	2043      	movs	r0, #67	; 0x43
 8001c84:	f001 f814 	bl	8002cb0 <SSD1306_Putc>
	SSD1306_GotoXY (10,43);
 8001c88:	212b      	movs	r1, #43	; 0x2b
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f000 fffa 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts("vent=", &Font_11x18, 1);
 8001c90:	2201      	movs	r2, #1
 8001c92:	4912      	ldr	r1, [pc, #72]	; (8001cdc <drawmenu2+0x128>)
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <drawmenu2+0x134>)
 8001c96:	f001 f88b 	bl	8002db0 <SSD1306_Puts>
	SSD1306_GotoXY (65, 43);
 8001c9a:	212b      	movs	r1, #43	; 0x2b
 8001c9c:	2041      	movs	r0, #65	; 0x41
 8001c9e:	f000 fff1 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts(ventc, &Font_11x18, 1);
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	490d      	ldr	r1, [pc, #52]	; (8001cdc <drawmenu2+0x128>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 f881 	bl	8002db0 <SSD1306_Puts>
	SSD1306_GotoXY (107,43);
 8001cae:	212b      	movs	r1, #43	; 0x2b
 8001cb0:	206b      	movs	r0, #107	; 0x6b
 8001cb2:	f000 ffe7 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Putc('%', &Font_11x18, 1);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	4908      	ldr	r1, [pc, #32]	; (8001cdc <drawmenu2+0x128>)
 8001cba:	2025      	movs	r0, #37	; 0x25
 8001cbc:	f000 fff8 	bl	8002cb0 <SSD1306_Putc>
	SSD1306_UpdateScreen(); // update screen
 8001cc0:	f000 ff3c 	bl	8002b3c <SSD1306_UpdateScreen>

}
 8001cc4:	bf00      	nop
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200000a8 	.word	0x200000a8
 8001cd0:	200000bc 	.word	0x200000bc
 8001cd4:	200000a0 	.word	0x200000a0
 8001cd8:	200000a4 	.word	0x200000a4
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	08007014 	.word	0x08007014
 8001ce4:	0800701c 	.word	0x0800701c
 8001ce8:	08007024 	.word	0x08007024

08001cec <ventilator>:


// výstupní elektrické veličiny

void ventilator(float temp)  //nastavení úrovně PWM ventilátoru
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	// kontrola správnosti
	if((teplota > 100)||(teplota < 1))
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <ventilator+0xe4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4936      	ldr	r1, [pc, #216]	; (8001dd4 <ventilator+0xe8>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f9ae 	bl	800105c <__aeabi_fcmpgt>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <ventilator+0x2e>
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <ventilator+0xe4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f986 	bl	8001020 <__aeabi_fcmplt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <ventilator+0x34>
	{
		error(0);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff f9c8 	bl	80010b0 <error>
	}
	if(teplota > 70)
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <ventilator+0xe4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <ventilator+0xec>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f998 	bl	800105c <__aeabi_fcmpgt>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <ventilator+0x4c>
	{
		error(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff f9bc 	bl	80010b0 <error>
	}

	//hystereze
	if(temp > 30)
 8001d38:	4928      	ldr	r1, [pc, #160]	; (8001ddc <ventilator+0xf0>)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff f98e 	bl	800105c <__aeabi_fcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <ventilator+0x60>
	{
		ventilatorhyst = 1;
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <ventilator+0xf4>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
	}
	if(temp < 28)
 8001d4c:	4925      	ldr	r1, [pc, #148]	; (8001de4 <ventilator+0xf8>)
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff f966 	bl	8001020 <__aeabi_fcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <ventilator+0x74>
	{
		ventilatorhyst = 0;
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <ventilator+0xf4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
	}
	//výpočet v %
	if(ventilatorhyst == 1)
 8001d60:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <ventilator+0xf4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d11d      	bne.n	8001da4 <ventilator+0xb8>
	{
		ventilatorper = ((temp - 25) * 2) + 50;
 8001d68:	491f      	ldr	r1, [pc, #124]	; (8001de8 <ventilator+0xfc>)
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe feb0 	bl	8000ad0 <__aeabi_fsub>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fead 	bl	8000ad4 <__addsf3>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	491b      	ldr	r1, [pc, #108]	; (8001dec <ventilator+0x100>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fea8 	bl	8000ad4 <__addsf3>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f972 	bl	8001070 <__aeabi_f2uiz>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <ventilator+0x104>)
 8001d92:	801a      	strh	r2, [r3, #0]
		if(ventilatorper > 100)
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <ventilator+0x104>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d906      	bls.n	8001daa <ventilator+0xbe>
		{
			ventilatorper = 100;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <ventilator+0x104>)
 8001d9e:	2264      	movs	r2, #100	; 0x64
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	e002      	b.n	8001daa <ventilator+0xbe>
		}
	}else
	{
		ventilatorper = 0;
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <ventilator+0x104>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	801a      	strh	r2, [r3, #0]
	}
	//nastavení časovače v 8-bit
	TIM2->CCR1 = (ventilatorper*255)/100;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <ventilator+0x104>)
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4613      	mov	r3, r2
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	4a0f      	ldr	r2, [pc, #60]	; (8001df4 <ventilator+0x108>)
 8001db8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbc:	1152      	asrs	r2, r2, #5
 8001dbe:	17db      	asrs	r3, r3, #31
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200000a8 	.word	0x200000a8
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	428c0000 	.word	0x428c0000
 8001ddc:	41f00000 	.word	0x41f00000
 8001de0:	200000be 	.word	0x200000be
 8001de4:	41e00000 	.word	0x41e00000
 8001de8:	41c80000 	.word	0x41c80000
 8001dec:	42480000 	.word	0x42480000
 8001df0:	200000bc 	.word	0x200000bc
 8001df4:	51eb851f 	.word	0x51eb851f

08001df8 <setDAC1>:
void setDAC1 (uint16_t data) // zapíše vpravo zarovnaná 12-bit data do DAC1 na I2C2
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <setDAC1+0x38>)
 8001e0c:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <setDAC1+0x38>)
 8001e16:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c2, (0b1100001<<1), dataDAC, 3, 10);
 8001e18:	230a      	movs	r3, #10
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <setDAC1+0x38>)
 8001e20:	21c2      	movs	r1, #194	; 0xc2
 8001e22:	4804      	ldr	r0, [pc, #16]	; (8001e34 <setDAC1+0x3c>)
 8001e24:	f002 fe2a 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000524 	.word	0x20000524

08001e38 <setDAC2>:
void setDAC2 (uint16_t data) // zapíše vpravo zarovnaná 12-bit data do DAC1 na I2C2
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	4603      	mov	r3, r0
 8001e40:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <setDAC2+0x38>)
 8001e4c:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <setDAC2+0x38>)
 8001e56:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c1, (0b1100001<<1), dataDAC, 3, 10);
 8001e58:	230a      	movs	r3, #10
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <setDAC2+0x38>)
 8001e60:	21c2      	movs	r1, #194	; 0xc2
 8001e62:	4804      	ldr	r0, [pc, #16]	; (8001e74 <setDAC2+0x3c>)
 8001e64:	f002 fe0a 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000008 	.word	0x20000008
 8001e74:	200004d0 	.word	0x200004d0

08001e78 <setVout>:
void setVout (float napeti)	 //řízení spínaného napěťového regulátoru  + příprava pro ADC
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if(napeti < 2.5)
 8001e80:	491a      	ldr	r1, [pc, #104]	; (8001eec <setVout+0x74>)
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff f8cc 	bl	8001020 <__aeabi_fcmplt>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <setVout+0x20>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2104      	movs	r1, #4
 8001e92:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <setVout+0x78>)
 8001e94:	f002 fc7d 	bl	8004792 <HAL_GPIO_WritePin>
	}
	setDAC1((napeti+(ADCtoVoltage(ADCout[2])*2)*4095)/Uadc);
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <setVout+0x7c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fae0 	bl	8001464 <ADCtoVoltage>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fe13 	bl	8000ad4 <__addsf3>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4911      	ldr	r1, [pc, #68]	; (8001ef8 <setVout+0x80>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe ff16 	bl	8000ce4 <__aeabi_fmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fe09 	bl	8000ad4 <__addsf3>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <setVout+0x84>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4610      	mov	r0, r2
 8001ece:	f7fe ffbd 	bl	8000e4c <__aeabi_fdiv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f8cb 	bl	8001070 <__aeabi_f2uiz>
 8001eda:	4603      	mov	r3, r0
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff8a 	bl	8001df8 <setDAC1>
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40200000 	.word	0x40200000
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	200005b0 	.word	0x200005b0
 8001ef8:	457ff000 	.word	0x457ff000
 8001efc:	2000000c 	.word	0x2000000c

08001f00 <setIout>:
void setIout(float proud)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	uint16_t output;
	output = (proud*4095)/Uadc;
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <setIout+0x3c>)
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe feea 	bl	8000ce4 <__aeabi_fmul>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <setIout+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f7fe ff96 	bl	8000e4c <__aeabi_fdiv>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff f8a4 	bl	8001070 <__aeabi_f2uiz>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	81fb      	strh	r3, [r7, #14]
	setDAC2(output);
 8001f2c:	89fb      	ldrh	r3, [r7, #14]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff82 	bl	8001e38 <setDAC2>
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	457ff000 	.word	0x457ff000
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <start>:

void start()
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 8001f48:	f001 f852 	bl	8002ff0 <SSD1306_Clear>
	SSD1306_GotoXY (25,25);
 8001f4c:	2119      	movs	r1, #25
 8001f4e:	2019      	movs	r0, #25
 8001f50:	f000 fe98 	bl	8002c84 <SSD1306_GotoXY>
	SSD1306_Puts("zdrojOS", &Font_11x18, 1);
 8001f54:	2201      	movs	r2, #1
 8001f56:	4906      	ldr	r1, [pc, #24]	; (8001f70 <start+0x2c>)
 8001f58:	4806      	ldr	r0, [pc, #24]	; (8001f74 <start+0x30>)
 8001f5a:	f000 ff29 	bl	8002db0 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001f5e:	f000 fded 	bl	8002b3c <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 8001f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f66:	f001 fb17 	bl	8003598 <HAL_Delay>
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000000 	.word	0x20000000
 8001f74:	0800702c 	.word	0x0800702c

08001f78 <HAL_GPIO_EXTI_Callback>:

//vektory přerušení

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  //přerušení krok encoderu
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
	uint8_t direct = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8001f82:	2102      	movs	r1, #2
 8001f84:	48c2      	ldr	r0, [pc, #776]	; (8002290 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f86:	f002 fbed 	bl	8004764 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	73bb      	strb	r3, [r7, #14]
	if(GPIO_Pin == GPIO_PIN_0)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	f040 816e 	bne.w	8002272 <HAL_GPIO_EXTI_Callback+0x2fa>
	{
		if((setmodeflag > 0)&&(menupage == 0)){
 8001f96:	4bbf      	ldr	r3, [pc, #764]	; (8002294 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8169 	beq.w	8002272 <HAL_GPIO_EXTI_Callback+0x2fa>
 8001fa0:	4bbd      	ldr	r3, [pc, #756]	; (8002298 <HAL_GPIO_EXTI_Callback+0x320>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 8164 	bne.w	8002272 <HAL_GPIO_EXTI_Callback+0x2fa>
		if(debounce[4] == 0)
 8001faa:	4bbc      	ldr	r3, [pc, #752]	; (800229c <HAL_GPIO_EXTI_Callback+0x324>)
 8001fac:	791b      	ldrb	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 815f 	bne.w	8002272 <HAL_GPIO_EXTI_Callback+0x2fa>
		{
		int8_t i = 1;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
		setmodeflag = 500;
 8001fb8:	4bb6      	ldr	r3, [pc, #728]	; (8002294 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001fba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fbe:	801a      	strh	r2, [r3, #0]
		if(direct == 1)
 8001fc0:	7bbb      	ldrb	r3, [r7, #14]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_EXTI_Callback+0x52>
		{
			i = -1;
 8001fc6:	23ff      	movs	r3, #255	; 0xff
 8001fc8:	73fb      	strb	r3, [r7, #15]
		}
		switch (cursor) {
 8001fca:	4bb5      	ldr	r3, [pc, #724]	; (80022a0 <HAL_GPIO_EXTI_Callback+0x328>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b80      	cmp	r3, #128	; 0x80
 8001fd0:	f000 80a6 	beq.w	8002120 <HAL_GPIO_EXTI_Callback+0x1a8>
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	f300 8120 	bgt.w	800221a <HAL_GPIO_EXTI_Callback+0x2a2>
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	dc4a      	bgt.n	8002074 <HAL_GPIO_EXTI_Callback+0xfc>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f340 811b 	ble.w	800221a <HAL_GPIO_EXTI_Callback+0x2a2>
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	2b1f      	cmp	r3, #31
 8001fe8:	f200 8117 	bhi.w	800221a <HAL_GPIO_EXTI_Callback+0x2a2>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	0800214b 	.word	0x0800214b
 8001ff8:	0800218d 	.word	0x0800218d
 8001ffc:	0800221b 	.word	0x0800221b
 8002000:	080021cf 	.word	0x080021cf
 8002004:	0800221b 	.word	0x0800221b
 8002008:	0800221b 	.word	0x0800221b
 800200c:	0800221b 	.word	0x0800221b
 8002010:	080021f1 	.word	0x080021f1
 8002014:	0800221b 	.word	0x0800221b
 8002018:	0800221b 	.word	0x0800221b
 800201c:	0800221b 	.word	0x0800221b
 8002020:	0800221b 	.word	0x0800221b
 8002024:	0800221b 	.word	0x0800221b
 8002028:	0800221b 	.word	0x0800221b
 800202c:	0800221b 	.word	0x0800221b
 8002030:	0800207b 	.word	0x0800207b
 8002034:	0800221b 	.word	0x0800221b
 8002038:	0800221b 	.word	0x0800221b
 800203c:	0800221b 	.word	0x0800221b
 8002040:	0800221b 	.word	0x0800221b
 8002044:	0800221b 	.word	0x0800221b
 8002048:	0800221b 	.word	0x0800221b
 800204c:	0800221b 	.word	0x0800221b
 8002050:	0800221b 	.word	0x0800221b
 8002054:	0800221b 	.word	0x0800221b
 8002058:	0800221b 	.word	0x0800221b
 800205c:	0800221b 	.word	0x0800221b
 8002060:	0800221b 	.word	0x0800221b
 8002064:	0800221b 	.word	0x0800221b
 8002068:	0800221b 	.word	0x0800221b
 800206c:	0800221b 	.word	0x0800221b
 8002070:	080020bd 	.word	0x080020bd
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d042      	beq.n	80020fe <HAL_GPIO_EXTI_Callback+0x186>
				break;
			case 0x08:
				setvoltage = setvoltage + (10*i);
				break;
			default:
				break;
 8002078:	e0cf      	b.n	800221a <HAL_GPIO_EXTI_Callback+0x2a2>
				setcurrent = setcurrent + (0.01 * i);
 800207a:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f9ca 	bl	8000418 <__aeabi_f2d>
 8002084:	4604      	mov	r4, r0
 8002086:	460d      	mov	r5, r1
 8002088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe f9b1 	bl	80003f4 <__aeabi_i2d>
 8002092:	a37b      	add	r3, pc, #492	; (adr r3, 8002280 <HAL_GPIO_EXTI_Callback+0x308>)
 8002094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002098:	f7fe fa16 	bl	80004c8 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4620      	mov	r0, r4
 80020a2:	4629      	mov	r1, r5
 80020a4:	f7fe f85a 	bl	800015c <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7fe fcba 	bl	8000a28 <__aeabi_d2f>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a7b      	ldr	r2, [pc, #492]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 80020b8:	6013      	str	r3, [r2, #0]
				break;
 80020ba:	e0af      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setcurrent = setcurrent + (0.1 * i);
 80020bc:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe f9a9 	bl	8000418 <__aeabi_f2d>
 80020c6:	4604      	mov	r4, r0
 80020c8:	460d      	mov	r5, r1
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f990 	bl	80003f4 <__aeabi_i2d>
 80020d4:	a36c      	add	r3, pc, #432	; (adr r3, 8002288 <HAL_GPIO_EXTI_Callback+0x310>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f9f5 	bl	80004c8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe f839 	bl	800015c <__adddf3>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f7fe fc99 	bl	8000a28 <__aeabi_d2f>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4a6a      	ldr	r2, [pc, #424]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 80020fa:	6013      	str	r3, [r2, #0]
				break;
 80020fc:	e08e      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setcurrent = setcurrent + i;
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fd9a 	bl	8000c3c <__aeabi_i2f>
 8002108:	4602      	mov	r2, r0
 800210a:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f7fe fcdf 	bl	8000ad4 <__addsf3>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	4b62      	ldr	r3, [pc, #392]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 800211c:	601a      	str	r2, [r3, #0]
				break;
 800211e:	e07d      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setcurrent = setcurrent + (10*i);
 8002120:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fd85 	bl	8000c3c <__aeabi_i2f>
 8002132:	4602      	mov	r2, r0
 8002134:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	4610      	mov	r0, r2
 800213c:	f7fe fcca 	bl	8000ad4 <__addsf3>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002146:	601a      	str	r2, [r3, #0]
				break;
 8002148:	e068      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setvoltage = setvoltage + (0.01 * i);
 800214a:	4b57      	ldr	r3, [pc, #348]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f962 	bl	8000418 <__aeabi_f2d>
 8002154:	4604      	mov	r4, r0
 8002156:	460d      	mov	r5, r1
 8002158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f949 	bl	80003f4 <__aeabi_i2d>
 8002162:	a347      	add	r3, pc, #284	; (adr r3, 8002280 <HAL_GPIO_EXTI_Callback+0x308>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f9ae 	bl	80004c8 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4620      	mov	r0, r4
 8002172:	4629      	mov	r1, r5
 8002174:	f7fd fff2 	bl	800015c <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f7fe fc52 	bl	8000a28 <__aeabi_d2f>
 8002184:	4603      	mov	r3, r0
 8002186:	4a48      	ldr	r2, [pc, #288]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 8002188:	6013      	str	r3, [r2, #0]
				break;
 800218a:	e047      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setvoltage = setvoltage + (0.1 * i);
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe f941 	bl	8000418 <__aeabi_f2d>
 8002196:	4604      	mov	r4, r0
 8002198:	460d      	mov	r5, r1
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f928 	bl	80003f4 <__aeabi_i2d>
 80021a4:	a338      	add	r3, pc, #224	; (adr r3, 8002288 <HAL_GPIO_EXTI_Callback+0x310>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe f98d 	bl	80004c8 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fd ffd1 	bl	800015c <__adddf3>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fc31 	bl	8000a28 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4a37      	ldr	r2, [pc, #220]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 80021ca:	6013      	str	r3, [r2, #0]
				break;
 80021cc:	e026      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setvoltage = setvoltage + i;
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe fd32 	bl	8000c3c <__aeabi_i2f>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe fc77 	bl	8000ad4 <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 80021ec:	601a      	str	r2, [r3, #0]
				break;
 80021ee:	e015      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				setvoltage = setvoltage + (10*i);
 80021f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fd1d 	bl	8000c3c <__aeabi_i2f>
 8002202:	4602      	mov	r2, r0
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f7fe fc62 	bl	8000ad4 <__addsf3>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 8002216:	601a      	str	r2, [r3, #0]
				break;
 8002218:	e000      	b.n	800221c <HAL_GPIO_EXTI_Callback+0x2a4>
				break;
 800221a:	bf00      	nop
		}
		if(setvoltage < 0)
 800221c:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f04f 0100 	mov.w	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fefb 	bl	8001020 <__aeabi_fcmplt>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_EXTI_Callback+0x2c0>
		{
			setvoltage = 0;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_GPIO_EXTI_Callback+0x330>)
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
		}
		if(setcurrent < 0)
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe feed 	bl	8001020 <__aeabi_fcmplt>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_EXTI_Callback+0x2dc>
		{
			setcurrent = 0;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
		}
		if(setcurrent > 3)
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4914      	ldr	r1, [pc, #80]	; (80022ac <HAL_GPIO_EXTI_Callback+0x334>)
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fefe 	bl	800105c <__aeabi_fcmpgt>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_GPIO_EXTI_Callback+0x2f4>
		{
			setcurrent = 3;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8002268:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_GPIO_EXTI_Callback+0x334>)
 800226a:	601a      	str	r2, [r3, #0]
		}
		debounce[4] = 10;
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_GPIO_EXTI_Callback+0x324>)
 800226e:	220a      	movs	r2, #10
 8002270:	711a      	strb	r2, [r3, #4]
		}
	}
	}
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bdb0      	pop	{r4, r5, r7, pc}
 800227a:	bf00      	nop
 800227c:	f3af 8000 	nop.w
 8002280:	47ae147b 	.word	0x47ae147b
 8002284:	3f847ae1 	.word	0x3f847ae1
 8002288:	9999999a 	.word	0x9999999a
 800228c:	3fb99999 	.word	0x3fb99999
 8002290:	40010c00 	.word	0x40010c00
 8002294:	200000ac 	.word	0x200000ac
 8002298:	200000af 	.word	0x200000af
 800229c:	20000578 	.word	0x20000578
 80022a0:	200000ae 	.word	0x200000ae
 80022a4:	200000b4 	.word	0x200000b4
 80022a8:	200000b0 	.word	0x200000b0
 80022ac:	40400000 	.word	0x40400000

080022b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b6:	f001 f90d 	bl	80034d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ba:	f000 f94d 	bl	8002558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022be:	f000 fae3 	bl	8002888 <MX_GPIO_Init>
  MX_I2C1_Init();
 80022c2:	f000 fa0f 	bl	80026e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80022c6:	f000 fa3b 	bl	8002740 <MX_I2C2_Init>
  MX_DMA_Init();
 80022ca:	f000 fabf 	bl	800284c <MX_DMA_Init>
  MX_ADC1_Init();
 80022ce:	f000 f99f 	bl	8002610 <MX_ADC1_Init>
  MX_TIM2_Init();
 80022d2:	f000 fa63 	bl	800279c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80022d6:	f000 fb6d 	bl	80029b4 <SSD1306_Init>
  HAL_ADC_Start_DMA(&hadc1, ADCout, 4);
 80022da:	2204      	movs	r2, #4
 80022dc:	4992      	ldr	r1, [pc, #584]	; (8002528 <main+0x278>)
 80022de:	4893      	ldr	r0, [pc, #588]	; (800252c <main+0x27c>)
 80022e0:	f001 fa56 	bl	8003790 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80022e4:	2100      	movs	r1, #0
 80022e6:	4892      	ldr	r0, [pc, #584]	; (8002530 <main+0x280>)
 80022e8:	f004 f826 	bl	8006338 <HAL_TIM_PWM_Start>
  start();
 80022ec:	f7ff fe2a 	bl	8001f44 <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float rozdilchI = 0;
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
	  float rozdilchU = 0;
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
	  uint8_t refreshflag = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	73fb      	strb	r3, [r7, #15]


	  readbuttons();
 8002300:	f7fe ff48 	bl	8001194 <readbuttons>
	  if(setmodeflag>0) //display vstoupí do interaktivního módu
 8002304:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <main+0x284>)
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d04e      	beq.n	80023aa <main+0xfa>
	  {
		  if(setmodeflag == 500)
 800230c:	4b89      	ldr	r3, [pc, #548]	; (8002534 <main+0x284>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002314:	d114      	bne.n	8002340 <main+0x90>
		  {
			  switch (menupage) {
 8002316:	4b88      	ldr	r3, [pc, #544]	; (8002538 <main+0x288>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d106      	bne.n	800232c <main+0x7c>
				case 1:
					drawmenu2();
 800231e:	f7ff fc49 	bl	8001bb4 <drawmenu2>
					setmodeflag = 750;
 8002322:	4b84      	ldr	r3, [pc, #528]	; (8002534 <main+0x284>)
 8002324:	f240 22ee 	movw	r2, #750	; 0x2ee
 8002328:	801a      	strh	r2, [r3, #0]
					break;
 800232a:	e00a      	b.n	8002342 <main+0x92>
				default:
					drawmenu1(cursor, 0, setcurrent , setvoltage);
 800232c:	4b83      	ldr	r3, [pc, #524]	; (800253c <main+0x28c>)
 800232e:	7818      	ldrb	r0, [r3, #0]
 8002330:	4b83      	ldr	r3, [pc, #524]	; (8002540 <main+0x290>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b83      	ldr	r3, [pc, #524]	; (8002544 <main+0x294>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2100      	movs	r1, #0
 800233a:	f7ff fa1d 	bl	8001778 <drawmenu1>
					break;
 800233e:	e000      	b.n	8002342 <main+0x92>
			}
		  }
 8002340:	bf00      	nop

		  if(setmodeflag > 0)
 8002342:	4b7c      	ldr	r3, [pc, #496]	; (8002534 <main+0x284>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <main+0xa6>
		  {
			  setmodeflag--;
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <main+0x284>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <main+0x284>)
 8002354:	801a      	strh	r2, [r3, #0]
		  }
		  for(uint8_t i = 0; i<5; i++)
 8002356:	2300      	movs	r3, #0
 8002358:	73bb      	strb	r3, [r7, #14]
 800235a:	e00e      	b.n	800237a <main+0xca>
		  {
			  if(debounce[i] > 0)
 800235c:	7bbb      	ldrb	r3, [r7, #14]
 800235e:	4a7a      	ldr	r2, [pc, #488]	; (8002548 <main+0x298>)
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <main+0xc4>
			  {
				  debounce[i]--;
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	4a77      	ldr	r2, [pc, #476]	; (8002548 <main+0x298>)
 800236a:	5cd2      	ldrb	r2, [r2, r3]
 800236c:	3a01      	subs	r2, #1
 800236e:	b2d1      	uxtb	r1, r2
 8002370:	4a75      	ldr	r2, [pc, #468]	; (8002548 <main+0x298>)
 8002372:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0; i<5; i++)
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	3301      	adds	r3, #1
 8002378:	73bb      	strb	r3, [r7, #14]
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d9ed      	bls.n	800235c <main+0xac>
			  }
		  }
		  if(setmodeflag == 0)
 8002380:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <main+0x284>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10c      	bne.n	80023a2 <main+0xf2>
		  {
			 menupage = 0;
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <main+0x288>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			 setVout(setvoltage);
 800238e:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <main+0x294>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fd70 	bl	8001e78 <setVout>
			 setIout(setcurrent);
 8002398:	4b69      	ldr	r3, [pc, #420]	; (8002540 <main+0x290>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fdaf 	bl	8001f00 <setIout>
		  }
		  HAL_Delay(2);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f001 f8f8 	bl	8003598 <HAL_Delay>
 80023a8:	e0a2      	b.n	80024f0 <main+0x240>
	  }
	  else
	  {
		  // není v setmode
		  rozdilchI = Im - (ADCtoVoltage(ADCout[0]));  // Aktualní - nová hodnota
 80023aa:	4b68      	ldr	r3, [pc, #416]	; (800254c <main+0x29c>)
 80023ac:	681c      	ldr	r4, [r3, #0]
 80023ae:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <main+0x278>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f855 	bl	8001464 <ADCtoVoltage>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4619      	mov	r1, r3
 80023be:	4620      	mov	r0, r4
 80023c0:	f7fe fb86 	bl	8000ad0 <__aeabi_fsub>
 80023c4:	4603      	mov	r3, r0
 80023c6:	60bb      	str	r3, [r7, #8]
		  if((rozdilchI > 0.02)||(rozdilchI < -0.02))
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f7fe f825 	bl	8000418 <__aeabi_f2d>
 80023ce:	a352      	add	r3, pc, #328	; (adr r3, 8002518 <main+0x268>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe fb08 	bl	80009e8 <__aeabi_dcmpgt>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <main+0x144>
 80023de:	68b8      	ldr	r0, [r7, #8]
 80023e0:	f7fe f81a 	bl	8000418 <__aeabi_f2d>
 80023e4:	a34e      	add	r3, pc, #312	; (adr r3, 8002520 <main+0x270>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fe fadf 	bl	80009ac <__aeabi_dcmplt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00c      	beq.n	800240e <main+0x15e>
		  {
			  Im = ADCtoVoltage(ADCout[0]);
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <main+0x278>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff f832 	bl	8001464 <ADCtoVoltage>
 8002400:	4603      	mov	r3, r0
 8002402:	4a52      	ldr	r2, [pc, #328]	; (800254c <main+0x29c>)
 8002404:	6013      	str	r3, [r2, #0]
			  refreshflag |= 0x01;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
		  }
		  rozdilchU = Um - ((ADCtoVoltage(ADCout[1])*2)-(ADCtoVoltage(ADCout[2])*2)); // Aktualní - nová hodnota
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <main+0x2a0>)
 8002410:	681c      	ldr	r4, [r3, #0]
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <main+0x278>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff f823 	bl	8001464 <ADCtoVoltage>
 800241e:	4603      	mov	r3, r0
 8002420:	4619      	mov	r1, r3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fb56 	bl	8000ad4 <__addsf3>
 8002428:	4603      	mov	r3, r0
 800242a:	461d      	mov	r5, r3
 800242c:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <main+0x278>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	b29b      	uxth	r3, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff f816 	bl	8001464 <ADCtoVoltage>
 8002438:	4603      	mov	r3, r0
 800243a:	4619      	mov	r1, r3
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe fb49 	bl	8000ad4 <__addsf3>
 8002442:	4603      	mov	r3, r0
 8002444:	4619      	mov	r1, r3
 8002446:	4628      	mov	r0, r5
 8002448:	f7fe fb42 	bl	8000ad0 <__aeabi_fsub>
 800244c:	4603      	mov	r3, r0
 800244e:	4619      	mov	r1, r3
 8002450:	4620      	mov	r0, r4
 8002452:	f7fe fb3d 	bl	8000ad0 <__aeabi_fsub>
 8002456:	4603      	mov	r3, r0
 8002458:	607b      	str	r3, [r7, #4]
		  if((rozdilchU > 0.02)||(rozdilchU < -0.02))
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fd ffdc 	bl	8000418 <__aeabi_f2d>
 8002460:	a32d      	add	r3, pc, #180	; (adr r3, 8002518 <main+0x268>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe fabf 	bl	80009e8 <__aeabi_dcmpgt>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <main+0x1d6>
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7fd ffd1 	bl	8000418 <__aeabi_f2d>
 8002476:	a32a      	add	r3, pc, #168	; (adr r3, 8002520 <main+0x270>)
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	f7fe fa96 	bl	80009ac <__aeabi_dcmplt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d029      	beq.n	80024da <main+0x22a>
		  {
			  Um = (ADCtoVoltage(ADCout[1])*2)-(ADCtoVoltage(ADCout[2])*2);
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <main+0x278>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe ffe9 	bl	8001464 <ADCtoVoltage>
 8002492:	4603      	mov	r3, r0
 8002494:	4619      	mov	r1, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fb1c 	bl	8000ad4 <__addsf3>
 800249c:	4603      	mov	r3, r0
 800249e:	461c      	mov	r4, r3
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <main+0x278>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ffdc 	bl	8001464 <ADCtoVoltage>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4619      	mov	r1, r3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe fb0f 	bl	8000ad4 <__addsf3>
 80024b6:	4603      	mov	r3, r0
 80024b8:	4619      	mov	r1, r3
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7fe fb08 	bl	8000ad0 <__aeabi_fsub>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b22      	ldr	r3, [pc, #136]	; (8002550 <main+0x2a0>)
 80024c6:	601a      	str	r2, [r3, #0]
			  setVout(setvoltage);
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <main+0x294>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fcd3 	bl	8001e78 <setVout>
			  refreshflag |= 0x01;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
		  }
		  if(refreshflag > 0)  // pokud je příznak změny údajů na display obnoví display
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <main+0x240>
		  {
			  drawmenu1(0, 1, Im , Um);
 80024e0:	4b1a      	ldr	r3, [pc, #104]	; (800254c <main+0x29c>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <main+0x2a0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff f944 	bl	8001778 <drawmenu1>
		  }
	  }
	  teplota = Voltagetoteperatur(ADCtoVoltage(ADCout[3]));
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <main+0x278>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe ffb4 	bl	8001464 <ADCtoVoltage>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe ffde 	bl	80014c0 <Voltagetoteperatur>
 8002504:	4603      	mov	r3, r0
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <main+0x2a4>)
 8002508:	6013      	str	r3, [r2, #0]
	  ventilator(teplota);
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <main+0x2a4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbec 	bl	8001cec <ventilator>
  {
 8002514:	e6ec      	b.n	80022f0 <main+0x40>
 8002516:	bf00      	nop
 8002518:	47ae147b 	.word	0x47ae147b
 800251c:	3f947ae1 	.word	0x3f947ae1
 8002520:	47ae147b 	.word	0x47ae147b
 8002524:	bf947ae1 	.word	0xbf947ae1
 8002528:	200005b0 	.word	0x200005b0
 800252c:	20000580 	.word	0x20000580
 8002530:	20000608 	.word	0x20000608
 8002534:	200000ac 	.word	0x200000ac
 8002538:	200000af 	.word	0x200000af
 800253c:	200000ae 	.word	0x200000ae
 8002540:	200000b4 	.word	0x200000b4
 8002544:	200000b0 	.word	0x200000b0
 8002548:	20000578 	.word	0x20000578
 800254c:	200000a0 	.word	0x200000a0
 8002550:	200000a4 	.word	0x200000a4
 8002554:	200000a8 	.word	0x200000a8

08002558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b094      	sub	sp, #80	; 0x50
 800255c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002562:	2228      	movs	r2, #40	; 0x28
 8002564:	2100      	movs	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f004 faf6 	bl	8006b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002588:	2301      	movs	r3, #1
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800258c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002596:	2301      	movs	r3, #1
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800259a:	2302      	movs	r3, #2
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 f9b6 	bl	8005920 <HAL_RCC_OscConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80025ba:	f000 f9f5 	bl	80029a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025be:	230f      	movs	r3, #15
 80025c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c2:	2302      	movs	r3, #2
 80025c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80025d0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	2102      	movs	r1, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fc1f 	bl	8005e20 <HAL_RCC_ClockConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025e8:	f000 f9de 	bl	80029a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025ec:	2302      	movs	r3, #2
 80025ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80025f0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fd97 	bl	800612c <HAL_RCCEx_PeriphCLKConfig>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002604:	f000 f9d0 	bl	80029a8 <Error_Handler>
  }
}
 8002608:	bf00      	nop
 800260a:	3750      	adds	r7, #80	; 0x50
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002622:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <MX_ADC1_Init+0xd0>)
 8002624:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800262c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002630:	2201      	movs	r2, #1
 8002632:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002636:	2200      	movs	r2, #0
 8002638:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800263a:	4b28      	ldr	r3, [pc, #160]	; (80026dc <MX_ADC1_Init+0xcc>)
 800263c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002642:	4b26      	ldr	r3, [pc, #152]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002648:	4b24      	ldr	r3, [pc, #144]	; (80026dc <MX_ADC1_Init+0xcc>)
 800264a:	2204      	movs	r2, #4
 800264c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800264e:	4823      	ldr	r0, [pc, #140]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002650:	f000 ffc6 	bl	80035e0 <HAL_ADC_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800265a:	f000 f9a5 	bl	80029a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002662:	2301      	movs	r3, #1
 8002664:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002666:	2306      	movs	r3, #6
 8002668:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	4619      	mov	r1, r3
 800266e:	481b      	ldr	r0, [pc, #108]	; (80026dc <MX_ADC1_Init+0xcc>)
 8002670:	f001 f988 	bl	8003984 <HAL_ADC_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800267a:	f000 f995 	bl	80029a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800267e:	2301      	movs	r3, #1
 8002680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002682:	2302      	movs	r3, #2
 8002684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4814      	ldr	r0, [pc, #80]	; (80026dc <MX_ADC1_Init+0xcc>)
 800268c:	f001 f97a 	bl	8003984 <HAL_ADC_ConfigChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002696:	f000 f987 	bl	80029a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800269a:	2302      	movs	r3, #2
 800269c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800269e:	2303      	movs	r3, #3
 80026a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	4619      	mov	r1, r3
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <MX_ADC1_Init+0xcc>)
 80026a8:	f001 f96c 	bl	8003984 <HAL_ADC_ConfigChannel>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80026b2:	f000 f979 	bl	80029a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026b6:	2303      	movs	r3, #3
 80026b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026ba:	2304      	movs	r3, #4
 80026bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <MX_ADC1_Init+0xcc>)
 80026c4:	f001 f95e 	bl	8003984 <HAL_ADC_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80026ce:	f000 f96b 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000580 	.word	0x20000580
 80026e0:	40012400 	.word	0x40012400

080026e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MX_I2C1_Init+0x50>)
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <MX_I2C1_Init+0x54>)
 80026ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_I2C1_Init+0x50>)
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <MX_I2C1_Init+0x58>)
 80026f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <MX_I2C1_Init+0x50>)
 8002702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <MX_I2C1_Init+0x50>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_I2C1_Init+0x50>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002720:	4804      	ldr	r0, [pc, #16]	; (8002734 <MX_I2C1_Init+0x50>)
 8002722:	f002 f867 	bl	80047f4 <HAL_I2C_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800272c:	f000 f93c 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200004d0 	.word	0x200004d0
 8002738:	40005400 	.word	0x40005400
 800273c:	00061a80 	.word	0x00061a80

08002740 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <MX_I2C2_Init+0x50>)
 8002746:	4a13      	ldr	r2, [pc, #76]	; (8002794 <MX_I2C2_Init+0x54>)
 8002748:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <MX_I2C2_Init+0x50>)
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_I2C2_Init+0x58>)
 800274e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <MX_I2C2_Init+0x50>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <MX_I2C2_Init+0x50>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <MX_I2C2_Init+0x50>)
 800275e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002762:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <MX_I2C2_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <MX_I2C2_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002770:	4b07      	ldr	r3, [pc, #28]	; (8002790 <MX_I2C2_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <MX_I2C2_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_I2C2_Init+0x50>)
 800277e:	f002 f839 	bl	80047f4 <HAL_I2C_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002788:	f000 f90e 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000524 	.word	0x20000524
 8002794:	40005800 	.word	0x40005800
 8002798:	000186a0 	.word	0x000186a0

0800279c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a2:	f107 0320 	add.w	r3, r7, #32
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ac:	1d3b      	adds	r3, r7, #4
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	615a      	str	r2, [r3, #20]
 80027bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <MX_TIM2_Init+0xac>)
 80027c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <MX_TIM2_Init+0xac>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <MX_TIM2_Init+0xac>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <MX_TIM2_Init+0xac>)
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <MX_TIM2_Init+0xac>)
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <MX_TIM2_Init+0xac>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80027e4:	4818      	ldr	r0, [pc, #96]	; (8002848 <MX_TIM2_Init+0xac>)
 80027e6:	f003 fd57 	bl	8006298 <HAL_TIM_PWM_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80027f0:	f000 f8da 	bl	80029a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027fc:	f107 0320 	add.w	r3, r7, #32
 8002800:	4619      	mov	r1, r3
 8002802:	4811      	ldr	r0, [pc, #68]	; (8002848 <MX_TIM2_Init+0xac>)
 8002804:	f004 f906 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800280e:	f000 f8cb 	bl	80029a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002812:	2360      	movs	r3, #96	; 0x60
 8002814:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002822:	1d3b      	adds	r3, r7, #4
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	4807      	ldr	r0, [pc, #28]	; (8002848 <MX_TIM2_Init+0xac>)
 800282a:	f003 fe27 	bl	800647c <HAL_TIM_PWM_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002834:	f000 f8b8 	bl	80029a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002838:	4803      	ldr	r0, [pc, #12]	; (8002848 <MX_TIM2_Init+0xac>)
 800283a:	f000 fd8d 	bl	8003358 <HAL_TIM_MspPostInit>

}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	; 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000608 	.word	0x20000608

0800284c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <MX_DMA_Init+0x38>)
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <MX_DMA_Init+0x38>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6153      	str	r3, [r2, #20]
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <MX_DMA_Init+0x38>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	200b      	movs	r0, #11
 8002870:	f001 fb59 	bl	8003f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002874:	200b      	movs	r0, #11
 8002876:	f001 fb72 	bl	8003f5e <HAL_NVIC_EnableIRQ>

}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000

08002888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <MX_GPIO_Init+0x110>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	4a3d      	ldr	r2, [pc, #244]	; (8002998 <MX_GPIO_Init+0x110>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	6193      	str	r3, [r2, #24]
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <MX_GPIO_Init+0x110>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	4b38      	ldr	r3, [pc, #224]	; (8002998 <MX_GPIO_Init+0x110>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4a37      	ldr	r2, [pc, #220]	; (8002998 <MX_GPIO_Init+0x110>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6193      	str	r3, [r2, #24]
 80028c0:	4b35      	ldr	r3, [pc, #212]	; (8002998 <MX_GPIO_Init+0x110>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <MX_GPIO_Init+0x110>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a31      	ldr	r2, [pc, #196]	; (8002998 <MX_GPIO_Init+0x110>)
 80028d2:	f043 0308 	orr.w	r3, r3, #8
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <MX_GPIO_Init+0x110>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80028ea:	482c      	ldr	r0, [pc, #176]	; (800299c <MX_GPIO_Init+0x114>)
 80028ec:	f001 ff51 	bl	8004792 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80028f6:	482a      	ldr	r0, [pc, #168]	; (80029a0 <MX_GPIO_Init+0x118>)
 80028f8:	f001 ff4b 	bl	8004792 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028fc:	23f0      	movs	r3, #240	; 0xf0
 80028fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002904:	2301      	movs	r3, #1
 8002906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4824      	ldr	r0, [pc, #144]	; (80029a0 <MX_GPIO_Init+0x118>)
 8002910:	f001 fda4 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <MX_GPIO_Init+0x11c>)
 800291a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291c:	2301      	movs	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	4619      	mov	r1, r3
 8002926:	481d      	ldr	r0, [pc, #116]	; (800299c <MX_GPIO_Init+0x114>)
 8002928:	f001 fd98 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800292c:	2302      	movs	r3, #2
 800292e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002934:	2301      	movs	r3, #1
 8002936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 0310 	add.w	r3, r7, #16
 800293c:	4619      	mov	r1, r3
 800293e:	4817      	ldr	r0, [pc, #92]	; (800299c <MX_GPIO_Init+0x114>)
 8002940:	f001 fd8c 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002944:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	480f      	ldr	r0, [pc, #60]	; (800299c <MX_GPIO_Init+0x114>)
 800295e:	f001 fd7d 	bl	800445c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002962:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2302      	movs	r3, #2
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	4619      	mov	r1, r3
 800297a:	4809      	ldr	r0, [pc, #36]	; (80029a0 <MX_GPIO_Init+0x118>)
 800297c:	f001 fd6e 	bl	800445c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2101      	movs	r1, #1
 8002984:	2006      	movs	r0, #6
 8002986:	f001 face 	bl	8003f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800298a:	2006      	movs	r0, #6
 800298c:	f001 fae7 	bl	8003f5e <HAL_NVIC_EnableIRQ>

}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	40010c00 	.word	0x40010c00
 80029a0:	40010800 	.word	0x40010800
 80029a4:	10210000 	.word	0x10210000

080029a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029ac:	b672      	cpsid	i
}
 80029ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b0:	e7fe      	b.n	80029b0 <Error_Handler+0x8>
	...

080029b4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80029ba:	f000 fb21 	bl	8003000 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80029be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80029c2:	2201      	movs	r2, #1
 80029c4:	2178      	movs	r1, #120	; 0x78
 80029c6:	485b      	ldr	r0, [pc, #364]	; (8002b34 <SSD1306_Init+0x180>)
 80029c8:	f002 f956 	bl	8004c78 <HAL_I2C_IsDeviceReady>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e0a9      	b.n	8002b2a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80029d6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80029da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029dc:	e002      	b.n	80029e4 <SSD1306_Init+0x30>
		p--;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f9      	bne.n	80029de <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80029ea:	22ae      	movs	r2, #174	; 0xae
 80029ec:	2100      	movs	r1, #0
 80029ee:	2078      	movs	r0, #120	; 0x78
 80029f0:	f000 fb62 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80029f4:	2220      	movs	r2, #32
 80029f6:	2100      	movs	r1, #0
 80029f8:	2078      	movs	r0, #120	; 0x78
 80029fa:	f000 fb5d 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80029fe:	2210      	movs	r2, #16
 8002a00:	2100      	movs	r1, #0
 8002a02:	2078      	movs	r0, #120	; 0x78
 8002a04:	f000 fb58 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002a08:	22b0      	movs	r2, #176	; 0xb0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2078      	movs	r0, #120	; 0x78
 8002a0e:	f000 fb53 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002a12:	22c8      	movs	r2, #200	; 0xc8
 8002a14:	2100      	movs	r1, #0
 8002a16:	2078      	movs	r0, #120	; 0x78
 8002a18:	f000 fb4e 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2078      	movs	r0, #120	; 0x78
 8002a22:	f000 fb49 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002a26:	2210      	movs	r2, #16
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2078      	movs	r0, #120	; 0x78
 8002a2c:	f000 fb44 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	2100      	movs	r1, #0
 8002a34:	2078      	movs	r0, #120	; 0x78
 8002a36:	f000 fb3f 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002a3a:	2281      	movs	r2, #129	; 0x81
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2078      	movs	r0, #120	; 0x78
 8002a40:	f000 fb3a 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	2100      	movs	r1, #0
 8002a48:	2078      	movs	r0, #120	; 0x78
 8002a4a:	f000 fb35 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002a4e:	22a1      	movs	r2, #161	; 0xa1
 8002a50:	2100      	movs	r1, #0
 8002a52:	2078      	movs	r0, #120	; 0x78
 8002a54:	f000 fb30 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002a58:	22a6      	movs	r2, #166	; 0xa6
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2078      	movs	r0, #120	; 0x78
 8002a5e:	f000 fb2b 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002a62:	22a8      	movs	r2, #168	; 0xa8
 8002a64:	2100      	movs	r1, #0
 8002a66:	2078      	movs	r0, #120	; 0x78
 8002a68:	f000 fb26 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002a6c:	223f      	movs	r2, #63	; 0x3f
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2078      	movs	r0, #120	; 0x78
 8002a72:	f000 fb21 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a76:	22a4      	movs	r2, #164	; 0xa4
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2078      	movs	r0, #120	; 0x78
 8002a7c:	f000 fb1c 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002a80:	22d3      	movs	r2, #211	; 0xd3
 8002a82:	2100      	movs	r1, #0
 8002a84:	2078      	movs	r0, #120	; 0x78
 8002a86:	f000 fb17 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2078      	movs	r0, #120	; 0x78
 8002a90:	f000 fb12 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a94:	22d5      	movs	r2, #213	; 0xd5
 8002a96:	2100      	movs	r1, #0
 8002a98:	2078      	movs	r0, #120	; 0x78
 8002a9a:	f000 fb0d 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002a9e:	22f0      	movs	r2, #240	; 0xf0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2078      	movs	r0, #120	; 0x78
 8002aa4:	f000 fb08 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002aa8:	22d9      	movs	r2, #217	; 0xd9
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2078      	movs	r0, #120	; 0x78
 8002aae:	f000 fb03 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002ab2:	2222      	movs	r2, #34	; 0x22
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2078      	movs	r0, #120	; 0x78
 8002ab8:	f000 fafe 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002abc:	22da      	movs	r2, #218	; 0xda
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2078      	movs	r0, #120	; 0x78
 8002ac2:	f000 faf9 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002ac6:	2212      	movs	r2, #18
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2078      	movs	r0, #120	; 0x78
 8002acc:	f000 faf4 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002ad0:	22db      	movs	r2, #219	; 0xdb
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2078      	movs	r0, #120	; 0x78
 8002ad6:	f000 faef 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002ada:	2220      	movs	r2, #32
 8002adc:	2100      	movs	r1, #0
 8002ade:	2078      	movs	r0, #120	; 0x78
 8002ae0:	f000 faea 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002ae4:	228d      	movs	r2, #141	; 0x8d
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2078      	movs	r0, #120	; 0x78
 8002aea:	f000 fae5 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002aee:	2214      	movs	r2, #20
 8002af0:	2100      	movs	r1, #0
 8002af2:	2078      	movs	r0, #120	; 0x78
 8002af4:	f000 fae0 	bl	80030b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002af8:	22af      	movs	r2, #175	; 0xaf
 8002afa:	2100      	movs	r1, #0
 8002afc:	2078      	movs	r0, #120	; 0x78
 8002afe:	f000 fadb 	bl	80030b8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002b02:	222e      	movs	r2, #46	; 0x2e
 8002b04:	2100      	movs	r1, #0
 8002b06:	2078      	movs	r0, #120	; 0x78
 8002b08:	f000 fad6 	bl	80030b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f000 f843 	bl	8002b98 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002b12:	f000 f813 	bl	8002b3c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <SSD1306_Init+0x184>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <SSD1306_Init+0x184>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <SSD1306_Init+0x184>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200004d0 	.word	0x200004d0
 8002b38:	200004c4 	.word	0x200004c4

08002b3c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002b42:	2300      	movs	r3, #0
 8002b44:	71fb      	strb	r3, [r7, #7]
 8002b46:	e01d      	b.n	8002b84 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	3b50      	subs	r3, #80	; 0x50
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2100      	movs	r1, #0
 8002b52:	2078      	movs	r0, #120	; 0x78
 8002b54:	f000 fab0 	bl	80030b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2078      	movs	r0, #120	; 0x78
 8002b5e:	f000 faab 	bl	80030b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002b62:	2210      	movs	r2, #16
 8002b64:	2100      	movs	r1, #0
 8002b66:	2078      	movs	r0, #120	; 0x78
 8002b68:	f000 faa6 	bl	80030b8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	01db      	lsls	r3, r3, #7
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <SSD1306_UpdateScreen+0x58>)
 8002b72:	441a      	add	r2, r3
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	2078      	movs	r0, #120	; 0x78
 8002b7a:	f000 fa55 	bl	8003028 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	3301      	adds	r3, #1
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b07      	cmp	r3, #7
 8002b88:	d9de      	bls.n	8002b48 <SSD1306_UpdateScreen+0xc>
	}
}
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200000c4 	.word	0x200000c4

08002b98 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <SSD1306_Fill+0x14>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e000      	b.n	8002bae <SSD1306_Fill+0x16>
 8002bac:	23ff      	movs	r3, #255	; 0xff
 8002bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4803      	ldr	r0, [pc, #12]	; (8002bc4 <SSD1306_Fill+0x2c>)
 8002bb6:	f003 ffcf 	bl	8006b58 <memset>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200000c4 	.word	0x200000c4

08002bc8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	80bb      	strh	r3, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	70fb      	strb	r3, [r7, #3]
	if (
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8002bde:	d848      	bhi.n	8002c72 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002be0:	88bb      	ldrh	r3, [r7, #4]
 8002be2:	2b3f      	cmp	r3, #63	; 0x3f
 8002be4:	d845      	bhi.n	8002c72 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <SSD1306_DrawPixel+0xb4>)
 8002be8:	791b      	ldrb	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d006      	beq.n	8002bfc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d11a      	bne.n	8002c38 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	88bb      	ldrh	r3, [r7, #4]
 8002c06:	08db      	lsrs	r3, r3, #3
 8002c08:	b298      	uxth	r0, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	01db      	lsls	r3, r3, #7
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <SSD1306_DrawPixel+0xb8>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	b25a      	sxtb	r2, r3
 8002c16:	88bb      	ldrh	r3, [r7, #4]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b259      	sxtb	r1, r3
 8002c28:	88fa      	ldrh	r2, [r7, #6]
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	01db      	lsls	r3, r3, #7
 8002c2e:	4413      	add	r3, r2
 8002c30:	b2c9      	uxtb	r1, r1
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <SSD1306_DrawPixel+0xb8>)
 8002c34:	54d1      	strb	r1, [r2, r3]
 8002c36:	e01d      	b.n	8002c74 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002c38:	88fa      	ldrh	r2, [r7, #6]
 8002c3a:	88bb      	ldrh	r3, [r7, #4]
 8002c3c:	08db      	lsrs	r3, r3, #3
 8002c3e:	b298      	uxth	r0, r3
 8002c40:	4603      	mov	r3, r0
 8002c42:	01db      	lsls	r3, r3, #7
 8002c44:	4413      	add	r3, r2
 8002c46:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <SSD1306_DrawPixel+0xb8>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	b25a      	sxtb	r2, r3
 8002c4c:	88bb      	ldrh	r3, [r7, #4]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b259      	sxtb	r1, r3
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	4603      	mov	r3, r0
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2c9      	uxtb	r1, r1
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <SSD1306_DrawPixel+0xb8>)
 8002c6e:	54d1      	strb	r1, [r2, r3]
 8002c70:	e000      	b.n	8002c74 <SSD1306_DrawPixel+0xac>
		return;
 8002c72:	bf00      	nop
	}
}
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	200004c4 	.word	0x200004c4
 8002c80:	200000c4 	.word	0x200000c4

08002c84 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	80fb      	strh	r3, [r7, #6]
 8002c90:	4613      	mov	r3, r2
 8002c92:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002c94:	4a05      	ldr	r2, [pc, #20]	; (8002cac <SSD1306_GotoXY+0x28>)
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <SSD1306_GotoXY+0x28>)
 8002c9c:	88bb      	ldrh	r3, [r7, #4]
 8002c9e:	8053      	strh	r3, [r2, #2]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	200004c4 	.word	0x200004c4

08002cb0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	71fb      	strb	r3, [r7, #7]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	; (8002dac <SSD1306_Putc+0xfc>)
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
	if (
 8002ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8002cce:	dc07      	bgt.n	8002ce0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <SSD1306_Putc+0xfc>)
 8002cd2:	885b      	ldrh	r3, [r3, #2]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	785b      	ldrb	r3, [r3, #1]
 8002cda:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002cdc:	2b3f      	cmp	r3, #63	; 0x3f
 8002cde:	dd01      	ble.n	8002ce4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e05e      	b.n	8002da2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e04b      	b.n	8002d82 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	3b20      	subs	r3, #32
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	7849      	ldrb	r1, [r1, #1]
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	440b      	add	r3, r1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e030      	b.n	8002d70 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d010      	beq.n	8002d40 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <SSD1306_Putc+0xfc>)
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	b298      	uxth	r0, r3
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <SSD1306_Putc+0xfc>)
 8002d2c:	885a      	ldrh	r2, [r3, #2]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	79ba      	ldrb	r2, [r7, #6]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7ff ff45 	bl	8002bc8 <SSD1306_DrawPixel>
 8002d3e:	e014      	b.n	8002d6a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <SSD1306_Putc+0xfc>)
 8002d42:	881a      	ldrh	r2, [r3, #0]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	b298      	uxth	r0, r3
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <SSD1306_Putc+0xfc>)
 8002d4e:	885a      	ldrh	r2, [r3, #2]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	b299      	uxth	r1, r3
 8002d58:	79bb      	ldrb	r3, [r7, #6]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	f7ff ff2f 	bl	8002bc8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d3c8      	bcc.n	8002d0e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	785b      	ldrb	r3, [r3, #1]
 8002d86:	461a      	mov	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d3ad      	bcc.n	8002cea <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	; (8002dac <SSD1306_Putc+0xfc>)
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <SSD1306_Putc+0xfc>)
 8002d9e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002da0:	79fb      	ldrb	r3, [r7, #7]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200004c4 	.word	0x200004c4

08002db0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002dbe:	e012      	b.n	8002de6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff71 	bl	8002cb0 <SSD1306_Putc>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d002      	beq.n	8002de0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	e008      	b.n	8002df2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3301      	adds	r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e8      	bne.n	8002dc0 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002dfa:	b590      	push	{r4, r7, lr}
 8002dfc:	b087      	sub	sp, #28
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4604      	mov	r4, r0
 8002e02:	4608      	mov	r0, r1
 8002e04:	4611      	mov	r1, r2
 8002e06:	461a      	mov	r2, r3
 8002e08:	4623      	mov	r3, r4
 8002e0a:	80fb      	strh	r3, [r7, #6]
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	80bb      	strh	r3, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e1c:	d901      	bls.n	8002e22 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002e1e:	237f      	movs	r3, #127	; 0x7f
 8002e20:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	2b7f      	cmp	r3, #127	; 0x7f
 8002e26:	d901      	bls.n	8002e2c <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002e28:	237f      	movs	r3, #127	; 0x7f
 8002e2a:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	2b3f      	cmp	r3, #63	; 0x3f
 8002e30:	d901      	bls.n	8002e36 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002e32:	233f      	movs	r3, #63	; 0x3f
 8002e34:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002e36:	883b      	ldrh	r3, [r7, #0]
 8002e38:	2b3f      	cmp	r3, #63	; 0x3f
 8002e3a:	d901      	bls.n	8002e40 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8002e3c:	233f      	movs	r3, #63	; 0x3f
 8002e3e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d205      	bcs.n	8002e54 <SSD1306_DrawLine+0x5a>
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	e004      	b.n	8002e5e <SSD1306_DrawLine+0x64>
 8002e54:	88fa      	ldrh	r2, [r7, #6]
 8002e56:	887b      	ldrh	r3, [r7, #2]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002e60:	88ba      	ldrh	r2, [r7, #4]
 8002e62:	883b      	ldrh	r3, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d205      	bcs.n	8002e74 <SSD1306_DrawLine+0x7a>
 8002e68:	883a      	ldrh	r2, [r7, #0]
 8002e6a:	88bb      	ldrh	r3, [r7, #4]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	e004      	b.n	8002e7e <SSD1306_DrawLine+0x84>
 8002e74:	88ba      	ldrh	r2, [r7, #4]
 8002e76:	883b      	ldrh	r3, [r7, #0]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d201      	bcs.n	8002e8c <SSD1306_DrawLine+0x92>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e001      	b.n	8002e90 <SSD1306_DrawLine+0x96>
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002e92:	88ba      	ldrh	r2, [r7, #4]
 8002e94:	883b      	ldrh	r3, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d201      	bcs.n	8002e9e <SSD1306_DrawLine+0xa4>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e001      	b.n	8002ea2 <SSD1306_DrawLine+0xa8>
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002ea4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002ea8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dd06      	ble.n	8002ebe <SSD1306_DrawLine+0xc4>
 8002eb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eb4:	0fda      	lsrs	r2, r3, #31
 8002eb6:	4413      	add	r3, r2
 8002eb8:	105b      	asrs	r3, r3, #1
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	e006      	b.n	8002ecc <SSD1306_DrawLine+0xd2>
 8002ebe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ec2:	0fda      	lsrs	r2, r3, #31
 8002ec4:	4413      	add	r3, r2
 8002ec6:	105b      	asrs	r3, r3, #1
 8002ec8:	425b      	negs	r3, r3
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8002ece:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d129      	bne.n	8002f2a <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002ed6:	883a      	ldrh	r2, [r7, #0]
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d205      	bcs.n	8002eea <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8002ede:	883b      	ldrh	r3, [r7, #0]
 8002ee0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002ee6:	893b      	ldrh	r3, [r7, #8]
 8002ee8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d205      	bcs.n	8002efe <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002efa:	893b      	ldrh	r3, [r7, #8]
 8002efc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002efe:	88bb      	ldrh	r3, [r7, #4]
 8002f00:	82bb      	strh	r3, [r7, #20]
 8002f02:	e00c      	b.n	8002f1e <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002f04:	8ab9      	ldrh	r1, [r7, #20]
 8002f06:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fe5b 	bl	8002bc8 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002f12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	82bb      	strh	r3, [r7, #20]
 8002f1e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f22:	883b      	ldrh	r3, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	dded      	ble.n	8002f04 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002f28:	e05f      	b.n	8002fea <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8002f2a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d129      	bne.n	8002f86 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002f32:	883a      	ldrh	r2, [r7, #0]
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d205      	bcs.n	8002f46 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002f3a:	883b      	ldrh	r3, [r7, #0]
 8002f3c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002f3e:	88bb      	ldrh	r3, [r7, #4]
 8002f40:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002f42:	893b      	ldrh	r3, [r7, #8]
 8002f44:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d205      	bcs.n	8002f5a <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	82bb      	strh	r3, [r7, #20]
 8002f5e:	e00c      	b.n	8002f7a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002f60:	8abb      	ldrh	r3, [r7, #20]
 8002f62:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f66:	88b9      	ldrh	r1, [r7, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fe2d 	bl	8002bc8 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002f6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	82bb      	strh	r3, [r7, #20]
 8002f7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dded      	ble.n	8002f60 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002f84:	e031      	b.n	8002fea <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002f86:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002f8a:	88b9      	ldrh	r1, [r7, #4]
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fe1a 	bl	8002bc8 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002f94:	88fa      	ldrh	r2, [r7, #6]
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d103      	bne.n	8002fa4 <SSD1306_DrawLine+0x1aa>
 8002f9c:	88ba      	ldrh	r2, [r7, #4]
 8002f9e:	883b      	ldrh	r3, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d021      	beq.n	8002fe8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002fa8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dd08      	ble.n	8002fc8 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002fb6:	8afa      	ldrh	r2, [r7, #22]
 8002fb8:	8a3b      	ldrh	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002fc0:	89fa      	ldrh	r2, [r7, #14]
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002fc8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fcc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	dad8      	bge.n	8002f86 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002fd4:	8afa      	ldrh	r2, [r7, #22]
 8002fd6:	8a7b      	ldrh	r3, [r7, #18]
 8002fd8:	4413      	add	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002fde:	89ba      	ldrh	r2, [r7, #12]
 8002fe0:	88bb      	ldrh	r3, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002fe6:	e7ce      	b.n	8002f86 <SSD1306_DrawLine+0x18c>
			break;
 8002fe8:	bf00      	nop
		} 
	}
}
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd90      	pop	{r4, r7, pc}

08002ff0 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff fdcf 	bl	8002b98 <SSD1306_Fill>
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <ssd1306_I2C_Init+0x24>)
 8003008:	607b      	str	r3, [r7, #4]
	while(p>0)
 800300a:	e002      	b.n	8003012 <ssd1306_I2C_Init+0x12>
		p--;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f9      	bne.n	800300c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	0003d090 	.word	0x0003d090

08003028 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b0c7      	sub	sp, #284	; 0x11c
 800302c:	af02      	add	r7, sp, #8
 800302e:	4604      	mov	r4, r0
 8003030:	4608      	mov	r0, r1
 8003032:	4639      	mov	r1, r7
 8003034:	600a      	str	r2, [r1, #0]
 8003036:	4619      	mov	r1, r3
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	4622      	mov	r2, r4
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	1dbb      	adds	r3, r7, #6
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	460a      	mov	r2, r1
 8003048:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	1dba      	adds	r2, r7, #6
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003054:	2300      	movs	r3, #0
 8003056:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800305a:	e010      	b.n	800307e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800305c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003060:	463a      	mov	r2, r7
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	441a      	add	r2, r3
 8003066:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800306a:	3301      	adds	r3, #1
 800306c:	7811      	ldrb	r1, [r2, #0]
 800306e:	f107 020c 	add.w	r2, r7, #12
 8003072:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003074:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003078:	3301      	adds	r3, #1
 800307a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800307e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003082:	b29b      	uxth	r3, r3
 8003084:	1d3a      	adds	r2, r7, #4
 8003086:	8812      	ldrh	r2, [r2, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d8e7      	bhi.n	800305c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800308c:	1dfb      	adds	r3, r7, #7
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b299      	uxth	r1, r3
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	f107 020c 	add.w	r2, r7, #12
 800309e:	200a      	movs	r0, #10
 80030a0:	9000      	str	r0, [sp, #0]
 80030a2:	4804      	ldr	r0, [pc, #16]	; (80030b4 <ssd1306_I2C_WriteMulti+0x8c>)
 80030a4:	f001 fcea 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 80030a8:	bf00      	nop
 80030aa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd90      	pop	{r4, r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200004d0 	.word	0x200004d0

080030b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af02      	add	r7, sp, #8
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
 80030c2:	460b      	mov	r3, r1
 80030c4:	71bb      	strb	r3, [r7, #6]
 80030c6:	4613      	mov	r3, r2
 80030c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80030ca:	79bb      	ldrb	r3, [r7, #6]
 80030cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80030ce:	797b      	ldrb	r3, [r7, #5]
 80030d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	b299      	uxth	r1, r3
 80030d6:	f107 020c 	add.w	r2, r7, #12
 80030da:	230a      	movs	r3, #10
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2302      	movs	r3, #2
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <ssd1306_I2C_Write+0x38>)
 80030e2:	f001 fccb 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200004d0 	.word	0x200004d0

080030f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <HAL_MspInit+0x5c>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	4a14      	ldr	r2, [pc, #80]	; (8003150 <HAL_MspInit+0x5c>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6193      	str	r3, [r2, #24]
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_MspInit+0x5c>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_MspInit+0x5c>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_MspInit+0x5c>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <HAL_MspInit+0x5c>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_MspInit+0x60>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	4a04      	ldr	r2, [pc, #16]	; (8003154 <HAL_MspInit+0x60>)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40021000 	.word	0x40021000
 8003154:	40010000 	.word	0x40010000

08003158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0310 	add.w	r3, r7, #16
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a28      	ldr	r2, [pc, #160]	; (8003214 <HAL_ADC_MspInit+0xbc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d149      	bne.n	800320c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_ADC_MspInit+0xc0>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <HAL_ADC_MspInit+0xc0>)
 800317e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003182:	6193      	str	r3, [r2, #24]
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_ADC_MspInit+0xc0>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <HAL_ADC_MspInit+0xc0>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	4a20      	ldr	r2, [pc, #128]	; (8003218 <HAL_ADC_MspInit+0xc0>)
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	6193      	str	r3, [r2, #24]
 800319c:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_ADC_MspInit+0xc0>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80031a8:	230f      	movs	r3, #15
 80031aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ac:	2303      	movs	r3, #3
 80031ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4619      	mov	r1, r3
 80031b6:	4819      	ldr	r0, [pc, #100]	; (800321c <HAL_ADC_MspInit+0xc4>)
 80031b8:	f001 f950 	bl	800445c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031be:	4a19      	ldr	r2, [pc, #100]	; (8003224 <HAL_ADC_MspInit+0xcc>)
 80031c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c8:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031ce:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031e6:	2220      	movs	r2, #32
 80031e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 80031f2:	f000 fecf 	bl	8003f94 <HAL_DMA_Init>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80031fc:	f7ff fbd4 	bl	80029a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a07      	ldr	r2, [pc, #28]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 8003204:	621a      	str	r2, [r3, #32]
 8003206:	4a06      	ldr	r2, [pc, #24]	; (8003220 <HAL_ADC_MspInit+0xc8>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800320c:	bf00      	nop
 800320e:	3720      	adds	r7, #32
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40012400 	.word	0x40012400
 8003218:	40021000 	.word	0x40021000
 800321c:	40010800 	.word	0x40010800
 8003220:	200005c0 	.word	0x200005c0
 8003224:	40020008 	.word	0x40020008

08003228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_I2C_MspInit+0xe8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d12c      	bne.n	80032a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003248:	4b32      	ldr	r3, [pc, #200]	; (8003314 <HAL_I2C_MspInit+0xec>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_I2C_MspInit+0xec>)
 800324e:	f043 0308 	orr.w	r3, r3, #8
 8003252:	6193      	str	r3, [r2, #24]
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_I2C_MspInit+0xec>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003260:	23c0      	movs	r3, #192	; 0xc0
 8003262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003264:	2312      	movs	r3, #18
 8003266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003268:	2303      	movs	r3, #3
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f107 0318 	add.w	r3, r7, #24
 8003270:	4619      	mov	r1, r3
 8003272:	4829      	ldr	r0, [pc, #164]	; (8003318 <HAL_I2C_MspInit+0xf0>)
 8003274:	f001 f8f2 	bl	800445c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <HAL_I2C_MspInit+0xec>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_I2C_MspInit+0xec>)
 800327e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003282:	61d3      	str	r3, [r2, #28]
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_I2C_MspInit+0xec>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	2020      	movs	r0, #32
 8003296:	f000 fe46 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800329a:	2020      	movs	r0, #32
 800329c:	f000 fe5f 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80032a0:	e031      	b.n	8003306 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_I2C_MspInit+0xf4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d12c      	bne.n	8003306 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_I2C_MspInit+0xec>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_I2C_MspInit+0xec>)
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_I2C_MspInit+0xec>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ca:	2312      	movs	r3, #18
 80032cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	f107 0318 	add.w	r3, r7, #24
 80032d6:	4619      	mov	r1, r3
 80032d8:	480f      	ldr	r0, [pc, #60]	; (8003318 <HAL_I2C_MspInit+0xf0>)
 80032da:	f001 f8bf 	bl	800445c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <HAL_I2C_MspInit+0xec>)
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	4a0c      	ldr	r2, [pc, #48]	; (8003314 <HAL_I2C_MspInit+0xec>)
 80032e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032e8:	61d3      	str	r3, [r2, #28]
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <HAL_I2C_MspInit+0xec>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2100      	movs	r1, #0
 80032fa:	2022      	movs	r0, #34	; 0x22
 80032fc:	f000 fe13 	bl	8003f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003300:	2022      	movs	r0, #34	; 0x22
 8003302:	f000 fe2c 	bl	8003f5e <HAL_NVIC_EnableIRQ>
}
 8003306:	bf00      	nop
 8003308:	3728      	adds	r7, #40	; 0x28
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40005400 	.word	0x40005400
 8003314:	40021000 	.word	0x40021000
 8003318:	40010c00 	.word	0x40010c00
 800331c:	40005800 	.word	0x40005800

08003320 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d10b      	bne.n	800334a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_TIM_PWM_MspInit+0x34>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_TIM_PWM_MspInit+0x34>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	61d3      	str	r3, [r2, #28]
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_TIM_PWM_MspInit+0x34>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d12a      	bne.n	80033ce <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_TIM_MspPostInit+0x80>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <HAL_TIM_MspPostInit+0x80>)
 800337e:	f043 0304 	orr.w	r3, r3, #4
 8003382:	6193      	str	r3, [r2, #24]
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_TIM_MspPostInit+0x80>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003394:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4619      	mov	r1, r3
 80033a4:	480d      	ldr	r0, [pc, #52]	; (80033dc <HAL_TIM_MspPostInit+0x84>)
 80033a6:	f001 f859 	bl	800445c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_TIM_MspPostInit+0x88>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_TIM_MspPostInit+0x88>)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033ce:	bf00      	nop
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40010800 	.word	0x40010800
 80033e0:	40010000 	.word	0x40010000

080033e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <NMI_Handler+0x4>

080033ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <HardFault_Handler+0x4>

080033f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <MemManage_Handler+0x4>

080033f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fa:	e7fe      	b.n	80033fa <BusFault_Handler+0x4>

080033fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003400:	e7fe      	b.n	8003400 <UsageFault_Handler+0x4>

08003402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800341a:	b480      	push	{r7}
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800342a:	f000 f899 	bl	8003560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}

08003432 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003436:	2001      	movs	r0, #1
 8003438:	f001 f9c4 	bl	80047c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}

08003440 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <DMA1_Channel1_IRQHandler+0x10>)
 8003446:	f000 fed5 	bl	80041f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200005c0 	.word	0x200005c0

08003454 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <I2C1_ER_IRQHandler+0x10>)
 800345a:	f001 fd3b 	bl	8004ed4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200004d0 	.word	0x200004d0

08003468 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <I2C2_ER_IRQHandler+0x10>)
 800346e:	f001 fd31 	bl	8004ed4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000524 	.word	0x20000524

0800347c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003488:	480c      	ldr	r0, [pc, #48]	; (80034bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800348a:	490d      	ldr	r1, [pc, #52]	; (80034c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003490:	e002      	b.n	8003498 <LoopCopyDataInit>

08003492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003496:	3304      	adds	r3, #4

08003498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800349c:	d3f9      	bcc.n	8003492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034a0:	4c0a      	ldr	r4, [pc, #40]	; (80034cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a4:	e001      	b.n	80034aa <LoopFillZerobss>

080034a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a8:	3204      	adds	r2, #4

080034aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ac:	d3fb      	bcc.n	80034a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034ae:	f7ff ffe5 	bl	800347c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034b2:	f003 fb13 	bl	8006adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034b6:	f7fe fefb 	bl	80022b0 <main>
  bx lr
 80034ba:	4770      	bx	lr
  ldr r0, =_sdata
 80034bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80034c4:	08007de8 	.word	0x08007de8
  ldr r2, =_sbss
 80034c8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80034cc:	20000654 	.word	0x20000654

080034d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034d0:	e7fe      	b.n	80034d0 <ADC1_2_IRQHandler>
	...

080034d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_Init+0x28>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_Init+0x28>)
 80034de:	f043 0310 	orr.w	r3, r3, #16
 80034e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f000 fd13 	bl	8003f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ea:	200f      	movs	r0, #15
 80034ec:	f000 f808 	bl	8003500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f0:	f7ff fe00 	bl	80030f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40022000 	.word	0x40022000

08003500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_InitTick+0x54>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_InitTick+0x58>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003516:	fbb3 f3f1 	udiv	r3, r3, r1
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fd2b 	bl	8003f7a <HAL_SYSTICK_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e00e      	b.n	800354c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d80a      	bhi.n	800354a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003534:	2200      	movs	r2, #0
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f000 fcf3 	bl	8003f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003540:	4a06      	ldr	r2, [pc, #24]	; (800355c <HAL_InitTick+0x5c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000010 	.word	0x20000010
 8003558:	20000018 	.word	0x20000018
 800355c:	20000014 	.word	0x20000014

08003560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_IncTick+0x1c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_IncTick+0x20>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4413      	add	r3, r2
 8003570:	4a03      	ldr	r2, [pc, #12]	; (8003580 <HAL_IncTick+0x20>)
 8003572:	6013      	str	r3, [r2, #0]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	20000018 	.word	0x20000018
 8003580:	20000650 	.word	0x20000650

08003584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return uwTick;
 8003588:	4b02      	ldr	r3, [pc, #8]	; (8003594 <HAL_GetTick+0x10>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000650 	.word	0x20000650

08003598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7ff fff0 	bl	8003584 <HAL_GetTick>
 80035a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d005      	beq.n	80035be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_Delay+0x44>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035be:	bf00      	nop
 80035c0:	f7ff ffe0 	bl	8003584 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d8f7      	bhi.n	80035c0 <HAL_Delay+0x28>
  {
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000018 	.word	0x20000018

080035e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0be      	b.n	8003780 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fd9a 	bl	8003158 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 faff 	bl	8003c28 <ADC_ConversionStop_Disable>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 8099 	bne.w	800376e <HAL_ADC_Init+0x18e>
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 8095 	bne.w	800376e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800364c:	f023 0302 	bic.w	r3, r3, #2
 8003650:	f043 0202 	orr.w	r2, r3, #2
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003660:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7b1b      	ldrb	r3, [r3, #12]
 8003666:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003668:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003678:	d003      	beq.n	8003682 <HAL_ADC_Init+0xa2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_ADC_Init+0xa8>
 8003682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003686:	e000      	b.n	800368a <HAL_ADC_Init+0xaa>
 8003688:	2300      	movs	r3, #0
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	7d1b      	ldrb	r3, [r3, #20]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d119      	bne.n	80036cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7b1b      	ldrb	r3, [r3, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	035a      	lsls	r2, r3, #13
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	e00b      	b.n	80036cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_ADC_Init+0x1a8>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	430b      	orrs	r3, r1
 80036f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fc:	d003      	beq.n	8003706 <HAL_ADC_Init+0x126>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d104      	bne.n	8003710 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	3b01      	subs	r3, #1
 800370c:	051b      	lsls	r3, r3, #20
 800370e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	430a      	orrs	r2, r1
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	4b18      	ldr	r3, [pc, #96]	; (800378c <HAL_ADC_Init+0x1ac>)
 800372c:	4013      	ands	r3, r2
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	429a      	cmp	r2, r3
 8003732:	d10b      	bne.n	800374c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	f043 0201 	orr.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800374a:	e018      	b.n	800377e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	f023 0312 	bic.w	r3, r3, #18
 8003754:	f043 0210 	orr.w	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800376c:	e007      	b.n	800377e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	f043 0210 	orr.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	ffe1f7fd 	.word	0xffe1f7fd
 800378c:	ff1f0efe 	.word	0xff1f0efe

08003790 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a64      	ldr	r2, [pc, #400]	; (8003938 <HAL_ADC_Start_DMA+0x1a8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <HAL_ADC_Start_DMA+0x24>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a63      	ldr	r2, [pc, #396]	; (800393c <HAL_ADC_Start_DMA+0x1ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d106      	bne.n	80037c2 <HAL_ADC_Start_DMA+0x32>
 80037b4:	4b60      	ldr	r3, [pc, #384]	; (8003938 <HAL_ADC_Start_DMA+0x1a8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 80b3 	bne.w	8003928 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_Start_DMA+0x40>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0ae      	b.n	800392e <HAL_ADC_Start_DMA+0x19e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f9cb 	bl	8003b74 <ADC_Enable>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f040 809a 	bne.w	800391e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a4e      	ldr	r2, [pc, #312]	; (800393c <HAL_ADC_Start_DMA+0x1ac>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d105      	bne.n	8003814 <HAL_ADC_Start_DMA+0x84>
 8003808:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_ADC_Start_DMA+0x1a8>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d115      	bne.n	8003840 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d026      	beq.n	800387c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003836:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800383e:	e01d      	b.n	800387c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a39      	ldr	r2, [pc, #228]	; (8003938 <HAL_ADC_Start_DMA+0x1a8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_ADC_Start_DMA+0xd0>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a38      	ldr	r2, [pc, #224]	; (800393c <HAL_ADC_Start_DMA+0x1ac>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10d      	bne.n	800387c <HAL_ADC_Start_DMA+0xec>
 8003860:	4b35      	ldr	r3, [pc, #212]	; (8003938 <HAL_ADC_Start_DMA+0x1a8>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003874:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f023 0206 	bic.w	r2, r3, #6
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
 8003894:	e002      	b.n	800389c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_ADC_Start_DMA+0x1b0>)
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_ADC_Start_DMA+0x1b4>)
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	4a23      	ldr	r2, [pc, #140]	; (8003948 <HAL_ADC_Start_DMA+0x1b8>)
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0202 	mvn.w	r2, #2
 80038c4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a18      	ldr	r0, [r3, #32]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	334c      	adds	r3, #76	; 0x4c
 80038e0:	4619      	mov	r1, r3
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f000 fbaf 	bl	8004048 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80038f8:	d108      	bne.n	800390c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003908:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800390a:	e00f      	b.n	800392c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800391a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800391c:	e006      	b.n	800392c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003926:	e001      	b.n	800392c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40012400 	.word	0x40012400
 800393c:	40012800 	.word	0x40012800
 8003940:	08003cab 	.word	0x08003cab
 8003944:	08003d27 	.word	0x08003d27
 8003948:	08003d43 	.word	0x08003d43

0800394c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
	...

08003984 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_ADC_ConfigChannel+0x20>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e0dc      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x1da>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d81c      	bhi.n	80039ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	3b05      	subs	r3, #5
 80039c6:	221f      	movs	r2, #31
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	43db      	mvns	r3, r3
 80039ce:	4019      	ands	r1, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	3b05      	subs	r3, #5
 80039e0:	fa00 f203 	lsl.w	r2, r0, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34
 80039ec:	e03c      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d81c      	bhi.n	8003a30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b23      	subs	r3, #35	; 0x23
 8003a08:	221f      	movs	r2, #31
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	4019      	ands	r1, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b23      	subs	r3, #35	; 0x23
 8003a22:	fa00 f203 	lsl.w	r2, r0, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2e:	e01b      	b.n	8003a68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b41      	subs	r3, #65	; 0x41
 8003a42:	221f      	movs	r2, #31
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	4019      	ands	r1, r3
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	3b41      	subs	r3, #65	; 0x41
 8003a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d91c      	bls.n	8003aaa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68d9      	ldr	r1, [r3, #12]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b1e      	subs	r3, #30
 8003a82:	2207      	movs	r2, #7
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	4019      	ands	r1, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6898      	ldr	r0, [r3, #8]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	3b1e      	subs	r3, #30
 8003a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	e019      	b.n	8003ade <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6919      	ldr	r1, [r3, #16]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	2207      	movs	r2, #7
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	4019      	ands	r1, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6898      	ldr	r0, [r3, #8]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d003      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003aea:	2b11      	cmp	r3, #17
 8003aec:	d132      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_ADC_ConfigChannel+0x1e4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d125      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d126      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d11a      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_ADC_ConfigChannel+0x1e8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	0c9a      	lsrs	r2, r3, #18
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b34:	e002      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f9      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x1b2>
 8003b42:	e007      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	40012400 	.word	0x40012400
 8003b6c:	20000010 	.word	0x20000010
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d040      	beq.n	8003c14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0201 	orr.w	r2, r2, #1
 8003ba0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <ADC_Enable+0xac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <ADC_Enable+0xb0>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	0c9b      	lsrs	r3, r3, #18
 8003bae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bb0:	e002      	b.n	8003bb8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f9      	bne.n	8003bb2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bbe:	f7ff fce1 	bl	8003584 <HAL_GetTick>
 8003bc2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bc4:	e01f      	b.n	8003c06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bc6:	f7ff fcdd 	bl	8003584 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d918      	bls.n	8003c06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d011      	beq.n	8003c06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	f043 0210 	orr.w	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	f043 0201 	orr.w	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e007      	b.n	8003c16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d1d8      	bne.n	8003bc6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000010 	.word	0x20000010
 8003c24:	431bde83 	.word	0x431bde83

08003c28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d12e      	bne.n	8003ca0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c52:	f7ff fc97 	bl	8003584 <HAL_GetTick>
 8003c56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c58:	e01b      	b.n	8003c92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c5a:	f7ff fc93 	bl	8003584 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d914      	bls.n	8003c92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10d      	bne.n	8003c92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f043 0210 	orr.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e007      	b.n	8003ca2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d0dc      	beq.n	8003c5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d127      	bne.n	8003d14 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003cda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003cde:	d115      	bne.n	8003d0c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7ff fe1d 	bl	800394c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003d12:	e004      	b.n	8003d1e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff fe12 	bl	800395e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f043 0204 	orr.w	r2, r3, #4
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fe01 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d94:	4013      	ands	r3, r2
 8003d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <__NVIC_SetPriorityGrouping+0x44>)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	60d3      	str	r3, [r2, #12]
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc4:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	f003 0307 	and.w	r3, r3, #7
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bc80      	pop	{r7}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	db0b      	blt.n	8003e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	4906      	ldr	r1, [pc, #24]	; (8003e10 <__NVIC_EnableIRQ+0x34>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	db0a      	blt.n	8003e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	490c      	ldr	r1, [pc, #48]	; (8003e60 <__NVIC_SetPriority+0x4c>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	440b      	add	r3, r1
 8003e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e3c:	e00a      	b.n	8003e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4908      	ldr	r1, [pc, #32]	; (8003e64 <__NVIC_SetPriority+0x50>)
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	440b      	add	r3, r1
 8003e52:	761a      	strb	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e100 	.word	0xe000e100
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f1c3 0307 	rsb	r3, r3, #7
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	bf28      	it	cs
 8003e86:	2304      	movcs	r3, #4
 8003e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d902      	bls.n	8003e98 <NVIC_EncodePriority+0x30>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3b03      	subs	r3, #3
 8003e96:	e000      	b.n	8003e9a <NVIC_EncodePriority+0x32>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	401a      	ands	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	43d9      	mvns	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	4313      	orrs	r3, r2
         );
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003edc:	d301      	bcc.n	8003ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e00f      	b.n	8003f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee2:	4a0a      	ldr	r2, [pc, #40]	; (8003f0c <SysTick_Config+0x40>)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eea:	210f      	movs	r1, #15
 8003eec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef0:	f7ff ff90 	bl	8003e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <SysTick_Config+0x40>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <SysTick_Config+0x40>)
 8003efc:	2207      	movs	r2, #7
 8003efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	e000e010 	.word	0xe000e010

08003f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff ff2d 	bl	8003d78 <__NVIC_SetPriorityGrouping>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f38:	f7ff ff42 	bl	8003dc0 <__NVIC_GetPriorityGrouping>
 8003f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff ff90 	bl	8003e68 <NVIC_EncodePriority>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff5f 	bl	8003e14 <__NVIC_SetPriority>
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff35 	bl	8003ddc <__NVIC_EnableIRQ>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ffa2 	bl	8003ecc <SysTick_Config>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e043      	b.n	8004032 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_DMA_Init+0xa8>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	4a22      	ldr	r2, [pc, #136]	; (8004040 <HAL_DMA_Init+0xac>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	009a      	lsls	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <HAL_DMA_Init+0xb0>)
 8003fc6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fde:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	bffdfff8 	.word	0xbffdfff8
 8004040:	cccccccd 	.word	0xcccccccd
 8004044:	40020000 	.word	0x40020000

08004048 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_DMA_Start_IT+0x20>
 8004064:	2302      	movs	r3, #2
 8004066:	e04a      	b.n	80040fe <HAL_DMA_Start_IT+0xb6>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004076:	2b01      	cmp	r3, #1
 8004078:	d13a      	bne.n	80040f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 f9ae 	bl	8004400 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 020e 	orr.w	r2, r2, #14
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e00f      	b.n	80040de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 020a 	orr.w	r2, r2, #10
 80040dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e005      	b.n	80040fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800411a:	2b02      	cmp	r3, #2
 800411c:	d005      	beq.n	800412a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2204      	movs	r2, #4
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e051      	b.n	80041ce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 020e 	bic.w	r2, r2, #14
 8004138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_DMA_Abort_IT+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d029      	beq.n	80041a8 <HAL_DMA_Abort_IT+0xa0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a20      	ldr	r2, [pc, #128]	; (80041dc <HAL_DMA_Abort_IT+0xd4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_DMA_Abort_IT+0x9c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <HAL_DMA_Abort_IT+0xd8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d01a      	beq.n	800419e <HAL_DMA_Abort_IT+0x96>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <HAL_DMA_Abort_IT+0xdc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d012      	beq.n	8004198 <HAL_DMA_Abort_IT+0x90>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_DMA_Abort_IT+0xe0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00a      	beq.n	8004192 <HAL_DMA_Abort_IT+0x8a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <HAL_DMA_Abort_IT+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d102      	bne.n	800418c <HAL_DMA_Abort_IT+0x84>
 8004186:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800418a:	e00e      	b.n	80041aa <HAL_DMA_Abort_IT+0xa2>
 800418c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004190:	e00b      	b.n	80041aa <HAL_DMA_Abort_IT+0xa2>
 8004192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004196:	e008      	b.n	80041aa <HAL_DMA_Abort_IT+0xa2>
 8004198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419c:	e005      	b.n	80041aa <HAL_DMA_Abort_IT+0xa2>
 800419e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a2:	e002      	b.n	80041aa <HAL_DMA_Abort_IT+0xa2>
 80041a4:	2310      	movs	r3, #16
 80041a6:	e000      	b.n	80041aa <HAL_DMA_Abort_IT+0xa2>
 80041a8:	2301      	movs	r3, #1
 80041aa:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <HAL_DMA_Abort_IT+0xe8>)
 80041ac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
    } 
  }
  return status;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40020008 	.word	0x40020008
 80041dc:	4002001c 	.word	0x4002001c
 80041e0:	40020030 	.word	0x40020030
 80041e4:	40020044 	.word	0x40020044
 80041e8:	40020058 	.word	0x40020058
 80041ec:	4002006c 	.word	0x4002006c
 80041f0:	40020000 	.word	0x40020000

080041f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2204      	movs	r2, #4
 8004212:	409a      	lsls	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4013      	ands	r3, r2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d04f      	beq.n	80042bc <HAL_DMA_IRQHandler+0xc8>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d04a      	beq.n	80042bc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0204 	bic.w	r2, r2, #4
 8004242:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a66      	ldr	r2, [pc, #408]	; (80043e4 <HAL_DMA_IRQHandler+0x1f0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d029      	beq.n	80042a2 <HAL_DMA_IRQHandler+0xae>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a65      	ldr	r2, [pc, #404]	; (80043e8 <HAL_DMA_IRQHandler+0x1f4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_IRQHandler+0xaa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a63      	ldr	r2, [pc, #396]	; (80043ec <HAL_DMA_IRQHandler+0x1f8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01a      	beq.n	8004298 <HAL_DMA_IRQHandler+0xa4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a62      	ldr	r2, [pc, #392]	; (80043f0 <HAL_DMA_IRQHandler+0x1fc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d012      	beq.n	8004292 <HAL_DMA_IRQHandler+0x9e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a60      	ldr	r2, [pc, #384]	; (80043f4 <HAL_DMA_IRQHandler+0x200>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00a      	beq.n	800428c <HAL_DMA_IRQHandler+0x98>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a5f      	ldr	r2, [pc, #380]	; (80043f8 <HAL_DMA_IRQHandler+0x204>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d102      	bne.n	8004286 <HAL_DMA_IRQHandler+0x92>
 8004280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004284:	e00e      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb0>
 8004286:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800428a:	e00b      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb0>
 800428c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004290:	e008      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb0>
 8004292:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004296:	e005      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb0>
 8004298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429c:	e002      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb0>
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	e000      	b.n	80042a4 <HAL_DMA_IRQHandler+0xb0>
 80042a2:	2304      	movs	r3, #4
 80042a4:	4a55      	ldr	r2, [pc, #340]	; (80043fc <HAL_DMA_IRQHandler+0x208>)
 80042a6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8094 	beq.w	80043da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80042ba:	e08e      	b.n	80043da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2202      	movs	r2, #2
 80042c2:	409a      	lsls	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d056      	beq.n	800437a <HAL_DMA_IRQHandler+0x186>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d051      	beq.n	800437a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 020a 	bic.w	r2, r2, #10
 80042f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <HAL_DMA_IRQHandler+0x1f0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d029      	beq.n	800435a <HAL_DMA_IRQHandler+0x166>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a37      	ldr	r2, [pc, #220]	; (80043e8 <HAL_DMA_IRQHandler+0x1f4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <HAL_DMA_IRQHandler+0x162>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a35      	ldr	r2, [pc, #212]	; (80043ec <HAL_DMA_IRQHandler+0x1f8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01a      	beq.n	8004350 <HAL_DMA_IRQHandler+0x15c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a34      	ldr	r2, [pc, #208]	; (80043f0 <HAL_DMA_IRQHandler+0x1fc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d012      	beq.n	800434a <HAL_DMA_IRQHandler+0x156>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_DMA_IRQHandler+0x200>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00a      	beq.n	8004344 <HAL_DMA_IRQHandler+0x150>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a31      	ldr	r2, [pc, #196]	; (80043f8 <HAL_DMA_IRQHandler+0x204>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d102      	bne.n	800433e <HAL_DMA_IRQHandler+0x14a>
 8004338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800433c:	e00e      	b.n	800435c <HAL_DMA_IRQHandler+0x168>
 800433e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004342:	e00b      	b.n	800435c <HAL_DMA_IRQHandler+0x168>
 8004344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004348:	e008      	b.n	800435c <HAL_DMA_IRQHandler+0x168>
 800434a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434e:	e005      	b.n	800435c <HAL_DMA_IRQHandler+0x168>
 8004350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004354:	e002      	b.n	800435c <HAL_DMA_IRQHandler+0x168>
 8004356:	2320      	movs	r3, #32
 8004358:	e000      	b.n	800435c <HAL_DMA_IRQHandler+0x168>
 800435a:	2302      	movs	r3, #2
 800435c:	4a27      	ldr	r2, [pc, #156]	; (80043fc <HAL_DMA_IRQHandler+0x208>)
 800435e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d034      	beq.n	80043da <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004378:	e02f      	b.n	80043da <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2208      	movs	r2, #8
 8004380:	409a      	lsls	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4013      	ands	r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d028      	beq.n	80043dc <HAL_DMA_IRQHandler+0x1e8>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d023      	beq.n	80043dc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 020e 	bic.w	r2, r2, #14
 80043a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	2101      	movs	r1, #1
 80043ae:	fa01 f202 	lsl.w	r2, r1, r2
 80043b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
    }
  }
  return;
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
}
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40020008 	.word	0x40020008
 80043e8:	4002001c 	.word	0x4002001c
 80043ec:	40020030 	.word	0x40020030
 80043f0:	40020044 	.word	0x40020044
 80043f4:	40020058 	.word	0x40020058
 80043f8:	4002006c 	.word	0x4002006c
 80043fc:	40020000 	.word	0x40020000

08004400 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d108      	bne.n	8004440 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800443e:	e007      	b.n	8004450 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	60da      	str	r2, [r3, #12]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
	...

0800445c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800445c:	b480      	push	{r7}
 800445e:	b08b      	sub	sp, #44	; 0x2c
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800446a:	2300      	movs	r3, #0
 800446c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446e:	e169      	b.n	8004744 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004470:	2201      	movs	r2, #1
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69fa      	ldr	r2, [r7, #28]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	429a      	cmp	r2, r3
 800448a:	f040 8158 	bne.w	800473e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4a9a      	ldr	r2, [pc, #616]	; (80046fc <HAL_GPIO_Init+0x2a0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d05e      	beq.n	8004556 <HAL_GPIO_Init+0xfa>
 8004498:	4a98      	ldr	r2, [pc, #608]	; (80046fc <HAL_GPIO_Init+0x2a0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d875      	bhi.n	800458a <HAL_GPIO_Init+0x12e>
 800449e:	4a98      	ldr	r2, [pc, #608]	; (8004700 <HAL_GPIO_Init+0x2a4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d058      	beq.n	8004556 <HAL_GPIO_Init+0xfa>
 80044a4:	4a96      	ldr	r2, [pc, #600]	; (8004700 <HAL_GPIO_Init+0x2a4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d86f      	bhi.n	800458a <HAL_GPIO_Init+0x12e>
 80044aa:	4a96      	ldr	r2, [pc, #600]	; (8004704 <HAL_GPIO_Init+0x2a8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d052      	beq.n	8004556 <HAL_GPIO_Init+0xfa>
 80044b0:	4a94      	ldr	r2, [pc, #592]	; (8004704 <HAL_GPIO_Init+0x2a8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d869      	bhi.n	800458a <HAL_GPIO_Init+0x12e>
 80044b6:	4a94      	ldr	r2, [pc, #592]	; (8004708 <HAL_GPIO_Init+0x2ac>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d04c      	beq.n	8004556 <HAL_GPIO_Init+0xfa>
 80044bc:	4a92      	ldr	r2, [pc, #584]	; (8004708 <HAL_GPIO_Init+0x2ac>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d863      	bhi.n	800458a <HAL_GPIO_Init+0x12e>
 80044c2:	4a92      	ldr	r2, [pc, #584]	; (800470c <HAL_GPIO_Init+0x2b0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d046      	beq.n	8004556 <HAL_GPIO_Init+0xfa>
 80044c8:	4a90      	ldr	r2, [pc, #576]	; (800470c <HAL_GPIO_Init+0x2b0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d85d      	bhi.n	800458a <HAL_GPIO_Init+0x12e>
 80044ce:	2b12      	cmp	r3, #18
 80044d0:	d82a      	bhi.n	8004528 <HAL_GPIO_Init+0xcc>
 80044d2:	2b12      	cmp	r3, #18
 80044d4:	d859      	bhi.n	800458a <HAL_GPIO_Init+0x12e>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <HAL_GPIO_Init+0x80>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	08004557 	.word	0x08004557
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004543 	.word	0x08004543
 80044e8:	08004585 	.word	0x08004585
 80044ec:	0800458b 	.word	0x0800458b
 80044f0:	0800458b 	.word	0x0800458b
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	0800458b 	.word	0x0800458b
 80044fc:	0800458b 	.word	0x0800458b
 8004500:	0800458b 	.word	0x0800458b
 8004504:	0800458b 	.word	0x0800458b
 8004508:	0800458b 	.word	0x0800458b
 800450c:	0800458b 	.word	0x0800458b
 8004510:	0800458b 	.word	0x0800458b
 8004514:	0800458b 	.word	0x0800458b
 8004518:	0800458b 	.word	0x0800458b
 800451c:	0800458b 	.word	0x0800458b
 8004520:	08004539 	.word	0x08004539
 8004524:	0800454d 	.word	0x0800454d
 8004528:	4a79      	ldr	r2, [pc, #484]	; (8004710 <HAL_GPIO_Init+0x2b4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800452e:	e02c      	b.n	800458a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	623b      	str	r3, [r7, #32]
          break;
 8004536:	e029      	b.n	800458c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	623b      	str	r3, [r7, #32]
          break;
 8004540:	e024      	b.n	800458c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	3308      	adds	r3, #8
 8004548:	623b      	str	r3, [r7, #32]
          break;
 800454a:	e01f      	b.n	800458c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	330c      	adds	r3, #12
 8004552:	623b      	str	r3, [r7, #32]
          break;
 8004554:	e01a      	b.n	800458c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800455e:	2304      	movs	r3, #4
 8004560:	623b      	str	r3, [r7, #32]
          break;
 8004562:	e013      	b.n	800458c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800456c:	2308      	movs	r3, #8
 800456e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	611a      	str	r2, [r3, #16]
          break;
 8004576:	e009      	b.n	800458c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004578:	2308      	movs	r3, #8
 800457a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	615a      	str	r2, [r3, #20]
          break;
 8004582:	e003      	b.n	800458c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004584:	2300      	movs	r3, #0
 8004586:	623b      	str	r3, [r7, #32]
          break;
 8004588:	e000      	b.n	800458c <HAL_GPIO_Init+0x130>
          break;
 800458a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2bff      	cmp	r3, #255	; 0xff
 8004590:	d801      	bhi.n	8004596 <HAL_GPIO_Init+0x13a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	e001      	b.n	800459a <HAL_GPIO_Init+0x13e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3304      	adds	r3, #4
 800459a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2bff      	cmp	r3, #255	; 0xff
 80045a0:	d802      	bhi.n	80045a8 <HAL_GPIO_Init+0x14c>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	e002      	b.n	80045ae <HAL_GPIO_Init+0x152>
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	3b08      	subs	r3, #8
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	210f      	movs	r1, #15
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	401a      	ands	r2, r3
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	431a      	orrs	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80b1 	beq.w	800473e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045dc:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_GPIO_Init+0x2b8>)
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	4a4c      	ldr	r2, [pc, #304]	; (8004714 <HAL_GPIO_Init+0x2b8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6193      	str	r3, [r2, #24]
 80045e8:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_GPIO_Init+0x2b8>)
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045f4:	4a48      	ldr	r2, [pc, #288]	; (8004718 <HAL_GPIO_Init+0x2bc>)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	3302      	adds	r3, #2
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	220f      	movs	r2, #15
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	43db      	mvns	r3, r3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a40      	ldr	r2, [pc, #256]	; (800471c <HAL_GPIO_Init+0x2c0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <HAL_GPIO_Init+0x1ec>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <HAL_GPIO_Init+0x2c4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00d      	beq.n	8004644 <HAL_GPIO_Init+0x1e8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3e      	ldr	r2, [pc, #248]	; (8004724 <HAL_GPIO_Init+0x2c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <HAL_GPIO_Init+0x1e4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3d      	ldr	r2, [pc, #244]	; (8004728 <HAL_GPIO_Init+0x2cc>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_GPIO_Init+0x1e0>
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <HAL_GPIO_Init+0x1ee>
 800463c:	2304      	movs	r3, #4
 800463e:	e004      	b.n	800464a <HAL_GPIO_Init+0x1ee>
 8004640:	2302      	movs	r3, #2
 8004642:	e002      	b.n	800464a <HAL_GPIO_Init+0x1ee>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_GPIO_Init+0x1ee>
 8004648:	2300      	movs	r3, #0
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	f002 0203 	and.w	r2, r2, #3
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	4093      	lsls	r3, r2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800465a:	492f      	ldr	r1, [pc, #188]	; (8004718 <HAL_GPIO_Init+0x2bc>)
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	3302      	adds	r3, #2
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_GPIO_Init+0x2d0>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	492c      	ldr	r1, [pc, #176]	; (800472c <HAL_GPIO_Init+0x2d0>)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
 8004680:	e006      	b.n	8004690 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004682:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_GPIO_Init+0x2d0>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	43db      	mvns	r3, r3
 800468a:	4928      	ldr	r1, [pc, #160]	; (800472c <HAL_GPIO_Init+0x2d0>)
 800468c:	4013      	ands	r3, r2
 800468e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800469c:	4b23      	ldr	r3, [pc, #140]	; (800472c <HAL_GPIO_Init+0x2d0>)
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4922      	ldr	r1, [pc, #136]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
 80046a8:	e006      	b.n	80046b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	491e      	ldr	r1, [pc, #120]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4918      	ldr	r1, [pc, #96]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]
 80046d0:	e006      	b.n	80046e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	43db      	mvns	r3, r3
 80046da:	4914      	ldr	r1, [pc, #80]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046dc:	4013      	ands	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d021      	beq.n	8004730 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_GPIO_Init+0x2d0>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60cb      	str	r3, [r1, #12]
 80046f8:	e021      	b.n	800473e <HAL_GPIO_Init+0x2e2>
 80046fa:	bf00      	nop
 80046fc:	10320000 	.word	0x10320000
 8004700:	10310000 	.word	0x10310000
 8004704:	10220000 	.word	0x10220000
 8004708:	10210000 	.word	0x10210000
 800470c:	10120000 	.word	0x10120000
 8004710:	10110000 	.word	0x10110000
 8004714:	40021000 	.word	0x40021000
 8004718:	40010000 	.word	0x40010000
 800471c:	40010800 	.word	0x40010800
 8004720:	40010c00 	.word	0x40010c00
 8004724:	40011000 	.word	0x40011000
 8004728:	40011400 	.word	0x40011400
 800472c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_GPIO_Init+0x304>)
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	43db      	mvns	r3, r3
 8004738:	4909      	ldr	r1, [pc, #36]	; (8004760 <HAL_GPIO_Init+0x304>)
 800473a:	4013      	ands	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	3301      	adds	r3, #1
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	fa22 f303 	lsr.w	r3, r2, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	f47f ae8e 	bne.w	8004470 <HAL_GPIO_Init+0x14>
  }
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop
 8004758:	372c      	adds	r7, #44	; 0x2c
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr
 8004760:	40010400 	.word	0x40010400

08004764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e001      	b.n	8004786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	807b      	strh	r3, [r7, #2]
 800479e:	4613      	mov	r3, r2
 80047a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a2:	787b      	ldrb	r3, [r7, #1]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047ae:	e003      	b.n	80047b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	041a      	lsls	r2, r3, #16
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	611a      	str	r2, [r3, #16]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	4013      	ands	r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd fbc8 	bl	8001f78 <HAL_GPIO_EXTI_Callback>
  }
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40010400 	.word	0x40010400

080047f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e12b      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe fd04 	bl	8003228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2224      	movs	r2, #36	; 0x24
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004858:	f001 fc36 	bl	80060c8 <HAL_RCC_GetPCLK1Freq>
 800485c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4a81      	ldr	r2, [pc, #516]	; (8004a68 <HAL_I2C_Init+0x274>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d807      	bhi.n	8004878 <HAL_I2C_Init+0x84>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a80      	ldr	r2, [pc, #512]	; (8004a6c <HAL_I2C_Init+0x278>)
 800486c:	4293      	cmp	r3, r2
 800486e:	bf94      	ite	ls
 8004870:	2301      	movls	r3, #1
 8004872:	2300      	movhi	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e006      	b.n	8004886 <HAL_I2C_Init+0x92>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a7d      	ldr	r2, [pc, #500]	; (8004a70 <HAL_I2C_Init+0x27c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e0e7      	b.n	8004a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a78      	ldr	r2, [pc, #480]	; (8004a74 <HAL_I2C_Init+0x280>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	0c9b      	lsrs	r3, r3, #18
 8004898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a6a      	ldr	r2, [pc, #424]	; (8004a68 <HAL_I2C_Init+0x274>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d802      	bhi.n	80048c8 <HAL_I2C_Init+0xd4>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3301      	adds	r3, #1
 80048c6:	e009      	b.n	80048dc <HAL_I2C_Init+0xe8>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	4a69      	ldr	r2, [pc, #420]	; (8004a78 <HAL_I2C_Init+0x284>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	099b      	lsrs	r3, r3, #6
 80048da:	3301      	adds	r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80048ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	495c      	ldr	r1, [pc, #368]	; (8004a68 <HAL_I2C_Init+0x274>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d819      	bhi.n	8004930 <HAL_I2C_Init+0x13c>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1e59      	subs	r1, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	fbb1 f3f3 	udiv	r3, r1, r3
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004910:	400b      	ands	r3, r1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_I2C_Init+0x138>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1e59      	subs	r1, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fbb1 f3f3 	udiv	r3, r1, r3
 8004924:	3301      	adds	r3, #1
 8004926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492a:	e051      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800492c:	2304      	movs	r3, #4
 800492e:	e04f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_I2C_Init+0x168>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_I2C_Init+0x18e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	0099      	lsls	r1, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x196>
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <HAL_I2C_Init+0x1bc>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e58      	subs	r0, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Init+0x1dc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6911      	ldr	r1, [r2, #16]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	000186a0 	.word	0x000186a0
 8004a6c:	001e847f 	.word	0x001e847f
 8004a70:	003d08ff 	.word	0x003d08ff
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	10624dd3 	.word	0x10624dd3

08004a7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	817b      	strh	r3, [r7, #10]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7fe fd78 	bl	8003584 <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	f040 80e0 	bne.w	8004c64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2319      	movs	r3, #25
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4970      	ldr	r1, [pc, #448]	; (8004c70 <HAL_I2C_Master_Transmit+0x1f4>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fdb0 	bl	8005614 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0d3      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2C_Master_Transmit+0x50>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0cc      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d007      	beq.n	8004af2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a50      	ldr	r2, [pc, #320]	; (8004c74 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b34:	8979      	ldrh	r1, [r7, #10]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fc40 	bl	80053c0 <I2C_MasterRequestWrite>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e08d      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b60:	e066      	b.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fe2a 	bl	80057c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d11b      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	6a39      	ldr	r1, [r7, #32]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fe1a 	bl	8005842 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01a      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d194      	bne.n	8004b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000

08004c78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08a      	sub	sp, #40	; 0x28
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	460b      	mov	r3, r1
 8004c86:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c88:	f7fe fc7c 	bl	8003584 <HAL_GetTick>
 8004c8c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	f040 8111 	bne.w	8004ec2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2319      	movs	r3, #25
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	4988      	ldr	r1, [pc, #544]	; (8004ecc <HAL_I2C_IsDeviceReady+0x254>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fcb2 	bl	8005614 <I2C_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e104      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2C_IsDeviceReady+0x50>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0fd      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d007      	beq.n	8004cee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2224      	movs	r2, #36	; 0x24
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_I2C_IsDeviceReady+0x258>)
 8004d10:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d20:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fc70 	bl	8005614 <I2C_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d48:	d103      	bne.n	8004d52 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0b6      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004d66:	f7fe fc0d 	bl	8003584 <HAL_GetTick>
 8004d6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d9a:	e025      	b.n	8004de8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d9c:	f7fe fbf2 	bl	8003584 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d302      	bcc.n	8004db2 <HAL_I2C_IsDeviceReady+0x13a>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	22a0      	movs	r2, #160	; 0xa0
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2ba0      	cmp	r3, #160	; 0xa0
 8004df2:	d005      	beq.n	8004e00 <HAL_I2C_IsDeviceReady+0x188>
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d102      	bne.n	8004e00 <HAL_I2C_IsDeviceReady+0x188>
 8004dfa:	7dbb      	ldrb	r3, [r7, #22]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0cd      	beq.n	8004d9c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d129      	bne.n	8004e6a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2319      	movs	r3, #25
 8004e42:	2201      	movs	r2, #1
 8004e44:	4921      	ldr	r1, [pc, #132]	; (8004ecc <HAL_I2C_IsDeviceReady+0x254>)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fbe4 	bl	8005614 <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e036      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	e02c      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2319      	movs	r3, #25
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	490f      	ldr	r1, [pc, #60]	; (8004ecc <HAL_I2C_IsDeviceReady+0x254>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fbc0 	bl	8005614 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e012      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	f4ff af32 	bcc.w	8004d12 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ec2:	2302      	movs	r3, #2
  }
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3720      	adds	r7, #32
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	00100002 	.word	0x00100002
 8004ed0:	ffff0000 	.word	0xffff0000

08004ed4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b08a      	sub	sp, #40	; 0x28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	0a1b      	lsrs	r3, r3, #8
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d016      	beq.n	8004f32 <HAL_I2C_ER_IRQHandler+0x5e>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f20:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f30:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	0a5b      	lsrs	r3, r3, #9
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <HAL_I2C_ER_IRQHandler+0x88>
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004f5a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d03f      	beq.n	8004fe8 <HAL_I2C_ER_IRQHandler+0x114>
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d039      	beq.n	8004fe8 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004f74:	7efb      	ldrb	r3, [r7, #27]
 8004f76:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f86:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004f8e:	7ebb      	ldrb	r3, [r7, #26]
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d112      	bne.n	8004fba <HAL_I2C_ER_IRQHandler+0xe6>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10f      	bne.n	8004fba <HAL_I2C_ER_IRQHandler+0xe6>
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b21      	cmp	r3, #33	; 0x21
 8004f9e:	d008      	beq.n	8004fb2 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	2b29      	cmp	r3, #41	; 0x29
 8004fa4:	d005      	beq.n	8004fb2 <HAL_I2C_ER_IRQHandler+0xde>
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	2b28      	cmp	r3, #40	; 0x28
 8004faa:	d106      	bne.n	8004fba <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b21      	cmp	r3, #33	; 0x21
 8004fb0:	d103      	bne.n	8004fba <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f862 	bl	800507c <I2C_Slave_AF>
 8004fb8:	e016      	b.n	8004fe8 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fc2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fcc:	7efb      	ldrb	r3, [r7, #27]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d002      	beq.n	8004fd8 <HAL_I2C_ER_IRQHandler+0x104>
 8004fd2:	7efb      	ldrb	r3, [r7, #27]
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d107      	bne.n	8004fe8 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	0adb      	lsrs	r3, r3, #11
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <HAL_I2C_ER_IRQHandler+0x13e>
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	f043 0308 	orr.w	r3, r3, #8
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005010:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f899 	bl	800515c <I2C_ITError>
  }
}
 800502a:	bf00      	nop
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	bc80      	pop	{r7}
 8005054:	4770      	bx	lr

08005056 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr
	...

0800507c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005090:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d002      	beq.n	800509e <I2C_Slave_AF+0x22>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b20      	cmp	r3, #32
 800509c:	d129      	bne.n	80050f2 <I2C_Slave_AF+0x76>
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b28      	cmp	r3, #40	; 0x28
 80050a2:	d126      	bne.n	80050f2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <I2C_Slave_AF+0xdc>)
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050b8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050c2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ffaa 	bl	8005044 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80050f0:	e02e      	b.n	8005150 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b21      	cmp	r3, #33	; 0x21
 80050f6:	d126      	bne.n	8005146 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <I2C_Slave_AF+0xdc>)
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2221      	movs	r2, #33	; 0x21
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005122:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800512c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff ff77 	bl	8005032 <HAL_I2C_SlaveTxCpltCallback>
}
 8005144:	e004      	b.n	8005150 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800514e:	615a      	str	r2, [r3, #20]
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	ffff0000 	.word	0xffff0000

0800515c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005172:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005174:	7bbb      	ldrb	r3, [r7, #14]
 8005176:	2b10      	cmp	r3, #16
 8005178:	d002      	beq.n	8005180 <I2C_ITError+0x24>
 800517a:	7bbb      	ldrb	r3, [r7, #14]
 800517c:	2b40      	cmp	r3, #64	; 0x40
 800517e:	d10a      	bne.n	8005196 <I2C_ITError+0x3a>
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b22      	cmp	r3, #34	; 0x22
 8005184:	d107      	bne.n	8005196 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005194:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800519c:	2b28      	cmp	r3, #40	; 0x28
 800519e:	d107      	bne.n	80051b0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2228      	movs	r2, #40	; 0x28
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051ae:	e015      	b.n	80051dc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051be:	d00a      	beq.n	80051d6 <I2C_ITError+0x7a>
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b60      	cmp	r3, #96	; 0x60
 80051c4:	d007      	beq.n	80051d6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ea:	d161      	bne.n	80052b0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005204:	2b01      	cmp	r3, #1
 8005206:	d020      	beq.n	800524a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	4a6a      	ldr	r2, [pc, #424]	; (80053b8 <I2C_ITError+0x25c>)
 800520e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe ff77 	bl	8004108 <HAL_DMA_Abort_IT>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8089 	beq.w	8005334 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0201 	bic.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005244:	4610      	mov	r0, r2
 8005246:	4798      	blx	r3
 8005248:	e074      	b.n	8005334 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	4a5a      	ldr	r2, [pc, #360]	; (80053b8 <I2C_ITError+0x25c>)
 8005250:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe ff56 	bl	8004108 <HAL_DMA_Abort_IT>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d068      	beq.n	8005334 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d10b      	bne.n	8005288 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	1c5a      	adds	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052aa:	4610      	mov	r0, r2
 80052ac:	4798      	blx	r3
 80052ae:	e041      	b.n	8005334 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b60      	cmp	r3, #96	; 0x60
 80052ba:	d125      	bne.n	8005308 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	d10b      	bne.n	80052f0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff feb1 	bl	8005068 <HAL_I2C_AbortCpltCallback>
 8005306:	e015      	b.n	8005334 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d10b      	bne.n	800532e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe91 	bl	8005056 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10e      	bne.n	8005362 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800535e:	2b00      	cmp	r3, #0
 8005360:	d007      	beq.n	8005372 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005370:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d113      	bne.n	80053ae <I2C_ITError+0x252>
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	2b28      	cmp	r3, #40	; 0x28
 800538a:	d110      	bne.n	80053ae <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a0b      	ldr	r2, [pc, #44]	; (80053bc <I2C_ITError+0x260>)
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff fe4b 	bl	8005044 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	080054c5 	.word	0x080054c5
 80053bc:	ffff0000 	.word	0xffff0000

080053c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	460b      	mov	r3, r1
 80053ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d006      	beq.n	80053ea <I2C_MasterRequestWrite+0x2a>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d003      	beq.n	80053ea <I2C_MasterRequestWrite+0x2a>
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053e8:	d108      	bne.n	80053fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e00b      	b.n	8005414 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	2b12      	cmp	r3, #18
 8005402:	d107      	bne.n	8005414 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f8f7 	bl	8005614 <I2C_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543a:	d103      	bne.n	8005444 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e035      	b.n	80054b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005450:	d108      	bne.n	8005464 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005452:	897b      	ldrh	r3, [r7, #10]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	e01b      	b.n	800549c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005464:	897b      	ldrh	r3, [r7, #10]
 8005466:	11db      	asrs	r3, r3, #7
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f003 0306 	and.w	r3, r3, #6
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f063 030f 	orn	r3, r3, #15
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	490e      	ldr	r1, [pc, #56]	; (80054bc <I2C_MasterRequestWrite+0xfc>)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f91d 	bl	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e010      	b.n	80054b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005492:	897b      	ldrh	r3, [r7, #10]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4907      	ldr	r1, [pc, #28]	; (80054c0 <I2C_MasterRequestWrite+0x100>)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f90d 	bl	80056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	00010008 	.word	0x00010008
 80054c0:	00010002 	.word	0x00010002

080054c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054de:	4b4b      	ldr	r3, [pc, #300]	; (800560c <I2C_DMAAbort+0x148>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	08db      	lsrs	r3, r3, #3
 80054e4:	4a4a      	ldr	r2, [pc, #296]	; (8005610 <I2C_DMAAbort+0x14c>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0a1a      	lsrs	r2, r3, #8
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	00da      	lsls	r2, r3, #3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800550a:	e00a      	b.n	8005522 <I2C_DMAAbort+0x5e>
    }
    count--;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3b01      	subs	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005520:	d0ea      	beq.n	80054f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	2200      	movs	r2, #0
 8005530:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	2200      	movs	r2, #0
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005550:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005564:	2200      	movs	r2, #0
 8005566:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005574:	2200      	movs	r2, #0
 8005576:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b60      	cmp	r3, #96	; 0x60
 8005592:	d10e      	bne.n	80055b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2200      	movs	r2, #0
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055aa:	6978      	ldr	r0, [r7, #20]
 80055ac:	f7ff fd5c 	bl	8005068 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055b0:	e027      	b.n	8005602 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055b8:	2b28      	cmp	r3, #40	; 0x28
 80055ba:	d117      	bne.n	80055ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0201 	orr.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2228      	movs	r2, #40	; 0x28
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055ea:	e007      	b.n	80055fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055fc:	6978      	ldr	r0, [r7, #20]
 80055fe:	f7ff fd2a 	bl	8005056 <HAL_I2C_ErrorCallback>
}
 8005602:	bf00      	nop
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000010 	.word	0x20000010
 8005610:	14f8b589 	.word	0x14f8b589

08005614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	4613      	mov	r3, r2
 8005622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005624:	e025      	b.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562c:	d021      	beq.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562e:	f7fd ffa9 	bl	8003584 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d302      	bcc.n	8005644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d116      	bne.n	8005672 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0220 	orr.w	r2, r3, #32
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e023      	b.n	80056ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d10d      	bne.n	8005698 <I2C_WaitOnFlagUntilTimeout+0x84>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	b29b      	uxth	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf0c      	ite	eq
 800568e:	2301      	moveq	r3, #1
 8005690:	2300      	movne	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	e00c      	b.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	43da      	mvns	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4013      	ands	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d0b6      	beq.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d0:	e051      	b.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e0:	d123      	bne.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e046      	b.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d021      	beq.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fd ff27 	bl	8003584 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d116      	bne.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e020      	b.n	80057b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	0c1b      	lsrs	r3, r3, #16
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d10c      	bne.n	800579a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4013      	ands	r3, r2
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	e00b      	b.n	80057b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	43da      	mvns	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4013      	ands	r3, r2
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d18d      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057cc:	e02d      	b.n	800582a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f878 	bl	80058c4 <I2C_IsAcknowledgeFailed>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e02d      	b.n	800583a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d021      	beq.n	800582a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e6:	f7fd fecd 	bl	8003584 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d302      	bcc.n	80057fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d116      	bne.n	800582a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f043 0220 	orr.w	r2, r3, #32
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e007      	b.n	800583a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d1ca      	bne.n	80057ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800584e:	e02d      	b.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f837 	bl	80058c4 <I2C_IsAcknowledgeFailed>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e02d      	b.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d021      	beq.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005868:	f7fd fe8c 	bl	8003584 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d116      	bne.n	80058ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e007      	b.n	80058bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d1ca      	bne.n	8005850 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058da:	d11b      	bne.n	8005914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	bc80      	pop	{r7}
 800591e:	4770      	bx	lr

08005920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e26c      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8087 	beq.w	8005a4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005940:	4b92      	ldr	r3, [pc, #584]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 030c 	and.w	r3, r3, #12
 8005948:	2b04      	cmp	r3, #4
 800594a:	d00c      	beq.n	8005966 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800594c:	4b8f      	ldr	r3, [pc, #572]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 030c 	and.w	r3, r3, #12
 8005954:	2b08      	cmp	r3, #8
 8005956:	d112      	bne.n	800597e <HAL_RCC_OscConfig+0x5e>
 8005958:	4b8c      	ldr	r3, [pc, #560]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005964:	d10b      	bne.n	800597e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005966:	4b89      	ldr	r3, [pc, #548]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d06c      	beq.n	8005a4c <HAL_RCC_OscConfig+0x12c>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d168      	bne.n	8005a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e246      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d106      	bne.n	8005996 <HAL_RCC_OscConfig+0x76>
 8005988:	4b80      	ldr	r3, [pc, #512]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a7f      	ldr	r2, [pc, #508]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 800598e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e02e      	b.n	80059f4 <HAL_RCC_OscConfig+0xd4>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10c      	bne.n	80059b8 <HAL_RCC_OscConfig+0x98>
 800599e:	4b7b      	ldr	r3, [pc, #492]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a7a      	ldr	r2, [pc, #488]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b78      	ldr	r3, [pc, #480]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a77      	ldr	r2, [pc, #476]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e01d      	b.n	80059f4 <HAL_RCC_OscConfig+0xd4>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0xbc>
 80059c2:	4b72      	ldr	r3, [pc, #456]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a71      	ldr	r2, [pc, #452]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b6f      	ldr	r3, [pc, #444]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6e      	ldr	r2, [pc, #440]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0xd4>
 80059dc:	4b6b      	ldr	r3, [pc, #428]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a6a      	ldr	r2, [pc, #424]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4b68      	ldr	r3, [pc, #416]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a67      	ldr	r2, [pc, #412]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 80059ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d013      	beq.n	8005a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7fd fdc2 	bl	8003584 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a04:	f7fd fdbe 	bl	8003584 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e1fa      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a16:	4b5d      	ldr	r3, [pc, #372]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0xe4>
 8005a22:	e014      	b.n	8005a4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a24:	f7fd fdae 	bl	8003584 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a2c:	f7fd fdaa 	bl	8003584 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	; 0x64
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e1e6      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3e:	4b53      	ldr	r3, [pc, #332]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x10c>
 8005a4a:	e000      	b.n	8005a4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d063      	beq.n	8005b22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a5a:	4b4c      	ldr	r3, [pc, #304]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a66:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d11c      	bne.n	8005aac <HAL_RCC_OscConfig+0x18c>
 8005a72:	4b46      	ldr	r3, [pc, #280]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d116      	bne.n	8005aac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	4b43      	ldr	r3, [pc, #268]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCC_OscConfig+0x176>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e1ba      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a96:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4939      	ldr	r1, [pc, #228]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aaa:	e03a      	b.n	8005b22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d020      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab4:	4b36      	ldr	r3, [pc, #216]	; (8005b90 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fd fd63 	bl	8003584 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac2:	f7fd fd5f 	bl	8003584 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e19b      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad4:	4b2d      	ldr	r3, [pc, #180]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4927      	ldr	r1, [pc, #156]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	e015      	b.n	8005b22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af6:	4b26      	ldr	r3, [pc, #152]	; (8005b90 <HAL_RCC_OscConfig+0x270>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fd fd42 	bl	8003584 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b04:	f7fd fd3e 	bl	8003584 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e17a      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b16:	4b1d      	ldr	r3, [pc, #116]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d03a      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d019      	beq.n	8005b6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b36:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <HAL_RCC_OscConfig+0x274>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3c:	f7fd fd22 	bl	8003584 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b44:	f7fd fd1e 	bl	8003584 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e15a      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <HAL_RCC_OscConfig+0x26c>)
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b62:	2001      	movs	r0, #1
 8005b64:	f000 fac4 	bl	80060f0 <RCC_Delay>
 8005b68:	e01c      	b.n	8005ba4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b6a:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <HAL_RCC_OscConfig+0x274>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b70:	f7fd fd08 	bl	8003584 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b76:	e00f      	b.n	8005b98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fd fd04 	bl	8003584 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d908      	bls.n	8005b98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e140      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	42420000 	.word	0x42420000
 8005b94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b98:	4b9e      	ldr	r3, [pc, #632]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e9      	bne.n	8005b78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80a6 	beq.w	8005cfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bb6:	4b97      	ldr	r3, [pc, #604]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	4b94      	ldr	r3, [pc, #592]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	4a93      	ldr	r2, [pc, #588]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	61d3      	str	r3, [r2, #28]
 8005bce:	4b91      	ldr	r3, [pc, #580]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	60bb      	str	r3, [r7, #8]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bde:	4b8e      	ldr	r3, [pc, #568]	; (8005e18 <HAL_RCC_OscConfig+0x4f8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d118      	bne.n	8005c1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bea:	4b8b      	ldr	r3, [pc, #556]	; (8005e18 <HAL_RCC_OscConfig+0x4f8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a8a      	ldr	r2, [pc, #552]	; (8005e18 <HAL_RCC_OscConfig+0x4f8>)
 8005bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bf6:	f7fd fcc5 	bl	8003584 <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bfe:	f7fd fcc1 	bl	8003584 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b64      	cmp	r3, #100	; 0x64
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0fd      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	4b81      	ldr	r3, [pc, #516]	; (8005e18 <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f0      	beq.n	8005bfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d106      	bne.n	8005c32 <HAL_RCC_OscConfig+0x312>
 8005c24:	4b7b      	ldr	r3, [pc, #492]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	4a7a      	ldr	r2, [pc, #488]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	6213      	str	r3, [r2, #32]
 8005c30:	e02d      	b.n	8005c8e <HAL_RCC_OscConfig+0x36e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCC_OscConfig+0x334>
 8005c3a:	4b76      	ldr	r3, [pc, #472]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	4a75      	ldr	r2, [pc, #468]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	6213      	str	r3, [r2, #32]
 8005c46:	4b73      	ldr	r3, [pc, #460]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	4a72      	ldr	r2, [pc, #456]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c4c:	f023 0304 	bic.w	r3, r3, #4
 8005c50:	6213      	str	r3, [r2, #32]
 8005c52:	e01c      	b.n	8005c8e <HAL_RCC_OscConfig+0x36e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d10c      	bne.n	8005c76 <HAL_RCC_OscConfig+0x356>
 8005c5c:	4b6d      	ldr	r3, [pc, #436]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	4a6c      	ldr	r2, [pc, #432]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c62:	f043 0304 	orr.w	r3, r3, #4
 8005c66:	6213      	str	r3, [r2, #32]
 8005c68:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	4a69      	ldr	r2, [pc, #420]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c6e:	f043 0301 	orr.w	r3, r3, #1
 8005c72:	6213      	str	r3, [r2, #32]
 8005c74:	e00b      	b.n	8005c8e <HAL_RCC_OscConfig+0x36e>
 8005c76:	4b67      	ldr	r3, [pc, #412]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	4a66      	ldr	r2, [pc, #408]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	6213      	str	r3, [r2, #32]
 8005c82:	4b64      	ldr	r3, [pc, #400]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	4a63      	ldr	r2, [pc, #396]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005c88:	f023 0304 	bic.w	r3, r3, #4
 8005c8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d015      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c96:	f7fd fc75 	bl	8003584 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9e:	f7fd fc71 	bl	8003584 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0ab      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	4b57      	ldr	r3, [pc, #348]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ee      	beq.n	8005c9e <HAL_RCC_OscConfig+0x37e>
 8005cc0:	e014      	b.n	8005cec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cc2:	f7fd fc5f 	bl	8003584 <HAL_GetTick>
 8005cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc8:	e00a      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cca:	f7fd fc5b 	bl	8003584 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e095      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce0:	4b4c      	ldr	r3, [pc, #304]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1ee      	bne.n	8005cca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d105      	bne.n	8005cfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf2:	4b48      	ldr	r3, [pc, #288]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4a47      	ldr	r2, [pc, #284]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 8081 	beq.w	8005e0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d08:	4b42      	ldr	r3, [pc, #264]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 030c 	and.w	r3, r3, #12
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d061      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d146      	bne.n	8005daa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1c:	4b3f      	ldr	r3, [pc, #252]	; (8005e1c <HAL_RCC_OscConfig+0x4fc>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d22:	f7fd fc2f 	bl	8003584 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2a:	f7fd fc2b 	bl	8003584 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e067      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d3c:	4b35      	ldr	r3, [pc, #212]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f0      	bne.n	8005d2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d108      	bne.n	8005d64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d52:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	492d      	ldr	r1, [pc, #180]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d64:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a19      	ldr	r1, [r3, #32]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	430b      	orrs	r3, r1
 8005d76:	4927      	ldr	r1, [pc, #156]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d7c:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <HAL_RCC_OscConfig+0x4fc>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d82:	f7fd fbff 	bl	8003584 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8a:	f7fd fbfb 	bl	8003584 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e037      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d9c:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d0f0      	beq.n	8005d8a <HAL_RCC_OscConfig+0x46a>
 8005da8:	e02f      	b.n	8005e0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005daa:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <HAL_RCC_OscConfig+0x4fc>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fd fbe8 	bl	8003584 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fd fbe4 	bl	8003584 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e020      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x498>
 8005dd6:	e018      	b.n	8005e0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e013      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_RCC_OscConfig+0x4f4>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40007000 	.word	0x40007000
 8005e1c:	42420060 	.word	0x42420060

08005e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0d0      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e34:	4b6a      	ldr	r3, [pc, #424]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d910      	bls.n	8005e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b67      	ldr	r3, [pc, #412]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 0207 	bic.w	r2, r3, #7
 8005e4a:	4965      	ldr	r1, [pc, #404]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e52:	4b63      	ldr	r3, [pc, #396]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d001      	beq.n	8005e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0b8      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d020      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e7c:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a58      	ldr	r2, [pc, #352]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e94:	4b53      	ldr	r3, [pc, #332]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	4a52      	ldr	r2, [pc, #328]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea0:	4b50      	ldr	r3, [pc, #320]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	494d      	ldr	r1, [pc, #308]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d040      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec6:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d115      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e07f      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d107      	bne.n	8005eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ede:	4b41      	ldr	r3, [pc, #260]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e073      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eee:	4b3d      	ldr	r3, [pc, #244]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e06b      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005efe:	4b39      	ldr	r3, [pc, #228]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f023 0203 	bic.w	r2, r3, #3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4936      	ldr	r1, [pc, #216]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f10:	f7fd fb38 	bl	8003584 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f18:	f7fd fb34 	bl	8003584 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e053      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2e:	4b2d      	ldr	r3, [pc, #180]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f003 020c 	and.w	r2, r3, #12
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1eb      	bne.n	8005f18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f40:	4b27      	ldr	r3, [pc, #156]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d210      	bcs.n	8005f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f023 0207 	bic.w	r2, r3, #7
 8005f56:	4922      	ldr	r1, [pc, #136]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e032      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f7c:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	4916      	ldr	r1, [pc, #88]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	490e      	ldr	r1, [pc, #56]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fae:	f000 f821 	bl	8005ff4 <HAL_RCC_GetSysClockFreq>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	490a      	ldr	r1, [pc, #40]	; (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc0:	5ccb      	ldrb	r3, [r1, r3]
 8005fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc6:	4a09      	ldr	r2, [pc, #36]	; (8005fec <HAL_RCC_ClockConfig+0x1cc>)
 8005fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fd fa96 	bl	8003500 <HAL_InitTick>

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40022000 	.word	0x40022000
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	08007da0 	.word	0x08007da0
 8005fec:	20000010 	.word	0x20000010
 8005ff0:	20000014 	.word	0x20000014

08005ff4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff4:	b490      	push	{r4, r7}
 8005ff6:	b08a      	sub	sp, #40	; 0x28
 8005ff8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ffa:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ffc:	1d3c      	adds	r4, r7, #4
 8005ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006004:	f240 2301 	movw	r3, #513	; 0x201
 8006008:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	2300      	movs	r3, #0
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	2300      	movs	r3, #0
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800601e:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 030c 	and.w	r3, r3, #12
 800602a:	2b04      	cmp	r3, #4
 800602c:	d002      	beq.n	8006034 <HAL_RCC_GetSysClockFreq+0x40>
 800602e:	2b08      	cmp	r3, #8
 8006030:	d003      	beq.n	800603a <HAL_RCC_GetSysClockFreq+0x46>
 8006032:	e02d      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006034:	4b1d      	ldr	r3, [pc, #116]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006036:	623b      	str	r3, [r7, #32]
      break;
 8006038:	e02d      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	0c9b      	lsrs	r3, r3, #18
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006046:	4413      	add	r3, r2
 8006048:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800604c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d013      	beq.n	8006080 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006058:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	0c5b      	lsrs	r3, r3, #17
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006066:	4413      	add	r3, r2
 8006068:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800606c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	4a0e      	ldr	r2, [pc, #56]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006072:	fb02 f203 	mul.w	r2, r2, r3
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	e004      	b.n	800608a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	623b      	str	r3, [r7, #32]
      break;
 800608e:	e002      	b.n	8006096 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006092:	623b      	str	r3, [r7, #32]
      break;
 8006094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006096:	6a3b      	ldr	r3, [r7, #32]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3728      	adds	r7, #40	; 0x28
 800609c:	46bd      	mov	sp, r7
 800609e:	bc90      	pop	{r4, r7}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	08007034 	.word	0x08007034
 80060a8:	40021000 	.word	0x40021000
 80060ac:	007a1200 	.word	0x007a1200
 80060b0:	003d0900 	.word	0x003d0900

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	20000010 	.word	0x20000010

080060c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060cc:	f7ff fff2 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	0a1b      	lsrs	r3, r3, #8
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000
 80060ec:	08007db0 	.word	0x08007db0

080060f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060f8:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <RCC_Delay+0x34>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <RCC_Delay+0x38>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0a5b      	lsrs	r3, r3, #9
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800610c:	bf00      	nop
  }
  while (Delay --);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1e5a      	subs	r2, r3, #1
 8006112:	60fa      	str	r2, [r7, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f9      	bne.n	800610c <RCC_Delay+0x1c>
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr
 8006124:	20000010 	.word	0x20000010
 8006128:	10624dd3 	.word	0x10624dd3

0800612c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	613b      	str	r3, [r7, #16]
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d07d      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006148:	2300      	movs	r3, #0
 800614a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800614c:	4b4f      	ldr	r3, [pc, #316]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10d      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006158:	4b4c      	ldr	r3, [pc, #304]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	4a4b      	ldr	r2, [pc, #300]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006162:	61d3      	str	r3, [r2, #28]
 8006164:	4b49      	ldr	r3, [pc, #292]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006170:	2301      	movs	r3, #1
 8006172:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006174:	4b46      	ldr	r3, [pc, #280]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d118      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006180:	4b43      	ldr	r3, [pc, #268]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a42      	ldr	r2, [pc, #264]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800618c:	f7fd f9fa 	bl	8003584 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006192:	e008      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006194:	f7fd f9f6 	bl	8003584 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	; 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e06d      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a6:	4b3a      	ldr	r3, [pc, #232]	; (8006290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061b2:	4b36      	ldr	r3, [pc, #216]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d02e      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d027      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061d0:	4b2e      	ldr	r3, [pc, #184]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061da:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061dc:	2201      	movs	r2, #1
 80061de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061e0:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061e6:	4a29      	ldr	r2, [pc, #164]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d014      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f6:	f7fd f9c5 	bl	8003584 <HAL_GetTick>
 80061fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061fc:	e00a      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fe:	f7fd f9c1 	bl	8003584 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	f241 3288 	movw	r2, #5000	; 0x1388
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e036      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	4b1d      	ldr	r3, [pc, #116]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ee      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4917      	ldr	r1, [pc, #92]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622e:	4313      	orrs	r3, r2
 8006230:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	4a13      	ldr	r2, [pc, #76]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006242:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	490b      	ldr	r1, [pc, #44]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800625e:	4313      	orrs	r3, r2
 8006260:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d008      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800626e:	4b07      	ldr	r3, [pc, #28]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	4904      	ldr	r1, [pc, #16]	; (800628c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800627c:	4313      	orrs	r3, r2
 800627e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	40021000 	.word	0x40021000
 8006290:	40007000 	.word	0x40007000
 8006294:	42420440 	.word	0x42420440

08006298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e041      	b.n	800632e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fd f82e 	bl	8003320 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 f98e 	bl	80065f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <HAL_TIM_PWM_Start+0x24>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b01      	cmp	r3, #1
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	e022      	b.n	80063a2 <HAL_TIM_PWM_Start+0x6a>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b04      	cmp	r3, #4
 8006360:	d109      	bne.n	8006376 <HAL_TIM_PWM_Start+0x3e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	bf14      	ite	ne
 800636e:	2301      	movne	r3, #1
 8006370:	2300      	moveq	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	e015      	b.n	80063a2 <HAL_TIM_PWM_Start+0x6a>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b08      	cmp	r3, #8
 800637a:	d109      	bne.n	8006390 <HAL_TIM_PWM_Start+0x58>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	bf14      	ite	ne
 8006388:	2301      	movne	r3, #1
 800638a:	2300      	moveq	r3, #0
 800638c:	b2db      	uxtb	r3, r3
 800638e:	e008      	b.n	80063a2 <HAL_TIM_PWM_Start+0x6a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b01      	cmp	r3, #1
 800639a:	bf14      	ite	ne
 800639c:	2301      	movne	r3, #1
 800639e:	2300      	moveq	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e05e      	b.n	8006468 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <HAL_TIM_PWM_Start+0x82>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b8:	e013      	b.n	80063e2 <HAL_TIM_PWM_Start+0xaa>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d104      	bne.n	80063ca <HAL_TIM_PWM_Start+0x92>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c8:	e00b      	b.n	80063e2 <HAL_TIM_PWM_Start+0xaa>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d104      	bne.n	80063da <HAL_TIM_PWM_Start+0xa2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d8:	e003      	b.n	80063e2 <HAL_TIM_PWM_Start+0xaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2201      	movs	r2, #1
 80063e8:	6839      	ldr	r1, [r7, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 faee 	bl	80069cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <HAL_TIM_PWM_Start+0x138>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d107      	bne.n	800640a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006408:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a18      	ldr	r2, [pc, #96]	; (8006470 <HAL_TIM_PWM_Start+0x138>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <HAL_TIM_PWM_Start+0xfa>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d009      	beq.n	8006432 <HAL_TIM_PWM_Start+0xfa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a14      	ldr	r2, [pc, #80]	; (8006474 <HAL_TIM_PWM_Start+0x13c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_TIM_PWM_Start+0xfa>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a12      	ldr	r2, [pc, #72]	; (8006478 <HAL_TIM_PWM_Start+0x140>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d111      	bne.n	8006456 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b06      	cmp	r3, #6
 8006442:	d010      	beq.n	8006466 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	e007      	b.n	8006466 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40012c00 	.word	0x40012c00
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800

0800647c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006492:	2302      	movs	r3, #2
 8006494:	e0ac      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	f200 809f 	bhi.w	80065e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80064a6:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080065e5 	.word	0x080065e5
 80064b4:	080065e5 	.word	0x080065e5
 80064b8:	080065e5 	.word	0x080065e5
 80064bc:	08006521 	.word	0x08006521
 80064c0:	080065e5 	.word	0x080065e5
 80064c4:	080065e5 	.word	0x080065e5
 80064c8:	080065e5 	.word	0x080065e5
 80064cc:	08006563 	.word	0x08006563
 80064d0:	080065e5 	.word	0x080065e5
 80064d4:	080065e5 	.word	0x080065e5
 80064d8:	080065e5 	.word	0x080065e5
 80064dc:	080065a3 	.word	0x080065a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f8e8 	bl	80066bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0208 	orr.w	r2, r2, #8
 80064fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0204 	bic.w	r2, r2, #4
 800650a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6999      	ldr	r1, [r3, #24]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	619a      	str	r2, [r3, #24]
      break;
 800651e:	e062      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f92e 	bl	8006788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	619a      	str	r2, [r3, #24]
      break;
 8006560:	e041      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 f977 	bl	800685c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0208 	orr.w	r2, r2, #8
 800657c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0204 	bic.w	r2, r2, #4
 800658c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69d9      	ldr	r1, [r3, #28]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	61da      	str	r2, [r3, #28]
      break;
 80065a0:	e021      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f9c1 	bl	8006930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69d9      	ldr	r1, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	021a      	lsls	r2, r3, #8
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	61da      	str	r2, [r3, #28]
      break;
 80065e2:	e000      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80065e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <TIM_Base_SetConfig+0xb8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_Base_SetConfig+0x30>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006616:	d007      	beq.n	8006628 <TIM_Base_SetConfig+0x30>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <TIM_Base_SetConfig+0xbc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_Base_SetConfig+0x30>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a25      	ldr	r2, [pc, #148]	; (80066b8 <TIM_Base_SetConfig+0xc0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d108      	bne.n	800663a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <TIM_Base_SetConfig+0xb8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00b      	beq.n	800665a <TIM_Base_SetConfig+0x62>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006648:	d007      	beq.n	800665a <TIM_Base_SetConfig+0x62>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <TIM_Base_SetConfig+0xbc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_Base_SetConfig+0x62>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <TIM_Base_SetConfig+0xc0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d108      	bne.n	800666c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a07      	ldr	r2, [pc, #28]	; (80066b0 <TIM_Base_SetConfig+0xb8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bc80      	pop	{r7}
 80066ae:	4770      	bx	lr
 80066b0:	40012c00 	.word	0x40012c00
 80066b4:	40000400 	.word	0x40000400
 80066b8:	40000800 	.word	0x40000800

080066bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f023 0201 	bic.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0303 	bic.w	r3, r3, #3
 80066f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f023 0302 	bic.w	r3, r3, #2
 8006704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a1c      	ldr	r2, [pc, #112]	; (8006784 <TIM_OC1_SetConfig+0xc8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10c      	bne.n	8006732 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0308 	bic.w	r3, r3, #8
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f023 0304 	bic.w	r3, r3, #4
 8006730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a13      	ldr	r2, [pc, #76]	; (8006784 <TIM_OC1_SetConfig+0xc8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d111      	bne.n	800675e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	621a      	str	r2, [r3, #32]
}
 8006778:	bf00      	nop
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00

08006788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0210 	bic.w	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0320 	bic.w	r3, r3, #32
 80067d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <TIM_OC2_SetConfig+0xd0>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d10d      	bne.n	8006804 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a14      	ldr	r2, [pc, #80]	; (8006858 <TIM_OC2_SetConfig+0xd0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d113      	bne.n	8006834 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	bc80      	pop	{r7}
 8006856:	4770      	bx	lr
 8006858:	40012c00 	.word	0x40012c00

0800685c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1d      	ldr	r2, [pc, #116]	; (800692c <TIM_OC3_SetConfig+0xd0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d10d      	bne.n	80068d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a14      	ldr	r2, [pc, #80]	; (800692c <TIM_OC3_SetConfig+0xd0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d113      	bne.n	8006906 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40012c00 	.word	0x40012c00

08006930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	021b      	lsls	r3, r3, #8
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800697a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	031b      	lsls	r3, r3, #12
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <TIM_OC4_SetConfig+0x98>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d109      	bne.n	80069a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bc80      	pop	{r7}
 80069c6:	4770      	bx	lr
 80069c8:	40012c00 	.word	0x40012c00

080069cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2201      	movs	r2, #1
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1a      	ldr	r2, [r3, #32]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	401a      	ands	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	fa01 f303 	lsl.w	r3, r1, r3
 8006a04:	431a      	orrs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e046      	b.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a16      	ldr	r2, [pc, #88]	; (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00e      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a78:	d009      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a12      	ldr	r2, [pc, #72]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a10      	ldr	r2, [pc, #64]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800

08006ad0 <__errno>:
 8006ad0:	4b01      	ldr	r3, [pc, #4]	; (8006ad8 <__errno+0x8>)
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000001c 	.word	0x2000001c

08006adc <__libc_init_array>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	2600      	movs	r6, #0
 8006ae0:	4d0c      	ldr	r5, [pc, #48]	; (8006b14 <__libc_init_array+0x38>)
 8006ae2:	4c0d      	ldr	r4, [pc, #52]	; (8006b18 <__libc_init_array+0x3c>)
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	42a6      	cmp	r6, r4
 8006aea:	d109      	bne.n	8006b00 <__libc_init_array+0x24>
 8006aec:	f000 fa70 	bl	8006fd0 <_init>
 8006af0:	2600      	movs	r6, #0
 8006af2:	4d0a      	ldr	r5, [pc, #40]	; (8006b1c <__libc_init_array+0x40>)
 8006af4:	4c0a      	ldr	r4, [pc, #40]	; (8006b20 <__libc_init_array+0x44>)
 8006af6:	1b64      	subs	r4, r4, r5
 8006af8:	10a4      	asrs	r4, r4, #2
 8006afa:	42a6      	cmp	r6, r4
 8006afc:	d105      	bne.n	8006b0a <__libc_init_array+0x2e>
 8006afe:	bd70      	pop	{r4, r5, r6, pc}
 8006b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b04:	4798      	blx	r3
 8006b06:	3601      	adds	r6, #1
 8006b08:	e7ee      	b.n	8006ae8 <__libc_init_array+0xc>
 8006b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b0e:	4798      	blx	r3
 8006b10:	3601      	adds	r6, #1
 8006b12:	e7f2      	b.n	8006afa <__libc_init_array+0x1e>
 8006b14:	08007de0 	.word	0x08007de0
 8006b18:	08007de0 	.word	0x08007de0
 8006b1c:	08007de0 	.word	0x08007de0
 8006b20:	08007de4 	.word	0x08007de4

08006b24 <__itoa>:
 8006b24:	1e93      	subs	r3, r2, #2
 8006b26:	2b22      	cmp	r3, #34	; 0x22
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	d904      	bls.n	8006b38 <__itoa+0x14>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	461c      	mov	r4, r3
 8006b32:	700b      	strb	r3, [r1, #0]
 8006b34:	4620      	mov	r0, r4
 8006b36:	bd10      	pop	{r4, pc}
 8006b38:	2a0a      	cmp	r2, #10
 8006b3a:	d109      	bne.n	8006b50 <__itoa+0x2c>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	da07      	bge.n	8006b50 <__itoa+0x2c>
 8006b40:	232d      	movs	r3, #45	; 0x2d
 8006b42:	700b      	strb	r3, [r1, #0]
 8006b44:	2101      	movs	r1, #1
 8006b46:	4240      	negs	r0, r0
 8006b48:	4421      	add	r1, r4
 8006b4a:	f000 f80d 	bl	8006b68 <__utoa>
 8006b4e:	e7f1      	b.n	8006b34 <__itoa+0x10>
 8006b50:	2100      	movs	r1, #0
 8006b52:	e7f9      	b.n	8006b48 <__itoa+0x24>

08006b54 <itoa>:
 8006b54:	f7ff bfe6 	b.w	8006b24 <__itoa>

08006b58 <memset>:
 8006b58:	4603      	mov	r3, r0
 8006b5a:	4402      	add	r2, r0
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d100      	bne.n	8006b62 <memset+0xa>
 8006b60:	4770      	bx	lr
 8006b62:	f803 1b01 	strb.w	r1, [r3], #1
 8006b66:	e7f9      	b.n	8006b5c <memset+0x4>

08006b68 <__utoa>:
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6a:	b08b      	sub	sp, #44	; 0x2c
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	466e      	mov	r6, sp
 8006b72:	4c1d      	ldr	r4, [pc, #116]	; (8006be8 <__utoa+0x80>)
 8006b74:	f104 0c20 	add.w	ip, r4, #32
 8006b78:	4637      	mov	r7, r6
 8006b7a:	6820      	ldr	r0, [r4, #0]
 8006b7c:	6861      	ldr	r1, [r4, #4]
 8006b7e:	3408      	adds	r4, #8
 8006b80:	c703      	stmia	r7!, {r0, r1}
 8006b82:	4564      	cmp	r4, ip
 8006b84:	463e      	mov	r6, r7
 8006b86:	d1f7      	bne.n	8006b78 <__utoa+0x10>
 8006b88:	7921      	ldrb	r1, [r4, #4]
 8006b8a:	6820      	ldr	r0, [r4, #0]
 8006b8c:	7139      	strb	r1, [r7, #4]
 8006b8e:	1e91      	subs	r1, r2, #2
 8006b90:	2922      	cmp	r1, #34	; 0x22
 8006b92:	6038      	str	r0, [r7, #0]
 8006b94:	f04f 0100 	mov.w	r1, #0
 8006b98:	d904      	bls.n	8006ba4 <__utoa+0x3c>
 8006b9a:	7019      	strb	r1, [r3, #0]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	b00b      	add	sp, #44	; 0x2c
 8006ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ba4:	1e58      	subs	r0, r3, #1
 8006ba6:	4684      	mov	ip, r0
 8006ba8:	fbb5 f7f2 	udiv	r7, r5, r2
 8006bac:	fb02 5617 	mls	r6, r2, r7, r5
 8006bb0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006bb4:	4476      	add	r6, lr
 8006bb6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006bba:	460c      	mov	r4, r1
 8006bbc:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006bc0:	462e      	mov	r6, r5
 8006bc2:	42b2      	cmp	r2, r6
 8006bc4:	463d      	mov	r5, r7
 8006bc6:	f101 0101 	add.w	r1, r1, #1
 8006bca:	d9ed      	bls.n	8006ba8 <__utoa+0x40>
 8006bcc:	2200      	movs	r2, #0
 8006bce:	545a      	strb	r2, [r3, r1]
 8006bd0:	1919      	adds	r1, r3, r4
 8006bd2:	1aa5      	subs	r5, r4, r2
 8006bd4:	42aa      	cmp	r2, r5
 8006bd6:	dae2      	bge.n	8006b9e <__utoa+0x36>
 8006bd8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006bdc:	780e      	ldrb	r6, [r1, #0]
 8006bde:	3201      	adds	r2, #1
 8006be0:	7006      	strb	r6, [r0, #0]
 8006be2:	f801 5901 	strb.w	r5, [r1], #-1
 8006be6:	e7f4      	b.n	8006bd2 <__utoa+0x6a>
 8006be8:	08007db8 	.word	0x08007db8

08006bec <log>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	4604      	mov	r4, r0
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	f000 f835 	bl	8006c60 <__ieee754_log>
 8006bf6:	4b17      	ldr	r3, [pc, #92]	; (8006c54 <log+0x68>)
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8006bfe:	460f      	mov	r7, r1
 8006c00:	3301      	adds	r3, #1
 8006c02:	d01a      	beq.n	8006c3a <log+0x4e>
 8006c04:	4622      	mov	r2, r4
 8006c06:	462b      	mov	r3, r5
 8006c08:	4620      	mov	r0, r4
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	f7f9 fef6 	bl	80009fc <__aeabi_dcmpun>
 8006c10:	b998      	cbnz	r0, 8006c3a <log+0x4e>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 fee5 	bl	80009e8 <__aeabi_dcmpgt>
 8006c1e:	b960      	cbnz	r0, 8006c3a <log+0x4e>
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 feb6 	bl	8000998 <__aeabi_dcmpeq>
 8006c2c:	b140      	cbz	r0, 8006c40 <log+0x54>
 8006c2e:	f7ff ff4f 	bl	8006ad0 <__errno>
 8006c32:	2322      	movs	r3, #34	; 0x22
 8006c34:	2600      	movs	r6, #0
 8006c36:	4f08      	ldr	r7, [pc, #32]	; (8006c58 <log+0x6c>)
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c40:	f7ff ff46 	bl	8006ad0 <__errno>
 8006c44:	2321      	movs	r3, #33	; 0x21
 8006c46:	6003      	str	r3, [r0, #0]
 8006c48:	4804      	ldr	r0, [pc, #16]	; (8006c5c <log+0x70>)
 8006c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c4e:	f000 b9b9 	b.w	8006fc4 <nan>
 8006c52:	bf00      	nop
 8006c54:	20000080 	.word	0x20000080
 8006c58:	fff00000 	.word	0xfff00000
 8006c5c:	08007ddc 	.word	0x08007ddc

08006c60 <__ieee754_log>:
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	b087      	sub	sp, #28
 8006c70:	da24      	bge.n	8006cbc <__ieee754_log+0x5c>
 8006c72:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006c76:	4304      	orrs	r4, r0
 8006c78:	d108      	bne.n	8006c8c <__ieee754_log+0x2c>
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2000      	movs	r0, #0
 8006c80:	49cb      	ldr	r1, [pc, #812]	; (8006fb0 <__ieee754_log+0x350>)
 8006c82:	f7f9 fd4b 	bl	800071c <__aeabi_ddiv>
 8006c86:	b007      	add	sp, #28
 8006c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	da04      	bge.n	8006c9a <__ieee754_log+0x3a>
 8006c90:	f7f9 fa62 	bl	8000158 <__aeabi_dsub>
 8006c94:	2200      	movs	r2, #0
 8006c96:	2300      	movs	r3, #0
 8006c98:	e7f3      	b.n	8006c82 <__ieee754_log+0x22>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4bc5      	ldr	r3, [pc, #788]	; (8006fb4 <__ieee754_log+0x354>)
 8006c9e:	f7f9 fc13 	bl	80004c8 <__aeabi_dmul>
 8006ca2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	460d      	mov	r5, r1
 8006cac:	49c2      	ldr	r1, [pc, #776]	; (8006fb8 <__ieee754_log+0x358>)
 8006cae:	428d      	cmp	r5, r1
 8006cb0:	dd06      	ble.n	8006cc0 <__ieee754_log+0x60>
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f7f9 fa51 	bl	800015c <__adddf3>
 8006cba:	e7e4      	b.n	8006c86 <__ieee754_log+0x26>
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	e7f5      	b.n	8006cac <__ieee754_log+0x4c>
 8006cc0:	152c      	asrs	r4, r5, #20
 8006cc2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006cc6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8006cca:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006cce:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8006cd2:	4426      	add	r6, r4
 8006cd4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8006cd8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8006cdc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8006ce0:	ea41 0305 	orr.w	r3, r1, r5
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	2200      	movs	r2, #0
 8006cea:	4bb4      	ldr	r3, [pc, #720]	; (8006fbc <__ieee754_log+0x35c>)
 8006cec:	f7f9 fa34 	bl	8000158 <__aeabi_dsub>
 8006cf0:	1cab      	adds	r3, r5, #2
 8006cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	468b      	mov	fp, r1
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8006d04:	dc53      	bgt.n	8006dae <__ieee754_log+0x14e>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f7f9 fe46 	bl	8000998 <__aeabi_dcmpeq>
 8006d0c:	b1d0      	cbz	r0, 8006d44 <__ieee754_log+0xe4>
 8006d0e:	2c00      	cmp	r4, #0
 8006d10:	f000 8122 	beq.w	8006f58 <__ieee754_log+0x2f8>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7f9 fb6d 	bl	80003f4 <__aeabi_i2d>
 8006d1a:	a391      	add	r3, pc, #580	; (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	4606      	mov	r6, r0
 8006d22:	460f      	mov	r7, r1
 8006d24:	f7f9 fbd0 	bl	80004c8 <__aeabi_dmul>
 8006d28:	a38f      	add	r3, pc, #572	; (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	4630      	mov	r0, r6
 8006d34:	4639      	mov	r1, r7
 8006d36:	f7f9 fbc7 	bl	80004c8 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	e7b8      	b.n	8006cb6 <__ieee754_log+0x56>
 8006d44:	a38a      	add	r3, pc, #552	; (adr r3, 8006f70 <__ieee754_log+0x310>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	f7f9 fbbb 	bl	80004c8 <__aeabi_dmul>
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	2000      	movs	r0, #0
 8006d58:	4999      	ldr	r1, [pc, #612]	; (8006fc0 <__ieee754_log+0x360>)
 8006d5a:	f7f9 f9fd 	bl	8000158 <__aeabi_dsub>
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4606      	mov	r6, r0
 8006d62:	460f      	mov	r7, r1
 8006d64:	465b      	mov	r3, fp
 8006d66:	4650      	mov	r0, sl
 8006d68:	4659      	mov	r1, fp
 8006d6a:	f7f9 fbad 	bl	80004c8 <__aeabi_dmul>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4630      	mov	r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	f7f9 fba7 	bl	80004c8 <__aeabi_dmul>
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	b914      	cbnz	r4, 8006d86 <__ieee754_log+0x126>
 8006d80:	4632      	mov	r2, r6
 8006d82:	463b      	mov	r3, r7
 8006d84:	e0a2      	b.n	8006ecc <__ieee754_log+0x26c>
 8006d86:	4620      	mov	r0, r4
 8006d88:	f7f9 fb34 	bl	80003f4 <__aeabi_i2d>
 8006d8c:	a374      	add	r3, pc, #464	; (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	4680      	mov	r8, r0
 8006d94:	4689      	mov	r9, r1
 8006d96:	f7f9 fb97 	bl	80004c8 <__aeabi_dmul>
 8006d9a:	a373      	add	r3, pc, #460	; (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fb8e 	bl	80004c8 <__aeabi_dmul>
 8006dac:	e0a7      	b.n	8006efe <__ieee754_log+0x29e>
 8006dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006db2:	f7f9 f9d3 	bl	800015c <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4650      	mov	r0, sl
 8006dbc:	4659      	mov	r1, fp
 8006dbe:	f7f9 fcad 	bl	800071c <__aeabi_ddiv>
 8006dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7f9 fb14 	bl	80003f4 <__aeabi_i2d>
 8006dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f7f9 fb76 	bl	80004c8 <__aeabi_dmul>
 8006ddc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006de0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006de4:	4602      	mov	r2, r0
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	460b      	mov	r3, r1
 8006dea:	4606      	mov	r6, r0
 8006dec:	460f      	mov	r7, r1
 8006dee:	f7f9 fb6b 	bl	80004c8 <__aeabi_dmul>
 8006df2:	a361      	add	r3, pc, #388	; (adr r3, 8006f78 <__ieee754_log+0x318>)
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	4680      	mov	r8, r0
 8006dfa:	4689      	mov	r9, r1
 8006dfc:	f7f9 fb64 	bl	80004c8 <__aeabi_dmul>
 8006e00:	a35f      	add	r3, pc, #380	; (adr r3, 8006f80 <__ieee754_log+0x320>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 f9a9 	bl	800015c <__adddf3>
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	f7f9 fb5b 	bl	80004c8 <__aeabi_dmul>
 8006e12:	a35d      	add	r3, pc, #372	; (adr r3, 8006f88 <__ieee754_log+0x328>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 f9a0 	bl	800015c <__adddf3>
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	f7f9 fb52 	bl	80004c8 <__aeabi_dmul>
 8006e24:	a35a      	add	r3, pc, #360	; (adr r3, 8006f90 <__ieee754_log+0x330>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 f997 	bl	800015c <__adddf3>
 8006e2e:	4632      	mov	r2, r6
 8006e30:	463b      	mov	r3, r7
 8006e32:	f7f9 fb49 	bl	80004c8 <__aeabi_dmul>
 8006e36:	a358      	add	r3, pc, #352	; (adr r3, 8006f98 <__ieee754_log+0x338>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	460f      	mov	r7, r1
 8006e40:	4640      	mov	r0, r8
 8006e42:	4649      	mov	r1, r9
 8006e44:	f7f9 fb40 	bl	80004c8 <__aeabi_dmul>
 8006e48:	a355      	add	r3, pc, #340	; (adr r3, 8006fa0 <__ieee754_log+0x340>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 f985 	bl	800015c <__adddf3>
 8006e52:	4642      	mov	r2, r8
 8006e54:	464b      	mov	r3, r9
 8006e56:	f7f9 fb37 	bl	80004c8 <__aeabi_dmul>
 8006e5a:	a353      	add	r3, pc, #332	; (adr r3, 8006fa8 <__ieee754_log+0x348>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f97c 	bl	800015c <__adddf3>
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	f7f9 fb2e 	bl	80004c8 <__aeabi_dmul>
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4639      	mov	r1, r7
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7f9 f972 	bl	800015c <__adddf3>
 8006e78:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006e7c:	9b05      	ldr	r3, [sp, #20]
 8006e7e:	3551      	adds	r5, #81	; 0x51
 8006e80:	431d      	orrs	r5, r3
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	4680      	mov	r8, r0
 8006e86:	4689      	mov	r9, r1
 8006e88:	dd48      	ble.n	8006f1c <__ieee754_log+0x2bc>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4b4c      	ldr	r3, [pc, #304]	; (8006fc0 <__ieee754_log+0x360>)
 8006e8e:	4650      	mov	r0, sl
 8006e90:	4659      	mov	r1, fp
 8006e92:	f7f9 fb19 	bl	80004c8 <__aeabi_dmul>
 8006e96:	4652      	mov	r2, sl
 8006e98:	465b      	mov	r3, fp
 8006e9a:	f7f9 fb15 	bl	80004c8 <__aeabi_dmul>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460f      	mov	r7, r1
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	f7f9 f957 	bl	800015c <__adddf3>
 8006eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eb2:	f7f9 fb09 	bl	80004c8 <__aeabi_dmul>
 8006eb6:	4680      	mov	r8, r0
 8006eb8:	4689      	mov	r9, r1
 8006eba:	b964      	cbnz	r4, 8006ed6 <__ieee754_log+0x276>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 f948 	bl	8000158 <__aeabi_dsub>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4650      	mov	r0, sl
 8006ece:	4659      	mov	r1, fp
 8006ed0:	f7f9 f942 	bl	8000158 <__aeabi_dsub>
 8006ed4:	e6d7      	b.n	8006c86 <__ieee754_log+0x26>
 8006ed6:	a322      	add	r3, pc, #136	; (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee0:	f7f9 faf2 	bl	80004c8 <__aeabi_dmul>
 8006ee4:	a320      	add	r3, pc, #128	; (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	4604      	mov	r4, r0
 8006eec:	460d      	mov	r5, r1
 8006eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef2:	f7f9 fae9 	bl	80004c8 <__aeabi_dmul>
 8006ef6:	4642      	mov	r2, r8
 8006ef8:	464b      	mov	r3, r9
 8006efa:	f7f9 f92f 	bl	800015c <__adddf3>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4630      	mov	r0, r6
 8006f04:	4639      	mov	r1, r7
 8006f06:	f7f9 f927 	bl	8000158 <__aeabi_dsub>
 8006f0a:	4652      	mov	r2, sl
 8006f0c:	465b      	mov	r3, fp
 8006f0e:	f7f9 f923 	bl	8000158 <__aeabi_dsub>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	e7d9      	b.n	8006ed0 <__ieee754_log+0x270>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4650      	mov	r0, sl
 8006f22:	4659      	mov	r1, fp
 8006f24:	f7f9 f918 	bl	8000158 <__aeabi_dsub>
 8006f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f2c:	f7f9 facc 	bl	80004c8 <__aeabi_dmul>
 8006f30:	4606      	mov	r6, r0
 8006f32:	460f      	mov	r7, r1
 8006f34:	2c00      	cmp	r4, #0
 8006f36:	f43f af23 	beq.w	8006d80 <__ieee754_log+0x120>
 8006f3a:	a309      	add	r3, pc, #36	; (adr r3, 8006f60 <__ieee754_log+0x300>)
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f44:	f7f9 fac0 	bl	80004c8 <__aeabi_dmul>
 8006f48:	a307      	add	r3, pc, #28	; (adr r3, 8006f68 <__ieee754_log+0x308>)
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	4604      	mov	r4, r0
 8006f50:	460d      	mov	r5, r1
 8006f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f56:	e727      	b.n	8006da8 <__ieee754_log+0x148>
 8006f58:	2000      	movs	r0, #0
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	e693      	b.n	8006c86 <__ieee754_log+0x26>
 8006f5e:	bf00      	nop
 8006f60:	fee00000 	.word	0xfee00000
 8006f64:	3fe62e42 	.word	0x3fe62e42
 8006f68:	35793c76 	.word	0x35793c76
 8006f6c:	3dea39ef 	.word	0x3dea39ef
 8006f70:	55555555 	.word	0x55555555
 8006f74:	3fd55555 	.word	0x3fd55555
 8006f78:	df3e5244 	.word	0xdf3e5244
 8006f7c:	3fc2f112 	.word	0x3fc2f112
 8006f80:	96cb03de 	.word	0x96cb03de
 8006f84:	3fc74664 	.word	0x3fc74664
 8006f88:	94229359 	.word	0x94229359
 8006f8c:	3fd24924 	.word	0x3fd24924
 8006f90:	55555593 	.word	0x55555593
 8006f94:	3fe55555 	.word	0x3fe55555
 8006f98:	d078c69f 	.word	0xd078c69f
 8006f9c:	3fc39a09 	.word	0x3fc39a09
 8006fa0:	1d8e78af 	.word	0x1d8e78af
 8006fa4:	3fcc71c5 	.word	0x3fcc71c5
 8006fa8:	9997fa04 	.word	0x9997fa04
 8006fac:	3fd99999 	.word	0x3fd99999
 8006fb0:	c3500000 	.word	0xc3500000
 8006fb4:	43500000 	.word	0x43500000
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	3fe00000 	.word	0x3fe00000

08006fc4 <nan>:
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	4901      	ldr	r1, [pc, #4]	; (8006fcc <nan+0x8>)
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	7ff80000 	.word	0x7ff80000

08006fd0 <_init>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	bf00      	nop
 8006fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd6:	bc08      	pop	{r3}
 8006fd8:	469e      	mov	lr, r3
 8006fda:	4770      	bx	lr

08006fdc <_fini>:
 8006fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fde:	bf00      	nop
 8006fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe2:	bc08      	pop	{r3}
 8006fe4:	469e      	mov	lr, r3
 8006fe6:	4770      	bx	lr
