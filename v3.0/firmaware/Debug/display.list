
display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a40  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dac  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068fc  080068fc  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080068fc  080068fc  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068fc  080068fc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000084  08006988  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08006988  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb95  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eac  00000000  00000000  0002bc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001795b  00000000  00000000  0002ed70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c503  00000000  00000000  000466cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087633  00000000  00000000  00052bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b28  00000000  00000000  000da254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b38 	.word	0x08005b38

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08005b38 	.word	0x08005b38

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <trimm>:
uint8_t dataDAC [3] = {0x40, 0xFF, 0xFF};
uint32_t ADCout [4];


char* trimm(float f)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	static char trimmed [4];

	f *= 100;
 80010b8:	4929      	ldr	r1, [pc, #164]	; (8001160 <trimm+0xb0>)
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fe12 	bl	8000ce4 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	607b      	str	r3, [r7, #4]
	uint16_t g = f;
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffd3 	bl	8001070 <__aeabi_f2uiz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	81bb      	strh	r3, [r7, #12]
	itoa(g, trimmed, 10);
 80010ce:	89bb      	ldrh	r3, [r7, #12]
 80010d0:	220a      	movs	r2, #10
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <trimm+0xb4>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 faf1 	bl	80056bc <itoa>

	if(g<10)
 80010da:	89bb      	ldrh	r3, [r7, #12]
 80010dc:	2b09      	cmp	r3, #9
 80010de:	d80c      	bhi.n	80010fa <trimm+0x4a>
	{
		trimmed[3] = trimmed[0];
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <trimm+0xb4>)
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <trimm+0xb4>)
 80010e6:	70da      	strb	r2, [r3, #3]
		trimmed[2] = '0';
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <trimm+0xb4>)
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <trimm+0xb4>)
 80010f0:	2230      	movs	r2, #48	; 0x30
 80010f2:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <trimm+0xb4>)
 80010f6:	2220      	movs	r2, #32
 80010f8:	701a      	strb	r2, [r3, #0]


	}
	if((g<100)&&(g>9))
 80010fa:	89bb      	ldrh	r3, [r7, #12]
 80010fc:	2b63      	cmp	r3, #99	; 0x63
 80010fe:	d810      	bhi.n	8001122 <trimm+0x72>
 8001100:	89bb      	ldrh	r3, [r7, #12]
 8001102:	2b09      	cmp	r3, #9
 8001104:	d90d      	bls.n	8001122 <trimm+0x72>
	{
		trimmed[3] = trimmed[1];
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <trimm+0xb4>)
 8001108:	785a      	ldrb	r2, [r3, #1]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <trimm+0xb4>)
 800110c:	70da      	strb	r2, [r3, #3]
		trimmed[2] = trimmed[0];
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <trimm+0xb4>)
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <trimm+0xb4>)
 8001114:	709a      	strb	r2, [r3, #2]
		trimmed[1] = '0';
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <trimm+0xb4>)
 8001118:	2230      	movs	r2, #48	; 0x30
 800111a:	705a      	strb	r2, [r3, #1]
		trimmed[0] = ' ';
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <trimm+0xb4>)
 800111e:	2220      	movs	r2, #32
 8001120:	701a      	strb	r2, [r3, #0]

	}
	if((g<1000)&&(g>99))
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001128:	d215      	bcs.n	8001156 <trimm+0xa6>
 800112a:	89bb      	ldrh	r3, [r7, #12]
 800112c:	2b63      	cmp	r3, #99	; 0x63
 800112e:	d912      	bls.n	8001156 <trimm+0xa6>
	{
		for(uint8_t i = 3; i>0; i--)
 8001130:	2303      	movs	r3, #3
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e009      	b.n	800114a <trimm+0x9a>
		{
			trimmed[i] = trimmed[i-1];
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <trimm+0xb4>)
 800113e:	5c89      	ldrb	r1, [r1, r2]
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <trimm+0xb4>)
 8001142:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 3; i>0; i--)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	3b01      	subs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f2      	bne.n	8001136 <trimm+0x86>
		}
		trimmed[0] = ' ';
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <trimm+0xb4>)
 8001152:	2220      	movs	r2, #32
 8001154:	701a      	strb	r2, [r3, #0]

	}

	return trimmed;
 8001156:	4b03      	ldr	r3, [pc, #12]	; (8001164 <trimm+0xb4>)
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	42c80000 	.word	0x42c80000
 8001164:	200000b0 	.word	0x200000b0

08001168 <drawlogoC>:
void drawlogoC (uint8_t x, uint8_t y){
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af02      	add	r7, sp, #8
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
	  SSD1306_DrawLine((5+x), (y+5), (5+x), (y+11), 1);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	b29b      	uxth	r3, r3
 800117c:	3305      	adds	r3, #5
 800117e:	b298      	uxth	r0, r3
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	b29b      	uxth	r3, r3
 8001184:	3305      	adds	r3, #5
 8001186:	b299      	uxth	r1, r3
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	b29b      	uxth	r3, r3
 800118c:	3305      	adds	r3, #5
 800118e:	b29a      	uxth	r2, r3
 8001190:	79bb      	ldrb	r3, [r7, #6]
 8001192:	b29b      	uxth	r3, r3
 8001194:	330b      	adds	r3, #11
 8001196:	b29b      	uxth	r3, r3
 8001198:	2401      	movs	r4, #1
 800119a:	9400      	str	r4, [sp, #0]
 800119c:	f001 f8ae 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((6+x), (y+3), (6+x), (y+13), 1);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	3306      	adds	r3, #6
 80011a6:	b298      	uxth	r0, r3
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3303      	adds	r3, #3
 80011ae:	b299      	uxth	r1, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3306      	adds	r3, #6
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	330d      	adds	r3, #13
 80011be:	b29b      	uxth	r3, r3
 80011c0:	2401      	movs	r4, #1
 80011c2:	9400      	str	r4, [sp, #0]
 80011c4:	f001 f89a 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+3), (7+x), (y+5), 1);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3307      	adds	r3, #7
 80011ce:	b298      	uxth	r0, r3
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3303      	adds	r3, #3
 80011d6:	b299      	uxth	r1, r3
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	3307      	adds	r3, #7
 80011de:	b29a      	uxth	r2, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3305      	adds	r3, #5
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	2401      	movs	r4, #1
 80011ea:	9400      	str	r4, [sp, #0]
 80011ec:	f001 f886 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((7+x), (y+11), (7+x), (y+13), 1);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3307      	adds	r3, #7
 80011f6:	b298      	uxth	r0, r3
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	330b      	adds	r3, #11
 80011fe:	b299      	uxth	r1, r3
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	b29b      	uxth	r3, r3
 8001204:	3307      	adds	r3, #7
 8001206:	b29a      	uxth	r2, r3
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	b29b      	uxth	r3, r3
 800120c:	330d      	adds	r3, #13
 800120e:	b29b      	uxth	r3, r3
 8001210:	2401      	movs	r4, #1
 8001212:	9400      	str	r4, [sp, #0]
 8001214:	f001 f872 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+14), (10+x), (y+14), 1);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3308      	adds	r3, #8
 800121e:	b298      	uxth	r0, r3
 8001220:	79bb      	ldrb	r3, [r7, #6]
 8001222:	b29b      	uxth	r3, r3
 8001224:	330e      	adds	r3, #14
 8001226:	b299      	uxth	r1, r3
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	b29b      	uxth	r3, r3
 800122c:	330a      	adds	r3, #10
 800122e:	b29a      	uxth	r2, r3
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	b29b      	uxth	r3, r3
 8001234:	330e      	adds	r3, #14
 8001236:	b29b      	uxth	r3, r3
 8001238:	2401      	movs	r4, #1
 800123a:	9400      	str	r4, [sp, #0]
 800123c:	f001 f85e 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+13), (10+x), (y+13), 1);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	b29b      	uxth	r3, r3
 8001244:	3308      	adds	r3, #8
 8001246:	b298      	uxth	r0, r3
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	b29b      	uxth	r3, r3
 800124c:	330d      	adds	r3, #13
 800124e:	b299      	uxth	r1, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	b29b      	uxth	r3, r3
 8001254:	330a      	adds	r3, #10
 8001256:	b29a      	uxth	r2, r3
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	b29b      	uxth	r3, r3
 800125c:	330d      	adds	r3, #13
 800125e:	b29b      	uxth	r3, r3
 8001260:	2401      	movs	r4, #1
 8001262:	9400      	str	r4, [sp, #0]
 8001264:	f001 f84a 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+2), (10+x), (y+2), 1);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	b29b      	uxth	r3, r3
 800126c:	3308      	adds	r3, #8
 800126e:	b298      	uxth	r0, r3
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	b29b      	uxth	r3, r3
 8001274:	3302      	adds	r3, #2
 8001276:	b299      	uxth	r1, r3
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	b29b      	uxth	r3, r3
 800127c:	330a      	adds	r3, #10
 800127e:	b29a      	uxth	r2, r3
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	b29b      	uxth	r3, r3
 8001284:	3302      	adds	r3, #2
 8001286:	b29b      	uxth	r3, r3
 8001288:	2401      	movs	r4, #1
 800128a:	9400      	str	r4, [sp, #0]
 800128c:	f001 f836 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((8+x), (y+3), (10+x), (y+3), 1);
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	b29b      	uxth	r3, r3
 8001294:	3308      	adds	r3, #8
 8001296:	b298      	uxth	r0, r3
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	b29b      	uxth	r3, r3
 800129c:	3303      	adds	r3, #3
 800129e:	b299      	uxth	r1, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	330a      	adds	r3, #10
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3303      	adds	r3, #3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2401      	movs	r4, #1
 80012b2:	9400      	str	r4, [sp, #0]
 80012b4:	f001 f822 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+3), (11+x), (y+4), 1);
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	330b      	adds	r3, #11
 80012be:	b298      	uxth	r0, r3
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3303      	adds	r3, #3
 80012c6:	b299      	uxth	r1, r3
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	330b      	adds	r3, #11
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	3304      	adds	r3, #4
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2401      	movs	r4, #1
 80012da:	9400      	str	r4, [sp, #0]
 80012dc:	f001 f80e 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((11+x), (y+13), (11+x), (y+12), 1);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	330b      	adds	r3, #11
 80012e6:	b298      	uxth	r0, r3
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	330d      	adds	r3, #13
 80012ee:	b299      	uxth	r1, r3
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	330b      	adds	r3, #11
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	330c      	adds	r3, #12
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2401      	movs	r4, #1
 8001302:	9400      	str	r4, [sp, #0]
 8001304:	f000 fffa 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+4), (12+x), (y+6), 1);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	b29b      	uxth	r3, r3
 800130c:	330c      	adds	r3, #12
 800130e:	b298      	uxth	r0, r3
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3304      	adds	r3, #4
 8001316:	b299      	uxth	r1, r3
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	b29b      	uxth	r3, r3
 800131c:	330c      	adds	r3, #12
 800131e:	b29a      	uxth	r2, r3
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	b29b      	uxth	r3, r3
 8001324:	3306      	adds	r3, #6
 8001326:	b29b      	uxth	r3, r3
 8001328:	2401      	movs	r4, #1
 800132a:	9400      	str	r4, [sp, #0]
 800132c:	f000 ffe6 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((12+x), (y+12), (12+x), (y+10), 1);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	b29b      	uxth	r3, r3
 8001334:	330c      	adds	r3, #12
 8001336:	b298      	uxth	r0, r3
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	b29b      	uxth	r3, r3
 800133c:	330c      	adds	r3, #12
 800133e:	b299      	uxth	r1, r3
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	b29b      	uxth	r3, r3
 8001344:	330c      	adds	r3, #12
 8001346:	b29a      	uxth	r2, r3
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	b29b      	uxth	r3, r3
 800134c:	330a      	adds	r3, #10
 800134e:	b29b      	uxth	r3, r3
 8001350:	2401      	movs	r4, #1
 8001352:	9400      	str	r4, [sp, #0]
 8001354:	f000 ffd2 	bl	80022fc <SSD1306_DrawLine>
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bd90      	pop	{r4, r7, pc}

08001360 <drawmenu1>:
void drawmenu1(uint8_t cursorm1, uint8_t cvcc, float x, float y)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08b      	sub	sp, #44	; 0x2c
 8001364:	af02      	add	r7, sp, #8
 8001366:	60ba      	str	r2, [r7, #8]
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	460b      	mov	r3, r1
 8001370:	73bb      	strb	r3, [r7, #14]
	  SSD1306_Clear();
 8001372:	f001 f8be 	bl	80024f2 <SSD1306_Clear>
	  cursorm1 = ~cursorm1;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	43db      	mvns	r3, r3
 800137a:	73fb      	strb	r3, [r7, #15]
	  char* mecha = trimm(y);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fe97 	bl	80010b0 <trimm>
 8001382:	61b8      	str	r0, [r7, #24]
	  SSD1306_GotoXY (26,3);
 8001384:	2103      	movs	r1, #3
 8001386:	201a      	movs	r0, #26
 8001388:	f000 ff22 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[0], &Font_11x18, ((cursorm1 & 0x08)>>3));
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	7818      	ldrb	r0, [r3, #0]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	10db      	asrs	r3, r3, #3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4952      	ldr	r1, [pc, #328]	; (80014e8 <drawmenu1+0x188>)
 80013a0:	f000 ff2c 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (37,3);
 80013a4:	2103      	movs	r1, #3
 80013a6:	2025      	movs	r0, #37	; 0x25
 80013a8:	f000 ff12 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[1], &Font_11x18, ((cursorm1 & 0x04)>>2));
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3301      	adds	r3, #1
 80013b0:	7818      	ldrb	r0, [r3, #0]
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	109b      	asrs	r3, r3, #2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	4949      	ldr	r1, [pc, #292]	; (80014e8 <drawmenu1+0x188>)
 80013c2:	f000 ff1b 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (48,3);
 80013c6:	2103      	movs	r1, #3
 80013c8:	2030      	movs	r0, #48	; 0x30
 80013ca:	f000 ff01 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	4945      	ldr	r1, [pc, #276]	; (80014e8 <drawmenu1+0x188>)
 80013d2:	202c      	movs	r0, #44	; 0x2c
 80013d4:	f000 ff12 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (59,3);
 80013d8:	2103      	movs	r1, #3
 80013da:	203b      	movs	r0, #59	; 0x3b
 80013dc:	f000 fef8 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[2], &Font_11x18, ((cursorm1 & 0x02)>>1));
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	3302      	adds	r3, #2
 80013e4:	7818      	ldrb	r0, [r3, #0]
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	105b      	asrs	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	493c      	ldr	r1, [pc, #240]	; (80014e8 <drawmenu1+0x188>)
 80013f6:	f000 ff01 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (70,3);
 80013fa:	2103      	movs	r1, #3
 80013fc:	2046      	movs	r0, #70	; 0x46
 80013fe:	f000 fee7 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (mecha[3], &Font_11x18, (cursorm1 & 0x01));
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	3303      	adds	r3, #3
 8001406:	7818      	ldrb	r0, [r3, #0]
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4935      	ldr	r1, [pc, #212]	; (80014e8 <drawmenu1+0x188>)
 8001414:	f000 fef2 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (107,3);
 8001418:	2103      	movs	r1, #3
 800141a:	206b      	movs	r0, #107	; 0x6b
 800141c:	f000 fed8 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc('V', &Font_11x18, 1);
 8001420:	2201      	movs	r2, #1
 8001422:	4931      	ldr	r1, [pc, #196]	; (80014e8 <drawmenu1+0x188>)
 8001424:	2056      	movs	r0, #86	; 0x56
 8001426:	f000 fee9 	bl	80021fc <SSD1306_Putc>
	  char* proud = trimm(x);
 800142a:	68b8      	ldr	r0, [r7, #8]
 800142c:	f7ff fe40 	bl	80010b0 <trimm>
 8001430:	6178      	str	r0, [r7, #20]
	  SSD1306_GotoXY (26,25);
 8001432:	2119      	movs	r1, #25
 8001434:	201a      	movs	r0, #26
 8001436:	f000 fecb 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[0], &Font_11x18, ((cursorm1 & 0x80)>>7));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	7818      	ldrb	r0, [r3, #0]
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	09db      	lsrs	r3, r3, #7
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4928      	ldr	r1, [pc, #160]	; (80014e8 <drawmenu1+0x188>)
 8001448:	f000 fed8 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (37,25);
 800144c:	2119      	movs	r1, #25
 800144e:	2025      	movs	r0, #37	; 0x25
 8001450:	f000 febe 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[1], &Font_11x18, ((cursorm1 & 0x40)>>6));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	7818      	ldrb	r0, [r3, #0]
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	119b      	asrs	r3, r3, #6
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	491f      	ldr	r1, [pc, #124]	; (80014e8 <drawmenu1+0x188>)
 800146a:	f000 fec7 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (48,25);
 800146e:	2119      	movs	r1, #25
 8001470:	2030      	movs	r0, #48	; 0x30
 8001472:	f000 fead 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc(',', &Font_11x18, 1);
 8001476:	2201      	movs	r2, #1
 8001478:	491b      	ldr	r1, [pc, #108]	; (80014e8 <drawmenu1+0x188>)
 800147a:	202c      	movs	r0, #44	; 0x2c
 800147c:	f000 febe 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (59,25);
 8001480:	2119      	movs	r1, #25
 8001482:	203b      	movs	r0, #59	; 0x3b
 8001484:	f000 fea4 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[2], &Font_11x18, ((cursorm1 & 0x20)>>5));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3302      	adds	r3, #2
 800148c:	7818      	ldrb	r0, [r3, #0]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	115b      	asrs	r3, r3, #5
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	4912      	ldr	r1, [pc, #72]	; (80014e8 <drawmenu1+0x188>)
 800149e:	f000 fead 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (70,25);
 80014a2:	2119      	movs	r1, #25
 80014a4:	2046      	movs	r0, #70	; 0x46
 80014a6:	f000 fe93 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc (proud[3], &Font_11x18, ((cursorm1 & 0x10)>>4));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3303      	adds	r3, #3
 80014ae:	7818      	ldrb	r0, [r3, #0]
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	111b      	asrs	r3, r3, #4
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	490a      	ldr	r1, [pc, #40]	; (80014e8 <drawmenu1+0x188>)
 80014c0:	f000 fe9c 	bl	80021fc <SSD1306_Putc>
	  SSD1306_GotoXY (107,25);
 80014c4:	2119      	movs	r1, #25
 80014c6:	206b      	movs	r0, #107	; 0x6b
 80014c8:	f000 fe82 	bl	80021d0 <SSD1306_GotoXY>
	  SSD1306_Putc('A', &Font_11x18, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	4906      	ldr	r1, [pc, #24]	; (80014e8 <drawmenu1+0x188>)
 80014d0:	2041      	movs	r0, #65	; 0x41
 80014d2:	f000 fe93 	bl	80021fc <SSD1306_Putc>
	  uint8_t xcvcc = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	77fb      	strb	r3, [r7, #31]
	  uint8_t ycvcc = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	77bb      	strb	r3, [r7, #30]
	  if (cvcc) {
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80c5 	beq.w	8001670 <drawmenu1+0x310>
 80014e6:	e001      	b.n	80014ec <drawmenu1+0x18c>
 80014e8:	20000000 	.word	0x20000000
		  xcvcc = 81;
 80014ec:	2351      	movs	r3, #81	; 0x51
 80014ee:	77fb      	strb	r3, [r7, #31]
		  ycvcc = 45;
 80014f0:	232d      	movs	r3, #45	; 0x2d
 80014f2:	77bb      	strb	r3, [r7, #30]
		  drawlogoC(92, ycvcc);
 80014f4:	7fbb      	ldrb	r3, [r7, #30]
 80014f6:	4619      	mov	r1, r3
 80014f8:	205c      	movs	r0, #92	; 0x5c
 80014fa:	f7ff fe35 	bl	8001168 <drawlogoC>
		  SSD1306_DrawLine((5+xcvcc), (ycvcc+2), (5+xcvcc), (ycvcc+6), 1);
 80014fe:	7ffb      	ldrb	r3, [r7, #31]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3305      	adds	r3, #5
 8001504:	b298      	uxth	r0, r3
 8001506:	7fbb      	ldrb	r3, [r7, #30]
 8001508:	b29b      	uxth	r3, r3
 800150a:	3302      	adds	r3, #2
 800150c:	b299      	uxth	r1, r3
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	b29b      	uxth	r3, r3
 8001512:	3305      	adds	r3, #5
 8001514:	b29a      	uxth	r2, r3
 8001516:	7fbb      	ldrb	r3, [r7, #30]
 8001518:	b29b      	uxth	r3, r3
 800151a:	3306      	adds	r3, #6
 800151c:	b29b      	uxth	r3, r3
 800151e:	2401      	movs	r4, #1
 8001520:	9400      	str	r4, [sp, #0]
 8001522:	f000 feeb 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((13+xcvcc), (ycvcc+2), (13+xcvcc), (ycvcc+6), 1);
 8001526:	7ffb      	ldrb	r3, [r7, #31]
 8001528:	b29b      	uxth	r3, r3
 800152a:	330d      	adds	r3, #13
 800152c:	b298      	uxth	r0, r3
 800152e:	7fbb      	ldrb	r3, [r7, #30]
 8001530:	b29b      	uxth	r3, r3
 8001532:	3302      	adds	r3, #2
 8001534:	b299      	uxth	r1, r3
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	b29b      	uxth	r3, r3
 800153a:	330d      	adds	r3, #13
 800153c:	b29a      	uxth	r2, r3
 800153e:	7fbb      	ldrb	r3, [r7, #30]
 8001540:	b29b      	uxth	r3, r3
 8001542:	3306      	adds	r3, #6
 8001544:	b29b      	uxth	r3, r3
 8001546:	2401      	movs	r4, #1
 8001548:	9400      	str	r4, [sp, #0]
 800154a:	f000 fed7 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((6+xcvcc), (ycvcc+2), (6+xcvcc), (ycvcc+11), 1);
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	b29b      	uxth	r3, r3
 8001552:	3306      	adds	r3, #6
 8001554:	b298      	uxth	r0, r3
 8001556:	7fbb      	ldrb	r3, [r7, #30]
 8001558:	b29b      	uxth	r3, r3
 800155a:	3302      	adds	r3, #2
 800155c:	b299      	uxth	r1, r3
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	b29b      	uxth	r3, r3
 8001562:	3306      	adds	r3, #6
 8001564:	b29a      	uxth	r2, r3
 8001566:	7fbb      	ldrb	r3, [r7, #30]
 8001568:	b29b      	uxth	r3, r3
 800156a:	330b      	adds	r3, #11
 800156c:	b29b      	uxth	r3, r3
 800156e:	2401      	movs	r4, #1
 8001570:	9400      	str	r4, [sp, #0]
 8001572:	f000 fec3 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((12+xcvcc), (ycvcc+2), (12+xcvcc), (ycvcc+11), 1);
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	b29b      	uxth	r3, r3
 800157a:	330c      	adds	r3, #12
 800157c:	b298      	uxth	r0, r3
 800157e:	7fbb      	ldrb	r3, [r7, #30]
 8001580:	b29b      	uxth	r3, r3
 8001582:	3302      	adds	r3, #2
 8001584:	b299      	uxth	r1, r3
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	b29b      	uxth	r3, r3
 800158a:	330c      	adds	r3, #12
 800158c:	b29a      	uxth	r2, r3
 800158e:	7fbb      	ldrb	r3, [r7, #30]
 8001590:	b29b      	uxth	r3, r3
 8001592:	330b      	adds	r3, #11
 8001594:	b29b      	uxth	r3, r3
 8001596:	2401      	movs	r4, #1
 8001598:	9400      	str	r4, [sp, #0]
 800159a:	f000 feaf 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((7+xcvcc), (ycvcc+6), (7+xcvcc), (ycvcc+13), 1);
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3307      	adds	r3, #7
 80015a4:	b298      	uxth	r0, r3
 80015a6:	7fbb      	ldrb	r3, [r7, #30]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	3306      	adds	r3, #6
 80015ac:	b299      	uxth	r1, r3
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3307      	adds	r3, #7
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	7fbb      	ldrb	r3, [r7, #30]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	330d      	adds	r3, #13
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2401      	movs	r4, #1
 80015c0:	9400      	str	r4, [sp, #0]
 80015c2:	f000 fe9b 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((11+xcvcc), (ycvcc+6), (11+xcvcc), (ycvcc+13), 1);
 80015c6:	7ffb      	ldrb	r3, [r7, #31]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	330b      	adds	r3, #11
 80015cc:	b298      	uxth	r0, r3
 80015ce:	7fbb      	ldrb	r3, [r7, #30]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3306      	adds	r3, #6
 80015d4:	b299      	uxth	r1, r3
 80015d6:	7ffb      	ldrb	r3, [r7, #31]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	330b      	adds	r3, #11
 80015dc:	b29a      	uxth	r2, r3
 80015de:	7fbb      	ldrb	r3, [r7, #30]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	330d      	adds	r3, #13
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2401      	movs	r4, #1
 80015e8:	9400      	str	r4, [sp, #0]
 80015ea:	f000 fe87 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((8+xcvcc), (ycvcc+11), (8+xcvcc), (ycvcc+14), 1);
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3308      	adds	r3, #8
 80015f4:	b298      	uxth	r0, r3
 80015f6:	7fbb      	ldrb	r3, [r7, #30]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	330b      	adds	r3, #11
 80015fc:	b299      	uxth	r1, r3
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	b29b      	uxth	r3, r3
 8001602:	3308      	adds	r3, #8
 8001604:	b29a      	uxth	r2, r3
 8001606:	7fbb      	ldrb	r3, [r7, #30]
 8001608:	b29b      	uxth	r3, r3
 800160a:	330e      	adds	r3, #14
 800160c:	b29b      	uxth	r3, r3
 800160e:	2401      	movs	r4, #1
 8001610:	9400      	str	r4, [sp, #0]
 8001612:	f000 fe73 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawLine((10+xcvcc), (ycvcc+11), (10+xcvcc), (ycvcc+14), 1);
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	b29b      	uxth	r3, r3
 800161a:	330a      	adds	r3, #10
 800161c:	b298      	uxth	r0, r3
 800161e:	7fbb      	ldrb	r3, [r7, #30]
 8001620:	b29b      	uxth	r3, r3
 8001622:	330b      	adds	r3, #11
 8001624:	b299      	uxth	r1, r3
 8001626:	7ffb      	ldrb	r3, [r7, #31]
 8001628:	b29b      	uxth	r3, r3
 800162a:	330a      	adds	r3, #10
 800162c:	b29a      	uxth	r2, r3
 800162e:	7fbb      	ldrb	r3, [r7, #30]
 8001630:	b29b      	uxth	r3, r3
 8001632:	330e      	adds	r3, #14
 8001634:	b29b      	uxth	r3, r3
 8001636:	2401      	movs	r4, #1
 8001638:	9400      	str	r4, [sp, #0]
 800163a:	f000 fe5f 	bl	80022fc <SSD1306_DrawLine>
		  SSD1306_DrawPixel((9+xcvcc), (ycvcc+13), 1);
 800163e:	7ffb      	ldrb	r3, [r7, #31]
 8001640:	b29b      	uxth	r3, r3
 8001642:	3309      	adds	r3, #9
 8001644:	b298      	uxth	r0, r3
 8001646:	7fbb      	ldrb	r3, [r7, #30]
 8001648:	b29b      	uxth	r3, r3
 800164a:	330d      	adds	r3, #13
 800164c:	b29b      	uxth	r3, r3
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	f000 fd5f 	bl	8002114 <SSD1306_DrawPixel>
		  SSD1306_DrawPixel((9+xcvcc), (ycvcc+14), 1);
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	b29b      	uxth	r3, r3
 800165a:	3309      	adds	r3, #9
 800165c:	b298      	uxth	r0, r3
 800165e:	7fbb      	ldrb	r3, [r7, #30]
 8001660:	b29b      	uxth	r3, r3
 8001662:	330e      	adds	r3, #14
 8001664:	b29b      	uxth	r3, r3
 8001666:	2201      	movs	r2, #1
 8001668:	4619      	mov	r1, r3
 800166a:	f000 fd53 	bl	8002114 <SSD1306_DrawPixel>
 800166e:	e011      	b.n	8001694 <drawmenu1+0x334>
	  } else {
		  xcvcc = 20;
 8001670:	2314      	movs	r3, #20
 8001672:	77fb      	strb	r3, [r7, #31]
		  ycvcc = 45;
 8001674:	232d      	movs	r3, #45	; 0x2d
 8001676:	77bb      	strb	r3, [r7, #30]
		  drawlogoC(xcvcc, ycvcc);
 8001678:	7fba      	ldrb	r2, [r7, #30]
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd72 	bl	8001168 <drawlogoC>
		  drawlogoC((xcvcc+10), ycvcc);
 8001684:	7ffb      	ldrb	r3, [r7, #31]
 8001686:	330a      	adds	r3, #10
 8001688:	b2db      	uxtb	r3, r3
 800168a:	7fba      	ldrb	r2, [r7, #30]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd6a 	bl	8001168 <drawlogoC>
	  }
	  SSD1306_DrawLine((2+xcvcc), ycvcc , (25+xcvcc), ycvcc, 1);
 8001694:	7ffb      	ldrb	r3, [r7, #31]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3302      	adds	r3, #2
 800169a:	b298      	uxth	r0, r3
 800169c:	7fbb      	ldrb	r3, [r7, #30]
 800169e:	b299      	uxth	r1, r3
 80016a0:	7ffb      	ldrb	r3, [r7, #31]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3319      	adds	r3, #25
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	7fbb      	ldrb	r3, [r7, #30]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2401      	movs	r4, #1
 80016ae:	9400      	str	r4, [sp, #0]
 80016b0:	f000 fe24 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine(xcvcc, (ycvcc+2), xcvcc, (ycvcc+15), 1);
 80016b4:	7ffb      	ldrb	r3, [r7, #31]
 80016b6:	b298      	uxth	r0, r3
 80016b8:	7fbb      	ldrb	r3, [r7, #30]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3302      	adds	r3, #2
 80016be:	b299      	uxth	r1, r3
 80016c0:	7ffb      	ldrb	r3, [r7, #31]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	7fbb      	ldrb	r3, [r7, #30]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	330f      	adds	r3, #15
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2401      	movs	r4, #1
 80016ce:	9400      	str	r4, [sp, #0]
 80016d0:	f000 fe14 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((2+xcvcc), (ycvcc+17), (25+xcvcc), (ycvcc+17), 1);
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3302      	adds	r3, #2
 80016da:	b298      	uxth	r0, r3
 80016dc:	7fbb      	ldrb	r3, [r7, #30]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	3311      	adds	r3, #17
 80016e2:	b299      	uxth	r1, r3
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3319      	adds	r3, #25
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	7fbb      	ldrb	r3, [r7, #30]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3311      	adds	r3, #17
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2401      	movs	r4, #1
 80016f6:	9400      	str	r4, [sp, #0]
 80016f8:	f000 fe00 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawLine((27+xcvcc), (ycvcc+2), (27+xcvcc), (ycvcc+15), 1);
 80016fc:	7ffb      	ldrb	r3, [r7, #31]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	331b      	adds	r3, #27
 8001702:	b298      	uxth	r0, r3
 8001704:	7fbb      	ldrb	r3, [r7, #30]
 8001706:	b29b      	uxth	r3, r3
 8001708:	3302      	adds	r3, #2
 800170a:	b299      	uxth	r1, r3
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	b29b      	uxth	r3, r3
 8001710:	331b      	adds	r3, #27
 8001712:	b29a      	uxth	r2, r3
 8001714:	7fbb      	ldrb	r3, [r7, #30]
 8001716:	b29b      	uxth	r3, r3
 8001718:	330f      	adds	r3, #15
 800171a:	b29b      	uxth	r3, r3
 800171c:	2401      	movs	r4, #1
 800171e:	9400      	str	r4, [sp, #0]
 8001720:	f000 fdec 	bl	80022fc <SSD1306_DrawLine>
	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+1), 1);
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	b29b      	uxth	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	b298      	uxth	r0, r3
 800172c:	7fbb      	ldrb	r3, [r7, #30]
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	f000 fcec 	bl	8002114 <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((1+xcvcc), (ycvcc+16), 1);
 800173c:	7ffb      	ldrb	r3, [r7, #31]
 800173e:	b29b      	uxth	r3, r3
 8001740:	3301      	adds	r3, #1
 8001742:	b298      	uxth	r0, r3
 8001744:	7fbb      	ldrb	r3, [r7, #30]
 8001746:	b29b      	uxth	r3, r3
 8001748:	3310      	adds	r3, #16
 800174a:	b29b      	uxth	r3, r3
 800174c:	2201      	movs	r2, #1
 800174e:	4619      	mov	r1, r3
 8001750:	f000 fce0 	bl	8002114 <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+1), 1);
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	b29b      	uxth	r3, r3
 8001758:	331a      	adds	r3, #26
 800175a:	b298      	uxth	r0, r3
 800175c:	7fbb      	ldrb	r3, [r7, #30]
 800175e:	b29b      	uxth	r3, r3
 8001760:	3301      	adds	r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	2201      	movs	r2, #1
 8001766:	4619      	mov	r1, r3
 8001768:	f000 fcd4 	bl	8002114 <SSD1306_DrawPixel>
	  SSD1306_DrawPixel((26+xcvcc), (ycvcc+16), 1);
 800176c:	7ffb      	ldrb	r3, [r7, #31]
 800176e:	b29b      	uxth	r3, r3
 8001770:	331a      	adds	r3, #26
 8001772:	b298      	uxth	r0, r3
 8001774:	7fbb      	ldrb	r3, [r7, #30]
 8001776:	b29b      	uxth	r3, r3
 8001778:	3310      	adds	r3, #16
 800177a:	b29b      	uxth	r3, r3
 800177c:	2201      	movs	r2, #1
 800177e:	4619      	mov	r1, r3
 8001780:	f000 fcc8 	bl	8002114 <SSD1306_DrawPixel>

	  SSD1306_UpdateScreen(); // update screen
 8001784:	f000 fc80 	bl	8002088 <SSD1306_UpdateScreen>
}
 8001788:	bf00      	nop
 800178a:	3724      	adds	r7, #36	; 0x24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}

08001790 <setDAC1>:
void setDAC1 (uint16_t data) // zapíše vpravo zarovnaná 12-bit data do DAC1 na I2C2
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af02      	add	r7, sp, #8
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
	dataDAC [1] = (data >> 4);
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <setDAC1+0x38>)
 80017a4:	705a      	strb	r2, [r3, #1]
	dataDAC [2] = (data << 4) & 0xf0;
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <setDAC1+0x38>)
 80017ae:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c2, (0b1100001<<1), dataDAC, 3, 10);
 80017b0:	230a      	movs	r3, #10
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2303      	movs	r3, #3
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <setDAC1+0x38>)
 80017b8:	21c2      	movs	r1, #194	; 0xc2
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <setDAC1+0x3c>)
 80017bc:	f002 fb2e 	bl	8003e1c <HAL_I2C_Master_Transmit>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	20000510 	.word	0x20000510

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d8:	f001 f894 	bl	8002904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017dc:	f000 fa32 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e0:	f000 fb66 	bl	8001eb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017e4:	f000 faea 	bl	8001dbc <MX_I2C1_Init>
  MX_I2C2_Init();
 80017e8:	f000 fb16 	bl	8001e18 <MX_I2C2_Init>
  MX_DMA_Init();
 80017ec:	f000 fb42 	bl	8001e74 <MX_DMA_Init>
  MX_ADC1_Init();
 80017f0:	f000 fa7a 	bl	8001ce8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80017f4:	f000 fb84 	bl	8001f00 <SSD1306_Init>
  HAL_ADC_Start_DMA(&hadc1, ADCout, 4);
 80017f8:	2204      	movs	r2, #4
 80017fa:	49cf      	ldr	r1, [pc, #828]	; (8001b38 <main+0x368>)
 80017fc:	48cf      	ldr	r0, [pc, #828]	; (8001b3c <main+0x36c>)
 80017fe:	f001 f9df 	bl	8002bc0 <HAL_ADC_Start_DMA>
  drawmenu1(pointer_p1, 1,0, 0);
 8001802:	4bcf      	ldr	r3, [pc, #828]	; (8001b40 <main+0x370>)
 8001804:	7818      	ldrb	r0, [r3, #0]
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	2101      	movs	r1, #1
 8001810:	f7ff fda6 	bl	8001360 <drawmenu1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float rozdilchI = 0;
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
	  float rozdilchU = 0;
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
	  uint8_t refreshflag = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
	  p += 1;
 8001824:	4bc7      	ldr	r3, [pc, #796]	; (8001b44 <main+0x374>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff f951 	bl	8000ad4 <__addsf3>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4bc3      	ldr	r3, [pc, #780]	; (8001b44 <main+0x374>)
 8001838:	601a      	str	r2, [r3, #0]
	  pointer_p1 *= 2;
 800183a:	4bc1      	ldr	r3, [pc, #772]	; (8001b40 <main+0x370>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4bbf      	ldr	r3, [pc, #764]	; (8001b40 <main+0x370>)
 8001844:	701a      	strb	r2, [r3, #0]
	  rozdilchI = Im - ((ADCout[0]*6.6)/4095);
 8001846:	4bc0      	ldr	r3, [pc, #768]	; (8001b48 <main+0x378>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fde4 	bl	8000418 <__aeabi_f2d>
 8001850:	4604      	mov	r4, r0
 8001852:	460d      	mov	r5, r1
 8001854:	4bb8      	ldr	r3, [pc, #736]	; (8001b38 <main+0x368>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fdbb 	bl	80003d4 <__aeabi_ui2d>
 800185e:	a3a8      	add	r3, pc, #672	; (adr r3, 8001b00 <main+0x330>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fe30 	bl	80004c8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	a3a5      	add	r3, pc, #660	; (adr r3, 8001b08 <main+0x338>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe ff51 	bl	800071c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fc69 	bl	8000158 <__aeabi_dsub>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f8cb 	bl	8000a28 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	60bb      	str	r3, [r7, #8]
	  if((rozdilchI > 0.01)||(rozdilchI < -0.01))
 8001896:	68b8      	ldr	r0, [r7, #8]
 8001898:	f7fe fdbe 	bl	8000418 <__aeabi_f2d>
 800189c:	a39c      	add	r3, pc, #624	; (adr r3, 8001b10 <main+0x340>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7ff f8a1 	bl	80009e8 <__aeabi_dcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <main+0xf2>
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f7fe fdb3 	bl	8000418 <__aeabi_f2d>
 80018b2:	a399      	add	r3, pc, #612	; (adr r3, 8001b18 <main+0x348>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7ff f878 	bl	80009ac <__aeabi_dcmplt>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d01f      	beq.n	8001902 <main+0x132>
	  {
		  Im = (ADCout[0]*6.6)/ 4095;
 80018c2:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <main+0x368>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd84 	bl	80003d4 <__aeabi_ui2d>
 80018cc:	a38c      	add	r3, pc, #560	; (adr r3, 8001b00 <main+0x330>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fdf9 	bl	80004c8 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a38a      	add	r3, pc, #552	; (adr r3, 8001b08 <main+0x338>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe ff1a 	bl	800071c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f89a 	bl	8000a28 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a94      	ldr	r2, [pc, #592]	; (8001b48 <main+0x378>)
 80018f8:	6013      	str	r3, [r2, #0]
		  refreshflag |= 0x01;
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
	  }
	  rozdilchU = Um - (((ADCout[1]*6.6)/4095)-((ADCout[2]*6.6)/4095));
 8001902:	4b92      	ldr	r3, [pc, #584]	; (8001b4c <main+0x37c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fd86 	bl	8000418 <__aeabi_f2d>
 800190c:	4604      	mov	r4, r0
 800190e:	460d      	mov	r5, r1
 8001910:	4b89      	ldr	r3, [pc, #548]	; (8001b38 <main+0x368>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fd5d 	bl	80003d4 <__aeabi_ui2d>
 800191a:	a379      	add	r3, pc, #484	; (adr r3, 8001b00 <main+0x330>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fdd2 	bl	80004c8 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	a376      	add	r3, pc, #472	; (adr r3, 8001b08 <main+0x338>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fef3 	bl	800071c <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4690      	mov	r8, r2
 800193c:	4699      	mov	r9, r3
 800193e:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <main+0x368>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd46 	bl	80003d4 <__aeabi_ui2d>
 8001948:	a36d      	add	r3, pc, #436	; (adr r3, 8001b00 <main+0x330>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fdbb 	bl	80004c8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	a36b      	add	r3, pc, #428	; (adr r3, 8001b08 <main+0x338>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fedc 	bl	800071c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4640      	mov	r0, r8
 800196a:	4649      	mov	r1, r9
 800196c:	f7fe fbf4 	bl	8000158 <__aeabi_dsub>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7fe fbee 	bl	8000158 <__aeabi_dsub>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	f7ff f850 	bl	8000a28 <__aeabi_d2f>
 8001988:	4603      	mov	r3, r0
 800198a:	607b      	str	r3, [r7, #4]
	  if((rozdilchU > 0.01)||(rozdilchU < -0.01))
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7fe fd43 	bl	8000418 <__aeabi_f2d>
 8001992:	a35f      	add	r3, pc, #380	; (adr r3, 8001b10 <main+0x340>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7ff f826 	bl	80009e8 <__aeabi_dcmpgt>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <main+0x1e8>
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7fe fd38 	bl	8000418 <__aeabi_f2d>
 80019a8:	a35b      	add	r3, pc, #364	; (adr r3, 8001b18 <main+0x348>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fffd 	bl	80009ac <__aeabi_dcmplt>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03c      	beq.n	8001a32 <main+0x262>
	  {
		  Um = (((ADCout[1]*6.6)/4095)-((ADCout[2]*6.6)/4095));
 80019b8:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <main+0x368>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fd09 	bl	80003d4 <__aeabi_ui2d>
 80019c2:	a34f      	add	r3, pc, #316	; (adr r3, 8001b00 <main+0x330>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fd7e 	bl	80004c8 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	a34c      	add	r3, pc, #304	; (adr r3, 8001b08 <main+0x338>)
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	f7fe fe9f 	bl	800071c <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4614      	mov	r4, r2
 80019e4:	461d      	mov	r5, r3
 80019e6:	4b54      	ldr	r3, [pc, #336]	; (8001b38 <main+0x368>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fcf2 	bl	80003d4 <__aeabi_ui2d>
 80019f0:	a343      	add	r3, pc, #268	; (adr r3, 8001b00 <main+0x330>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fd67 	bl	80004c8 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	a341      	add	r3, pc, #260	; (adr r3, 8001b08 <main+0x338>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fe88 	bl	800071c <__aeabi_ddiv>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fba0 	bl	8000158 <__aeabi_dsub>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f802 	bl	8000a28 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <main+0x37c>)
 8001a28:	6013      	str	r3, [r2, #0]
		  refreshflag |= 0x01;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
	  }
	  teplota = (ADCout[3]*3.3)/ 4095; // adc => V
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <main+0x368>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fccc 	bl	80003d4 <__aeabi_ui2d>
 8001a3c:	a338      	add	r3, pc, #224	; (adr r3, 8001b20 <main+0x350>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fd41 	bl	80004c8 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	a32e      	add	r3, pc, #184	; (adr r3, 8001b08 <main+0x338>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fe62 	bl	800071c <__aeabi_ddiv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7fe ffe2 	bl	8000a28 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a3a      	ldr	r2, [pc, #232]	; (8001b50 <main+0x380>)
 8001a68:	6013      	str	r3, [r2, #0]
	  teplota = 10000 * (teplota / ( 3.3 - teplota)); // V => R NTC
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <main+0x380>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcd2 	bl	8000418 <__aeabi_f2d>
 8001a74:	4604      	mov	r4, r0
 8001a76:	460d      	mov	r5, r1
 8001a78:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <main+0x380>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fccb 	bl	8000418 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	a126      	add	r1, pc, #152	; (adr r1, 8001b20 <main+0x350>)
 8001a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a8c:	f7fe fb64 	bl	8000158 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fe40 	bl	800071c <__aeabi_ddiv>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	a320      	add	r3, pc, #128	; (adr r3, 8001b28 <main+0x358>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fd0d 	bl	80004c8 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f7fe ffb7 	bl	8000a28 <__aeabi_d2f>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <main+0x380>)
 8001abe:	6013      	str	r3, [r2, #0]
	  teplota = 1/((log(teplota/100000)/4000)+(1/298.15)); // RNTC => K
 8001ac0:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <main+0x380>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4923      	ldr	r1, [pc, #140]	; (8001b54 <main+0x384>)
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9c0 	bl	8000e4c <__aeabi_fdiv>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fca2 	bl	8000418 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f003 fe3a 	bl	8005754 <log>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <main+0x388>)
 8001ae6:	f7fe fe19 	bl	800071c <__aeabi_ddiv>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	a30f      	add	r3, pc, #60	; (adr r3, 8001b30 <main+0x360>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	e030      	b.n	8001b5c <main+0x38c>
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	66666666 	.word	0x66666666
 8001b04:	401a6666 	.word	0x401a6666
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40affe00 	.word	0x40affe00
 8001b10:	47ae147b 	.word	0x47ae147b
 8001b14:	3f847ae1 	.word	0x3f847ae1
 8001b18:	47ae147b 	.word	0x47ae147b
 8001b1c:	bf847ae1 	.word	0xbf847ae1
 8001b20:	66666666 	.word	0x66666666
 8001b24:	400a6666 	.word	0x400a6666
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40c38800 	.word	0x40c38800
 8001b30:	dcb5db83 	.word	0xdcb5db83
 8001b34:	3f6b79e1 	.word	0x3f6b79e1
 8001b38:	20000594 	.word	0x20000594
 8001b3c:	20000564 	.word	0x20000564
 8001b40:	20000008 	.word	0x20000008
 8001b44:	200000ac 	.word	0x200000ac
 8001b48:	200000a0 	.word	0x200000a0
 8001b4c:	200000a4 	.word	0x200000a4
 8001b50:	200000a8 	.word	0x200000a8
 8001b54:	47c35000 	.word	0x47c35000
 8001b58:	40af4000 	.word	0x40af4000
 8001b5c:	f7fe fafe 	bl	800015c <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	492f      	ldr	r1, [pc, #188]	; (8001c28 <main+0x458>)
 8001b6a:	f7fe fdd7 	bl	800071c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7fe ff57 	bl	8000a28 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4a2b      	ldr	r2, [pc, #172]	; (8001c2c <main+0x45c>)
 8001b7e:	6013      	str	r3, [r2, #0]
	  teplota = teplota - 273.15;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <main+0x45c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fc47 	bl	8000418 <__aeabi_f2d>
 8001b8a:	a325      	add	r3, pc, #148	; (adr r3, 8001c20 <main+0x450>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fae2 	bl	8000158 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff44 	bl	8000a28 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <main+0x45c>)
 8001ba4:	6013      	str	r3, [r2, #0]
	  if(pointer_p1 == 0)
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <main+0x460>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <main+0x3e4>
	  {
		  pointer_p1 = 1;
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <main+0x460>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
	  }
	  if(refreshflag > 0)
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d014      	beq.n	8001be4 <main+0x414>
	  {
		  drawmenu1(pointer_p1, 1,Im, ((p*5)/4095));
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <main+0x460>)
 8001bbc:	781c      	ldrb	r4, [r3, #0]
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <main+0x464>)
 8001bc0:	681d      	ldr	r5, [r3, #0]
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <main+0x468>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	491d      	ldr	r1, [pc, #116]	; (8001c3c <main+0x46c>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f88b 	bl	8000ce4 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	491b      	ldr	r1, [pc, #108]	; (8001c40 <main+0x470>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff f93a 	bl	8000e4c <__aeabi_fdiv>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	462a      	mov	r2, r5
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7ff fbbe 	bl	8001360 <drawmenu1>
	  }
	  if(p>0xFFF){p=0;}
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <main+0x468>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4915      	ldr	r1, [pc, #84]	; (8001c40 <main+0x470>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fa36 	bl	800105c <__aeabi_fcmpgt>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <main+0x42e>
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <main+0x468>)
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
	  setDAC1(p);
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <main+0x468>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa34 	bl	8001070 <__aeabi_f2uiz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fdbf 	bl	8001790 <setDAC1>
	  HAL_Delay(100);
 8001c12:	2064      	movs	r0, #100	; 0x64
 8001c14:	f000 fed8 	bl	80029c8 <HAL_Delay>
  {
 8001c18:	e5fc      	b.n	8001814 <main+0x44>
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	66666666 	.word	0x66666666
 8001c24:	40711266 	.word	0x40711266
 8001c28:	3ff00000 	.word	0x3ff00000
 8001c2c:	200000a8 	.word	0x200000a8
 8001c30:	20000008 	.word	0x20000008
 8001c34:	200000a0 	.word	0x200000a0
 8001c38:	200000ac 	.word	0x200000ac
 8001c3c:	40a00000 	.word	0x40a00000
 8001c40:	457ff000 	.word	0x457ff000

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b094      	sub	sp, #80	; 0x50
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4e:	2228      	movs	r2, #40	; 0x28
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f003 fd34 	bl	80056c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f819 	bl	8004cc0 <HAL_RCC_OscConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001c94:	f000 f92e 	bl	8001ef4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c98:	230f      	movs	r3, #15
 8001c9a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001ca8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f003 fa83 	bl	80051c0 <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001cc0:	f000 f918 	bl	8001ef4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001cc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fbfb 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001cdc:	f000 f90a 	bl	8001ef4 <Error_Handler>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3750      	adds	r7, #80	; 0x50
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	; (8001db8 <MX_ADC1_Init+0xd0>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001cfe:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d0c:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d12:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d14:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d22:	2204      	movs	r2, #4
 8001d24:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d26:	4823      	ldr	r0, [pc, #140]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d28:	f000 fe72 	bl	8002a10 <HAL_ADC_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001d32:	f000 f8df 	bl	8001ef4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	481b      	ldr	r0, [pc, #108]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d48:	f001 f834 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f000 f8cf 	bl	8001ef4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d56:	2301      	movs	r3, #1
 8001d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	4814      	ldr	r0, [pc, #80]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d64:	f001 f826 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d6e:	f000 f8c1 	bl	8001ef4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d76:	2303      	movs	r3, #3
 8001d78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d80:	f001 f818 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d8a:	f000 f8b3 	bl	8001ef4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d92:	2304      	movs	r3, #4
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <MX_ADC1_Init+0xcc>)
 8001d9c:	f001 f80a 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001da6:	f000 f8a5 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000564 	.word	0x20000564
 8001db8:	40012400 	.word	0x40012400

08001dbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <MX_I2C1_Init+0x54>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <MX_I2C1_Init+0x58>)
 8001dca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df8:	4804      	ldr	r0, [pc, #16]	; (8001e0c <MX_I2C1_Init+0x50>)
 8001dfa:	f001 fecb 	bl	8003b94 <HAL_I2C_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e04:	f000 f876 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200004bc 	.word	0x200004bc
 8001e10:	40005400 	.word	0x40005400
 8001e14:	00061a80 	.word	0x00061a80

08001e18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <MX_I2C2_Init+0x54>)
 8001e20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e24:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <MX_I2C2_Init+0x58>)
 8001e26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_I2C2_Init+0x50>)
 8001e56:	f001 fe9d 	bl	8003b94 <HAL_I2C_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e60:	f000 f848 	bl	8001ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000510 	.word	0x20000510
 8001e6c:	40005800 	.word	0x40005800
 8001e70:	000186a0 	.word	0x000186a0

08001e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_DMA_Init+0x38>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <MX_DMA_Init+0x38>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6153      	str	r3, [r2, #20]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_DMA_Init+0x38>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	200b      	movs	r0, #11
 8001e98:	f001 fa5d 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e9c:	200b      	movs	r0, #11
 8001e9e:	f001 fa76 	bl	800338e <HAL_NVIC_EnableIRQ>

}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40021000 	.word	0x40021000

08001eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <MX_GPIO_Init+0x40>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	; (8001ef0 <MX_GPIO_Init+0x40>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6193      	str	r3, [r2, #24]
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_GPIO_Init+0x40>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_GPIO_Init+0x40>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <MX_GPIO_Init+0x40>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6193      	str	r3, [r2, #24]
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <MX_GPIO_Init+0x40>)
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001efc:	e7fe      	b.n	8001efc <Error_Handler+0x8>
	...

08001f00 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f06:	f000 fafb 	bl	8002500 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f0a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	485b      	ldr	r0, [pc, #364]	; (8002080 <SSD1306_Init+0x180>)
 8001f14:	f002 f880 	bl	8004018 <HAL_I2C_IsDeviceReady>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e0a9      	b.n	8002076 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001f22:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f26:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f28:	e002      	b.n	8001f30 <SSD1306_Init+0x30>
		p--;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f36:	22ae      	movs	r2, #174	; 0xae
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2078      	movs	r0, #120	; 0x78
 8001f3c:	f000 fb3c 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f40:	2220      	movs	r2, #32
 8001f42:	2100      	movs	r1, #0
 8001f44:	2078      	movs	r0, #120	; 0x78
 8001f46:	f000 fb37 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2078      	movs	r0, #120	; 0x78
 8001f50:	f000 fb32 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f54:	22b0      	movs	r2, #176	; 0xb0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f000 fb2d 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f5e:	22c8      	movs	r2, #200	; 0xc8
 8001f60:	2100      	movs	r1, #0
 8001f62:	2078      	movs	r0, #120	; 0x78
 8001f64:	f000 fb28 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f000 fb23 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f72:	2210      	movs	r2, #16
 8001f74:	2100      	movs	r1, #0
 8001f76:	2078      	movs	r0, #120	; 0x78
 8001f78:	f000 fb1e 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 fb19 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f86:	2281      	movs	r2, #129	; 0x81
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 fb14 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 fb0f 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001f9a:	22a1      	movs	r2, #161	; 0xa1
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 fb0a 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fa4:	22a6      	movs	r2, #166	; 0xa6
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f000 fb05 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001fae:	22a8      	movs	r2, #168	; 0xa8
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	f000 fb00 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 fafb 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fc2:	22a4      	movs	r2, #164	; 0xa4
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2078      	movs	r0, #120	; 0x78
 8001fc8:	f000 faf6 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001fcc:	22d3      	movs	r2, #211	; 0xd3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2078      	movs	r0, #120	; 0x78
 8001fd2:	f000 faf1 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	; 0x78
 8001fdc:	f000 faec 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fe0:	22d5      	movs	r2, #213	; 0xd5
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	; 0x78
 8001fe6:	f000 fae7 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001fea:	22f0      	movs	r2, #240	; 0xf0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 fae2 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ff4:	22d9      	movs	r2, #217	; 0xd9
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2078      	movs	r0, #120	; 0x78
 8001ffa:	f000 fadd 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ffe:	2222      	movs	r2, #34	; 0x22
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f000 fad8 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002008:	22da      	movs	r2, #218	; 0xda
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	; 0x78
 800200e:	f000 fad3 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002012:	2212      	movs	r2, #18
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f000 face 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800201c:	22db      	movs	r2, #219	; 0xdb
 800201e:	2100      	movs	r1, #0
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	f000 fac9 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002026:	2220      	movs	r2, #32
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 fac4 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002030:	228d      	movs	r2, #141	; 0x8d
 8002032:	2100      	movs	r1, #0
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 fabf 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800203a:	2214      	movs	r2, #20
 800203c:	2100      	movs	r1, #0
 800203e:	2078      	movs	r0, #120	; 0x78
 8002040:	f000 faba 	bl	80025b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002044:	22af      	movs	r2, #175	; 0xaf
 8002046:	2100      	movs	r1, #0
 8002048:	2078      	movs	r0, #120	; 0x78
 800204a:	f000 fab5 	bl	80025b8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800204e:	222e      	movs	r2, #46	; 0x2e
 8002050:	2100      	movs	r1, #0
 8002052:	2078      	movs	r0, #120	; 0x78
 8002054:	f000 fab0 	bl	80025b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f843 	bl	80020e4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800205e:	f000 f813 	bl	8002088 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <SSD1306_Init+0x184>)
 8002064:	2200      	movs	r2, #0
 8002066:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <SSD1306_Init+0x184>)
 800206a:	2200      	movs	r2, #0
 800206c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SSD1306_Init+0x184>)
 8002070:	2201      	movs	r2, #1
 8002072:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200004bc 	.word	0x200004bc
 8002084:	200004b4 	.word	0x200004b4

08002088 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	e01d      	b.n	80020d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	3b50      	subs	r3, #80	; 0x50
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	2100      	movs	r1, #0
 800209e:	2078      	movs	r0, #120	; 0x78
 80020a0:	f000 fa8a 	bl	80025b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2100      	movs	r1, #0
 80020a8:	2078      	movs	r0, #120	; 0x78
 80020aa:	f000 fa85 	bl	80025b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020ae:	2210      	movs	r2, #16
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 fa80 	bl	80025b8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	01db      	lsls	r3, r3, #7
 80020bc:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <SSD1306_UpdateScreen+0x58>)
 80020be:	441a      	add	r2, r3
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	2078      	movs	r0, #120	; 0x78
 80020c6:	f000 fa2f 	bl	8002528 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	3301      	adds	r3, #1
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b07      	cmp	r3, #7
 80020d4:	d9de      	bls.n	8002094 <SSD1306_UpdateScreen+0xc>
	}
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200000b4 	.word	0x200000b4

080020e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <SSD1306_Fill+0x14>
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <SSD1306_Fill+0x16>
 80020f8:	23ff      	movs	r3, #255	; 0xff
 80020fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020fe:	4619      	mov	r1, r3
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <SSD1306_Fill+0x2c>)
 8002102:	f003 fadd 	bl	80056c0 <memset>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200000b4 	.word	0x200000b4

08002114 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
 800211e:	460b      	mov	r3, r1
 8002120:	80bb      	strh	r3, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	70fb      	strb	r3, [r7, #3]
	if (
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	2b7f      	cmp	r3, #127	; 0x7f
 800212a:	d848      	bhi.n	80021be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800212c:	88bb      	ldrh	r3, [r7, #4]
 800212e:	2b3f      	cmp	r3, #63	; 0x3f
 8002130:	d845      	bhi.n	80021be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <SSD1306_DrawPixel+0xb4>)
 8002134:	791b      	ldrb	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d11a      	bne.n	8002184 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	88bb      	ldrh	r3, [r7, #4]
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	b298      	uxth	r0, r3
 8002156:	4603      	mov	r3, r0
 8002158:	01db      	lsls	r3, r3, #7
 800215a:	4413      	add	r3, r2
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <SSD1306_DrawPixel+0xb8>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	b25a      	sxtb	r2, r3
 8002162:	88bb      	ldrh	r3, [r7, #4]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	2101      	movs	r1, #1
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	b25b      	sxtb	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b259      	sxtb	r1, r3
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	4603      	mov	r3, r0
 8002178:	01db      	lsls	r3, r3, #7
 800217a:	4413      	add	r3, r2
 800217c:	b2c9      	uxtb	r1, r1
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <SSD1306_DrawPixel+0xb8>)
 8002180:	54d1      	strb	r1, [r2, r3]
 8002182:	e01d      	b.n	80021c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002184:	88fa      	ldrh	r2, [r7, #6]
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	b298      	uxth	r0, r3
 800218c:	4603      	mov	r3, r0
 800218e:	01db      	lsls	r3, r3, #7
 8002190:	4413      	add	r3, r2
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <SSD1306_DrawPixel+0xb8>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	b25a      	sxtb	r2, r3
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	4013      	ands	r3, r2
 80021ac:	b259      	sxtb	r1, r3
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	4603      	mov	r3, r0
 80021b2:	01db      	lsls	r3, r3, #7
 80021b4:	4413      	add	r3, r2
 80021b6:	b2c9      	uxtb	r1, r1
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <SSD1306_DrawPixel+0xb8>)
 80021ba:	54d1      	strb	r1, [r2, r3]
 80021bc:	e000      	b.n	80021c0 <SSD1306_DrawPixel+0xac>
		return;
 80021be:	bf00      	nop
	}
}
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	200004b4 	.word	0x200004b4
 80021cc:	200000b4 	.word	0x200000b4

080021d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	80fb      	strh	r3, [r7, #6]
 80021dc:	4613      	mov	r3, r2
 80021de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021e0:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <SSD1306_GotoXY+0x28>)
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <SSD1306_GotoXY+0x28>)
 80021e8:	88bb      	ldrh	r3, [r7, #4]
 80021ea:	8053      	strh	r3, [r2, #2]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200004b4 	.word	0x200004b4

080021fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
 8002208:	4613      	mov	r3, r2
 800220a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <SSD1306_Putc+0xfc>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
	if (
 8002218:	2b7f      	cmp	r3, #127	; 0x7f
 800221a:	dc07      	bgt.n	800222c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <SSD1306_Putc+0xfc>)
 800221e:	885b      	ldrh	r3, [r3, #2]
 8002220:	461a      	mov	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002228:	2b3f      	cmp	r3, #63	; 0x3f
 800222a:	dd01      	ble.n	8002230 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800222c:	2300      	movs	r3, #0
 800222e:	e05e      	b.n	80022ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e04b      	b.n	80022ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	3b20      	subs	r3, #32
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	7849      	ldrb	r1, [r1, #1]
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4619      	mov	r1, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	440b      	add	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	e030      	b.n	80022bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d010      	beq.n	800228c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <SSD1306_Putc+0xfc>)
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4413      	add	r3, r2
 8002274:	b298      	uxth	r0, r3
 8002276:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <SSD1306_Putc+0xfc>)
 8002278:	885a      	ldrh	r2, [r3, #2]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4413      	add	r3, r2
 8002280:	b29b      	uxth	r3, r3
 8002282:	79ba      	ldrb	r2, [r7, #6]
 8002284:	4619      	mov	r1, r3
 8002286:	f7ff ff45 	bl	8002114 <SSD1306_DrawPixel>
 800228a:	e014      	b.n	80022b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <SSD1306_Putc+0xfc>)
 800228e:	881a      	ldrh	r2, [r3, #0]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4413      	add	r3, r2
 8002296:	b298      	uxth	r0, r3
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <SSD1306_Putc+0xfc>)
 800229a:	885a      	ldrh	r2, [r3, #2]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	b299      	uxth	r1, r3
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bf0c      	ite	eq
 80022aa:	2301      	moveq	r3, #1
 80022ac:	2300      	movne	r3, #0
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	f7ff ff2f 	bl	8002114 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	3301      	adds	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d3c8      	bcc.n	800225a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	461a      	mov	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d3ad      	bcc.n	8002236 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <SSD1306_Putc+0xfc>)
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <SSD1306_Putc+0xfc>)
 80022ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80022ec:	79fb      	ldrb	r3, [r7, #7]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200004b4 	.word	0x200004b4

080022fc <SSD1306_DrawLine>:
	/* Everything OK, zero should be returned */
	return *str;
}
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	4604      	mov	r4, r0
 8002304:	4608      	mov	r0, r1
 8002306:	4611      	mov	r1, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4623      	mov	r3, r4
 800230c:	80fb      	strh	r3, [r7, #6]
 800230e:	4603      	mov	r3, r0
 8002310:	80bb      	strh	r3, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	807b      	strh	r3, [r7, #2]
 8002316:	4613      	mov	r3, r2
 8002318:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b7f      	cmp	r3, #127	; 0x7f
 800231e:	d901      	bls.n	8002324 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8002320:	237f      	movs	r3, #127	; 0x7f
 8002322:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002324:	887b      	ldrh	r3, [r7, #2]
 8002326:	2b7f      	cmp	r3, #127	; 0x7f
 8002328:	d901      	bls.n	800232e <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800232a:	237f      	movs	r3, #127	; 0x7f
 800232c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800232e:	88bb      	ldrh	r3, [r7, #4]
 8002330:	2b3f      	cmp	r3, #63	; 0x3f
 8002332:	d901      	bls.n	8002338 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002334:	233f      	movs	r3, #63	; 0x3f
 8002336:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002338:	883b      	ldrh	r3, [r7, #0]
 800233a:	2b3f      	cmp	r3, #63	; 0x3f
 800233c:	d901      	bls.n	8002342 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800233e:	233f      	movs	r3, #63	; 0x3f
 8002340:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	429a      	cmp	r2, r3
 8002348:	d205      	bcs.n	8002356 <SSD1306_DrawLine+0x5a>
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	b29b      	uxth	r3, r3
 8002352:	b21b      	sxth	r3, r3
 8002354:	e004      	b.n	8002360 <SSD1306_DrawLine+0x64>
 8002356:	88fa      	ldrh	r2, [r7, #6]
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	b21b      	sxth	r3, r3
 8002360:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002362:	88ba      	ldrh	r2, [r7, #4]
 8002364:	883b      	ldrh	r3, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d205      	bcs.n	8002376 <SSD1306_DrawLine+0x7a>
 800236a:	883a      	ldrh	r2, [r7, #0]
 800236c:	88bb      	ldrh	r3, [r7, #4]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	b29b      	uxth	r3, r3
 8002372:	b21b      	sxth	r3, r3
 8002374:	e004      	b.n	8002380 <SSD1306_DrawLine+0x84>
 8002376:	88ba      	ldrh	r2, [r7, #4]
 8002378:	883b      	ldrh	r3, [r7, #0]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	b29b      	uxth	r3, r3
 800237e:	b21b      	sxth	r3, r3
 8002380:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	887b      	ldrh	r3, [r7, #2]
 8002386:	429a      	cmp	r2, r3
 8002388:	d201      	bcs.n	800238e <SSD1306_DrawLine+0x92>
 800238a:	2301      	movs	r3, #1
 800238c:	e001      	b.n	8002392 <SSD1306_DrawLine+0x96>
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002394:	88ba      	ldrh	r2, [r7, #4]
 8002396:	883b      	ldrh	r3, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d201      	bcs.n	80023a0 <SSD1306_DrawLine+0xa4>
 800239c:	2301      	movs	r3, #1
 800239e:	e001      	b.n	80023a4 <SSD1306_DrawLine+0xa8>
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80023a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023aa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	dd06      	ble.n	80023c0 <SSD1306_DrawLine+0xc4>
 80023b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023b6:	0fda      	lsrs	r2, r3, #31
 80023b8:	4413      	add	r3, r2
 80023ba:	105b      	asrs	r3, r3, #1
 80023bc:	b21b      	sxth	r3, r3
 80023be:	e006      	b.n	80023ce <SSD1306_DrawLine+0xd2>
 80023c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023c4:	0fda      	lsrs	r2, r3, #31
 80023c6:	4413      	add	r3, r2
 80023c8:	105b      	asrs	r3, r3, #1
 80023ca:	425b      	negs	r3, r3
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80023d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d129      	bne.n	800242c <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80023d8:	883a      	ldrh	r2, [r7, #0]
 80023da:	88bb      	ldrh	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d205      	bcs.n	80023ec <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80023e0:	883b      	ldrh	r3, [r7, #0]
 80023e2:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80023e4:	88bb      	ldrh	r3, [r7, #4]
 80023e6:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80023e8:	893b      	ldrh	r3, [r7, #8]
 80023ea:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80023ec:	887a      	ldrh	r2, [r7, #2]
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d205      	bcs.n	8002400 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80023f4:	887b      	ldrh	r3, [r7, #2]
 80023f6:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80023fc:	893b      	ldrh	r3, [r7, #8]
 80023fe:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	82bb      	strh	r3, [r7, #20]
 8002404:	e00c      	b.n	8002420 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002406:	8ab9      	ldrh	r1, [r7, #20]
 8002408:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fe80 	bl	8002114 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002418:	b29b      	uxth	r3, r3
 800241a:	3301      	adds	r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	82bb      	strh	r3, [r7, #20]
 8002420:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002424:	883b      	ldrh	r3, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	dded      	ble.n	8002406 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800242a:	e05f      	b.n	80024ec <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800242c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d129      	bne.n	8002488 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002434:	883a      	ldrh	r2, [r7, #0]
 8002436:	88bb      	ldrh	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	d205      	bcs.n	8002448 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800243c:	883b      	ldrh	r3, [r7, #0]
 800243e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002440:	88bb      	ldrh	r3, [r7, #4]
 8002442:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002444:	893b      	ldrh	r3, [r7, #8]
 8002446:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	429a      	cmp	r2, r3
 800244e:	d205      	bcs.n	800245c <SSD1306_DrawLine+0x160>
			tmp = x1;
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002458:	893b      	ldrh	r3, [r7, #8]
 800245a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	82bb      	strh	r3, [r7, #20]
 8002460:	e00c      	b.n	800247c <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002462:	8abb      	ldrh	r3, [r7, #20]
 8002464:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002468:	88b9      	ldrh	r1, [r7, #4]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fe52 	bl	8002114 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8002470:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002474:	b29b      	uxth	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b29b      	uxth	r3, r3
 800247a:	82bb      	strh	r3, [r7, #20]
 800247c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	429a      	cmp	r2, r3
 8002484:	dded      	ble.n	8002462 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002486:	e031      	b.n	80024ec <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002488:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800248c:	88b9      	ldrh	r1, [r7, #4]
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fe3f 	bl	8002114 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002496:	88fa      	ldrh	r2, [r7, #6]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	429a      	cmp	r2, r3
 800249c:	d103      	bne.n	80024a6 <SSD1306_DrawLine+0x1aa>
 800249e:	88ba      	ldrh	r2, [r7, #4]
 80024a0:	883b      	ldrh	r3, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d021      	beq.n	80024ea <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80024a6:	8afb      	ldrh	r3, [r7, #22]
 80024a8:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80024aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80024ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024b2:	425b      	negs	r3, r3
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dd08      	ble.n	80024ca <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80024b8:	8afa      	ldrh	r2, [r7, #22]
 80024ba:	8a3b      	ldrh	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	b29b      	uxth	r3, r3
 80024c0:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80024c2:	89fa      	ldrh	r2, [r7, #14]
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	4413      	add	r3, r2
 80024c8:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80024ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80024ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	dad8      	bge.n	8002488 <SSD1306_DrawLine+0x18c>
			err += dx;
 80024d6:	8afa      	ldrh	r2, [r7, #22]
 80024d8:	8a7b      	ldrh	r3, [r7, #18]
 80024da:	4413      	add	r3, r2
 80024dc:	b29b      	uxth	r3, r3
 80024de:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80024e0:	89ba      	ldrh	r2, [r7, #12]
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80024e8:	e7ce      	b.n	8002488 <SSD1306_DrawLine+0x18c>
			break;
 80024ea:	bf00      	nop
		} 
	}
}
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd90      	pop	{r4, r7, pc}

080024f2 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff fdf4 	bl	80020e4 <SSD1306_Fill>
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}

08002500 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <ssd1306_I2C_Init+0x24>)
 8002508:	607b      	str	r3, [r7, #4]
	while(p>0)
 800250a:	e002      	b.n	8002512 <ssd1306_I2C_Init+0x12>
		p--;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1f9      	bne.n	800250c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	0003d090 	.word	0x0003d090

08002528 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b0c7      	sub	sp, #284	; 0x11c
 800252c:	af02      	add	r7, sp, #8
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4639      	mov	r1, r7
 8002534:	600a      	str	r2, [r1, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	4622      	mov	r2, r4
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	1dbb      	adds	r3, r7, #6
 8002540:	4602      	mov	r2, r0
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	460a      	mov	r2, r1
 8002548:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	1dba      	adds	r2, r7, #6
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002554:	2300      	movs	r3, #0
 8002556:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800255a:	e010      	b.n	800257e <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800255c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002560:	463a      	mov	r2, r7
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	441a      	add	r2, r3
 8002566:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800256a:	3301      	adds	r3, #1
 800256c:	7811      	ldrb	r1, [r2, #0]
 800256e:	f107 020c 	add.w	r2, r7, #12
 8002572:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002574:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002578:	3301      	adds	r3, #1
 800257a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800257e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002582:	b29b      	uxth	r3, r3
 8002584:	1d3a      	adds	r2, r7, #4
 8002586:	8812      	ldrh	r2, [r2, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8e7      	bhi.n	800255c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b299      	uxth	r1, r3
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b29b      	uxth	r3, r3
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	200a      	movs	r0, #10
 80025a0:	9000      	str	r0, [sp, #0]
 80025a2:	4804      	ldr	r0, [pc, #16]	; (80025b4 <ssd1306_I2C_WriteMulti+0x8c>)
 80025a4:	f001 fc3a 	bl	8003e1c <HAL_I2C_Master_Transmit>
}
 80025a8:	bf00      	nop
 80025aa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200004bc 	.word	0x200004bc

080025b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	460b      	mov	r3, r1
 80025c4:	71bb      	strb	r3, [r7, #6]
 80025c6:	4613      	mov	r3, r2
 80025c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80025ca:	79bb      	ldrb	r3, [r7, #6]
 80025cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80025ce:	797b      	ldrb	r3, [r7, #5]
 80025d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	b299      	uxth	r1, r3
 80025d6:	f107 020c 	add.w	r2, r7, #12
 80025da:	230a      	movs	r3, #10
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2302      	movs	r3, #2
 80025e0:	4803      	ldr	r0, [pc, #12]	; (80025f0 <ssd1306_I2C_Write+0x38>)
 80025e2:	f001 fc1b 	bl	8003e1c <HAL_I2C_Master_Transmit>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200004bc 	.word	0x200004bc

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <HAL_MspInit+0x5c>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_MspInit+0x5c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6193      	str	r3, [r2, #24]
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_MspInit+0x5c>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_MspInit+0x5c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_MspInit+0x5c>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	61d3      	str	r3, [r2, #28]
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_MspInit+0x5c>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_MspInit+0x60>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_MspInit+0x60>)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr
 8002650:	40021000 	.word	0x40021000
 8002654:	40010000 	.word	0x40010000

08002658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0310 	add.w	r3, r7, #16
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a28      	ldr	r2, [pc, #160]	; (8002714 <HAL_ADC_MspInit+0xbc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d149      	bne.n	800270c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_ADC_MspInit+0xc0>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_ADC_MspInit+0xc0>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_ADC_MspInit+0xc0>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_ADC_MspInit+0xc0>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a20      	ldr	r2, [pc, #128]	; (8002718 <HAL_ADC_MspInit+0xc0>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <HAL_ADC_MspInit+0xc0>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026a8:	230f      	movs	r3, #15
 80026aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ac:	2303      	movs	r3, #3
 80026ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b0:	f107 0310 	add.w	r3, r7, #16
 80026b4:	4619      	mov	r1, r3
 80026b6:	4819      	ldr	r0, [pc, #100]	; (800271c <HAL_ADC_MspInit+0xc4>)
 80026b8:	f001 f8e8 	bl	800388c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026be:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026e6:	2220      	movs	r2, #32
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 80026f2:	f000 fe67 	bl	80033c4 <HAL_DMA_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80026fc:	f7ff fbfa 	bl	8001ef4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 8002704:	621a      	str	r2, [r3, #32]
 8002706:	4a06      	ldr	r2, [pc, #24]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40012400 	.word	0x40012400
 8002718:	40021000 	.word	0x40021000
 800271c:	40010800 	.word	0x40010800
 8002720:	200005a4 	.word	0x200005a4
 8002724:	40020008 	.word	0x40020008

08002728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0318 	add.w	r3, r7, #24
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a33      	ldr	r2, [pc, #204]	; (8002810 <HAL_I2C_MspInit+0xe8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d12c      	bne.n	80027a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_I2C_MspInit+0xec>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a31      	ldr	r2, [pc, #196]	; (8002814 <HAL_I2C_MspInit+0xec>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_I2C_MspInit+0xec>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002764:	2312      	movs	r3, #18
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800276c:	f107 0318 	add.w	r3, r7, #24
 8002770:	4619      	mov	r1, r3
 8002772:	4829      	ldr	r0, [pc, #164]	; (8002818 <HAL_I2C_MspInit+0xf0>)
 8002774:	f001 f88a 	bl	800388c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <HAL_I2C_MspInit+0xec>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_I2C_MspInit+0xec>)
 800277e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002782:	61d3      	str	r3, [r2, #28]
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_I2C_MspInit+0xec>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	2020      	movs	r0, #32
 8002796:	f000 fdde 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800279a:	2020      	movs	r0, #32
 800279c:	f000 fdf7 	bl	800338e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027a0:	e031      	b.n	8002806 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_I2C_MspInit+0xf4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d12c      	bne.n	8002806 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_I2C_MspInit+0xec>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_I2C_MspInit+0xec>)
 80027b2:	f043 0308 	orr.w	r3, r3, #8
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_I2C_MspInit+0xec>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ca:	2312      	movs	r3, #18
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ce:	2303      	movs	r3, #3
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 0318 	add.w	r3, r7, #24
 80027d6:	4619      	mov	r1, r3
 80027d8:	480f      	ldr	r0, [pc, #60]	; (8002818 <HAL_I2C_MspInit+0xf0>)
 80027da:	f001 f857 	bl	800388c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_I2C_MspInit+0xec>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <HAL_I2C_MspInit+0xec>)
 80027e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027e8:	61d3      	str	r3, [r2, #28]
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_I2C_MspInit+0xec>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2022      	movs	r0, #34	; 0x22
 80027fc:	f000 fdab 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002800:	2022      	movs	r0, #34	; 0x22
 8002802:	f000 fdc4 	bl	800338e <HAL_NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40005400 	.word	0x40005400
 8002814:	40021000 	.word	0x40021000
 8002818:	40010c00 	.word	0x40010c00
 800281c:	40005800 	.word	0x40005800

08002820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002824:	e7fe      	b.n	8002824 <NMI_Handler+0x4>

08002826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002826:	b480      	push	{r7}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800282a:	e7fe      	b.n	800282a <HardFault_Handler+0x4>

0800282c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <MemManage_Handler+0x4>

08002832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <BusFault_Handler+0x4>

08002838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800283c:	e7fe      	b.n	800283c <UsageFault_Handler+0x4>

0800283e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002866:	f000 f893 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <DMA1_Channel1_IRQHandler+0x10>)
 8002876:	f000 fed5 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200005a4 	.word	0x200005a4

08002884 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <I2C1_ER_IRQHandler+0x10>)
 800288a:	f001 fcf3 	bl	8004274 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200004bc 	.word	0x200004bc

08002898 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <I2C2_ER_IRQHandler+0x10>)
 800289e:	f001 fce9 	bl	8004274 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000510 	.word	0x20000510

080028ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b8:	480c      	ldr	r0, [pc, #48]	; (80028ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ba:	490d      	ldr	r1, [pc, #52]	; (80028f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	; (80028f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d0:	4c0a      	ldr	r4, [pc, #40]	; (80028fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028de:	f7ff ffe5 	bl	80028ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028e2:	f002 feaf 	bl	8005644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028e6:	f7fe ff73 	bl	80017d0 <main>
  bx lr
 80028ea:	4770      	bx	lr
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80028f4:	08006904 	.word	0x08006904
  ldr r2, =_sbss
 80028f8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80028fc:	200005ec 	.word	0x200005ec

08002900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC1_2_IRQHandler>
	...

08002904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_Init+0x28>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <HAL_Init+0x28>)
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002914:	2003      	movs	r0, #3
 8002916:	f000 fd13 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291a:	200f      	movs	r0, #15
 800291c:	f000 f808 	bl	8002930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002920:	f7ff fe68 	bl	80025f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40022000 	.word	0x40022000

08002930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_InitTick+0x54>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x58>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fd2b 	bl	80033aa <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f000 fcf3 	bl	8003356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <HAL_InitTick+0x5c>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000010 	.word	0x20000010
 8002988:	20000018 	.word	0x20000018
 800298c:	20000014 	.word	0x20000014

08002990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_IncTick+0x1c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x20>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_IncTick+0x20>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	20000018 	.word	0x20000018
 80029b0:	200005e8 	.word	0x200005e8

080029b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_GetTick+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	200005e8 	.word	0x200005e8

080029c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_GetTick>
 80029d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d005      	beq.n	80029ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_Delay+0x44>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ee:	bf00      	nop
 80029f0:	f7ff ffe0 	bl	80029b4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d8f7      	bhi.n	80029f0 <HAL_Delay+0x28>
  {
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000018 	.word	0x20000018

08002a10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0be      	b.n	8002bb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fe02 	bl	8002658 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 faff 	bl	8003058 <ADC_ConversionStop_Disable>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8099 	bne.w	8002b9e <HAL_ADC_Init+0x18e>
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 8095 	bne.w	8002b9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a7c:	f023 0302 	bic.w	r3, r3, #2
 8002a80:	f043 0202 	orr.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7b1b      	ldrb	r3, [r3, #12]
 8002a96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa8:	d003      	beq.n	8002ab2 <HAL_ADC_Init+0xa2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_ADC_Init+0xa8>
 8002ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ab6:	e000      	b.n	8002aba <HAL_ADC_Init+0xaa>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7d1b      	ldrb	r3, [r3, #20]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d119      	bne.n	8002afc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7b1b      	ldrb	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	035a      	lsls	r2, r3, #13
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e00b      	b.n	8002afc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_ADC_Init+0x1a8>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b2c:	d003      	beq.n	8002b36 <HAL_ADC_Init+0x126>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d104      	bne.n	8002b40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	051b      	lsls	r3, r3, #20
 8002b3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b18      	ldr	r3, [pc, #96]	; (8002bbc <HAL_ADC_Init+0x1ac>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d10b      	bne.n	8002b7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b7a:	e018      	b.n	8002bae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	f023 0312 	bic.w	r3, r3, #18
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b9c:	e007      	b.n	8002bae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	ffe1f7fd 	.word	0xffe1f7fd
 8002bbc:	ff1f0efe 	.word	0xff1f0efe

08002bc0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a64      	ldr	r2, [pc, #400]	; (8002d68 <HAL_ADC_Start_DMA+0x1a8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d004      	beq.n	8002be4 <HAL_ADC_Start_DMA+0x24>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a63      	ldr	r2, [pc, #396]	; (8002d6c <HAL_ADC_Start_DMA+0x1ac>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d106      	bne.n	8002bf2 <HAL_ADC_Start_DMA+0x32>
 8002be4:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <HAL_ADC_Start_DMA+0x1a8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 80b3 	bne.w	8002d58 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_Start_DMA+0x40>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0ae      	b.n	8002d5e <HAL_ADC_Start_DMA+0x19e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f9cb 	bl	8002fa4 <ADC_Enable>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 809a 	bne.w	8002d4e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a4e      	ldr	r2, [pc, #312]	; (8002d6c <HAL_ADC_Start_DMA+0x1ac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d105      	bne.n	8002c44 <HAL_ADC_Start_DMA+0x84>
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_ADC_Start_DMA+0x1a8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d115      	bne.n	8002c70 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d026      	beq.n	8002cac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c6e:	e01d      	b.n	8002cac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <HAL_ADC_Start_DMA+0x1a8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_ADC_Start_DMA+0xd0>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <HAL_ADC_Start_DMA+0x1ac>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10d      	bne.n	8002cac <HAL_ADC_Start_DMA+0xec>
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <HAL_ADC_Start_DMA+0x1a8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f023 0206 	bic.w	r2, r3, #6
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc4:	e002      	b.n	8002ccc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_ADC_Start_DMA+0x1b0>)
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_ADC_Start_DMA+0x1b4>)
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <HAL_ADC_Start_DMA+0x1b8>)
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f06f 0202 	mvn.w	r2, #2
 8002cf4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d04:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a18      	ldr	r0, [r3, #32]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	334c      	adds	r3, #76	; 0x4c
 8002d10:	4619      	mov	r1, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f000 fbaf 	bl	8003478 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d24:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d28:	d108      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d38:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d3a:	e00f      	b.n	8002d5c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d4a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d4c:	e006      	b.n	8002d5c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002d56:	e001      	b.n	8002d5c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40012400 	.word	0x40012400
 8002d6c:	40012800 	.word	0x40012800
 8002d70:	080030db 	.word	0x080030db
 8002d74:	08003157 	.word	0x08003157
 8002d78:	08003173 	.word	0x08003173

08002d7c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x20>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0dc      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1da>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d81c      	bhi.n	8002e1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b05      	subs	r3, #5
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4019      	ands	r1, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b05      	subs	r3, #5
 8002e10:	fa00 f203 	lsl.w	r2, r0, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1c:	e03c      	b.n	8002e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d81c      	bhi.n	8002e60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b23      	subs	r3, #35	; 0x23
 8002e38:	221f      	movs	r2, #31
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	4019      	ands	r1, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b23      	subs	r3, #35	; 0x23
 8002e52:	fa00 f203 	lsl.w	r2, r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5e:	e01b      	b.n	8002e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	3b41      	subs	r3, #65	; 0x41
 8002e72:	221f      	movs	r2, #31
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4019      	ands	r1, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b41      	subs	r3, #65	; 0x41
 8002e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d91c      	bls.n	8002eda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b1e      	subs	r3, #30
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	e019      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6919      	ldr	r1, [r3, #16]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	2207      	movs	r2, #7
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4019      	ands	r1, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6898      	ldr	r0, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	fa00 f203 	lsl.w	r2, r0, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d003      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f1a:	2b11      	cmp	r3, #17
 8002f1c:	d132      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d125      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d126      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d11a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_ADC_ConfigChannel+0x1e8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	0c9a      	lsrs	r2, r3, #18
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f64:	e002      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f9      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x1b2>
 8002f72:	e007      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012400 	.word	0x40012400
 8002f9c:	20000010 	.word	0x20000010
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d040      	beq.n	8003044 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd2:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <ADC_Enable+0xac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <ADC_Enable+0xb0>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe0:	e002      	b.n	8002fe8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f9      	bne.n	8002fe2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fee:	f7ff fce1 	bl	80029b4 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ff4:	e01f      	b.n	8003036 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ff6:	f7ff fcdd 	bl	80029b4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d918      	bls.n	8003036 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d011      	beq.n	8003036 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e007      	b.n	8003046 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d1d8      	bne.n	8002ff6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000010 	.word	0x20000010
 8003054:	431bde83 	.word	0x431bde83

08003058 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12e      	bne.n	80030d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003082:	f7ff fc97 	bl	80029b4 <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003088:	e01b      	b.n	80030c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800308a:	f7ff fc93 	bl	80029b4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d914      	bls.n	80030c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10d      	bne.n	80030c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f043 0210 	orr.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e007      	b.n	80030d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d0dc      	beq.n	800308a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d127      	bne.n	8003144 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800310a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800310e:	d115      	bne.n	800313c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003114:	2b00      	cmp	r3, #0
 8003116:	d111      	bne.n	800313c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff fe1d 	bl	8002d7c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003142:	e004      	b.n	800314e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff fe12 	bl	8002d8e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fe01 	bl	8002da0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <__NVIC_EnableIRQ+0x34>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff90 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff2d 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003368:	f7ff ff42 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 800336c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	6978      	ldr	r0, [r7, #20]
 8003374:	f7ff ff90 	bl	8003298 <NVIC_EncodePriority>
 8003378:	4602      	mov	r2, r0
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff5f 	bl	8003244 <__NVIC_SetPriority>
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff35 	bl	800320c <__NVIC_EnableIRQ>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffa2 	bl	80032fc <SysTick_Config>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e043      	b.n	8003462 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_DMA_Init+0xa8>)
 80033e2:	4413      	add	r3, r2
 80033e4:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_DMA_Init+0xac>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	009a      	lsls	r2, r3, #2
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_DMA_Init+0xb0>)
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800340e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003412:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800341c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4313      	orrs	r3, r2
 8003440:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr
 800346c:	bffdfff8 	.word	0xbffdfff8
 8003470:	cccccccd 	.word	0xcccccccd
 8003474:	40020000 	.word	0x40020000

08003478 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Start_IT+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e04a      	b.n	800352e <HAL_DMA_Start_IT+0xb6>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d13a      	bne.n	8003520 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f9ae 	bl	8003830 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 020e 	orr.w	r2, r2, #14
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e00f      	b.n	800350e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0204 	bic.w	r2, r2, #4
 80034fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 020a 	orr.w	r2, r2, #10
 800350c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e005      	b.n	800352c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003528:	2302      	movs	r3, #2
 800352a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800354a:	2b02      	cmp	r3, #2
 800354c:	d005      	beq.n	800355a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e051      	b.n	80035fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 020e 	bic.w	r2, r2, #14
 8003568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_DMA_Abort_IT+0xd0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d029      	beq.n	80035d8 <HAL_DMA_Abort_IT+0xa0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_DMA_Abort_IT+0xd4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d022      	beq.n	80035d4 <HAL_DMA_Abort_IT+0x9c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_DMA_Abort_IT+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d01a      	beq.n	80035ce <HAL_DMA_Abort_IT+0x96>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_DMA_Abort_IT+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d012      	beq.n	80035c8 <HAL_DMA_Abort_IT+0x90>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_DMA_Abort_IT+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00a      	beq.n	80035c2 <HAL_DMA_Abort_IT+0x8a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_DMA_Abort_IT+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d102      	bne.n	80035bc <HAL_DMA_Abort_IT+0x84>
 80035b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035ba:	e00e      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035c0:	e00b      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c6:	e008      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035cc:	e005      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	e002      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035d4:	2310      	movs	r3, #16
 80035d6:	e000      	b.n	80035da <HAL_DMA_Abort_IT+0xa2>
 80035d8:	2301      	movs	r3, #1
 80035da:	4a11      	ldr	r2, [pc, #68]	; (8003620 <HAL_DMA_Abort_IT+0xe8>)
 80035dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
    } 
  }
  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40020008 	.word	0x40020008
 800360c:	4002001c 	.word	0x4002001c
 8003610:	40020030 	.word	0x40020030
 8003614:	40020044 	.word	0x40020044
 8003618:	40020058 	.word	0x40020058
 800361c:	4002006c 	.word	0x4002006c
 8003620:	40020000 	.word	0x40020000

08003624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2204      	movs	r2, #4
 8003642:	409a      	lsls	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04f      	beq.n	80036ec <HAL_DMA_IRQHandler+0xc8>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0204 	bic.w	r2, r2, #4
 8003672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a66      	ldr	r2, [pc, #408]	; (8003814 <HAL_DMA_IRQHandler+0x1f0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d029      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xae>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_DMA_IRQHandler+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0xaa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_DMA_IRQHandler+0x1f8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xa4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a62      	ldr	r2, [pc, #392]	; (8003820 <HAL_DMA_IRQHandler+0x1fc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d012      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x9e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a60      	ldr	r2, [pc, #384]	; (8003824 <HAL_DMA_IRQHandler+0x200>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00a      	beq.n	80036bc <HAL_DMA_IRQHandler+0x98>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a5f      	ldr	r2, [pc, #380]	; (8003828 <HAL_DMA_IRQHandler+0x204>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <HAL_DMA_IRQHandler+0x92>
 80036b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036b4:	e00e      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036ba:	e00b      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036c0:	e008      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036c6:	e005      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036cc:	e002      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036ce:	2340      	movs	r3, #64	; 0x40
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036d2:	2304      	movs	r3, #4
 80036d4:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_DMA_IRQHandler+0x208>)
 80036d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8094 	beq.w	800380a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036ea:	e08e      	b.n	800380a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2202      	movs	r2, #2
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d056      	beq.n	80037aa <HAL_DMA_IRQHandler+0x186>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d051      	beq.n	80037aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020a 	bic.w	r2, r2, #10
 8003722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a38      	ldr	r2, [pc, #224]	; (8003814 <HAL_DMA_IRQHandler+0x1f0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d029      	beq.n	800378a <HAL_DMA_IRQHandler+0x166>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a37      	ldr	r2, [pc, #220]	; (8003818 <HAL_DMA_IRQHandler+0x1f4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <HAL_DMA_IRQHandler+0x162>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a35      	ldr	r2, [pc, #212]	; (800381c <HAL_DMA_IRQHandler+0x1f8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01a      	beq.n	8003780 <HAL_DMA_IRQHandler+0x15c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a34      	ldr	r2, [pc, #208]	; (8003820 <HAL_DMA_IRQHandler+0x1fc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d012      	beq.n	800377a <HAL_DMA_IRQHandler+0x156>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a32      	ldr	r2, [pc, #200]	; (8003824 <HAL_DMA_IRQHandler+0x200>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00a      	beq.n	8003774 <HAL_DMA_IRQHandler+0x150>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <HAL_DMA_IRQHandler+0x204>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d102      	bne.n	800376e <HAL_DMA_IRQHandler+0x14a>
 8003768:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800376c:	e00e      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 800376e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003772:	e00b      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 8003774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003778:	e008      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 800377a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800377e:	e005      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 8003780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003784:	e002      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 8003786:	2320      	movs	r3, #32
 8003788:	e000      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 800378a:	2302      	movs	r3, #2
 800378c:	4a27      	ldr	r2, [pc, #156]	; (800382c <HAL_DMA_IRQHandler+0x208>)
 800378e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d034      	beq.n	800380a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037a8:	e02f      	b.n	800380a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2208      	movs	r2, #8
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d028      	beq.n	800380c <HAL_DMA_IRQHandler+0x1e8>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d023      	beq.n	800380c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020e 	bic.w	r2, r2, #14
 80037d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
    }
  }
  return;
 800380a:	bf00      	nop
 800380c:	bf00      	nop
}
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40020008 	.word	0x40020008
 8003818:	4002001c 	.word	0x4002001c
 800381c:	40020030 	.word	0x40020030
 8003820:	40020044 	.word	0x40020044
 8003824:	40020058 	.word	0x40020058
 8003828:	4002006c 	.word	0x4002006c
 800382c:	40020000 	.word	0x40020000

08003830 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d108      	bne.n	8003870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800386e:	e007      	b.n	8003880 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b08b      	sub	sp, #44	; 0x2c
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003896:	2300      	movs	r3, #0
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800389a:	2300      	movs	r3, #0
 800389c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389e:	e169      	b.n	8003b74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038a0:	2201      	movs	r2, #1
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	f040 8158 	bne.w	8003b6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a9a      	ldr	r2, [pc, #616]	; (8003b2c <HAL_GPIO_Init+0x2a0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d05e      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038c8:	4a98      	ldr	r2, [pc, #608]	; (8003b2c <HAL_GPIO_Init+0x2a0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d875      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038ce:	4a98      	ldr	r2, [pc, #608]	; (8003b30 <HAL_GPIO_Init+0x2a4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d058      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038d4:	4a96      	ldr	r2, [pc, #600]	; (8003b30 <HAL_GPIO_Init+0x2a4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d86f      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038da:	4a96      	ldr	r2, [pc, #600]	; (8003b34 <HAL_GPIO_Init+0x2a8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d052      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038e0:	4a94      	ldr	r2, [pc, #592]	; (8003b34 <HAL_GPIO_Init+0x2a8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d869      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038e6:	4a94      	ldr	r2, [pc, #592]	; (8003b38 <HAL_GPIO_Init+0x2ac>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04c      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038ec:	4a92      	ldr	r2, [pc, #584]	; (8003b38 <HAL_GPIO_Init+0x2ac>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d863      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038f2:	4a92      	ldr	r2, [pc, #584]	; (8003b3c <HAL_GPIO_Init+0x2b0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d046      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
 80038f8:	4a90      	ldr	r2, [pc, #576]	; (8003b3c <HAL_GPIO_Init+0x2b0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d85d      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 80038fe:	2b12      	cmp	r3, #18
 8003900:	d82a      	bhi.n	8003958 <HAL_GPIO_Init+0xcc>
 8003902:	2b12      	cmp	r3, #18
 8003904:	d859      	bhi.n	80039ba <HAL_GPIO_Init+0x12e>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <HAL_GPIO_Init+0x80>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003987 	.word	0x08003987
 8003910:	08003961 	.word	0x08003961
 8003914:	08003973 	.word	0x08003973
 8003918:	080039b5 	.word	0x080039b5
 800391c:	080039bb 	.word	0x080039bb
 8003920:	080039bb 	.word	0x080039bb
 8003924:	080039bb 	.word	0x080039bb
 8003928:	080039bb 	.word	0x080039bb
 800392c:	080039bb 	.word	0x080039bb
 8003930:	080039bb 	.word	0x080039bb
 8003934:	080039bb 	.word	0x080039bb
 8003938:	080039bb 	.word	0x080039bb
 800393c:	080039bb 	.word	0x080039bb
 8003940:	080039bb 	.word	0x080039bb
 8003944:	080039bb 	.word	0x080039bb
 8003948:	080039bb 	.word	0x080039bb
 800394c:	080039bb 	.word	0x080039bb
 8003950:	08003969 	.word	0x08003969
 8003954:	0800397d 	.word	0x0800397d
 8003958:	4a79      	ldr	r2, [pc, #484]	; (8003b40 <HAL_GPIO_Init+0x2b4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800395e:	e02c      	b.n	80039ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	623b      	str	r3, [r7, #32]
          break;
 8003966:	e029      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	623b      	str	r3, [r7, #32]
          break;
 8003970:	e024      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	3308      	adds	r3, #8
 8003978:	623b      	str	r3, [r7, #32]
          break;
 800397a:	e01f      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	330c      	adds	r3, #12
 8003982:	623b      	str	r3, [r7, #32]
          break;
 8003984:	e01a      	b.n	80039bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d102      	bne.n	8003994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800398e:	2304      	movs	r3, #4
 8003990:	623b      	str	r3, [r7, #32]
          break;
 8003992:	e013      	b.n	80039bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800399c:	2308      	movs	r3, #8
 800399e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	611a      	str	r2, [r3, #16]
          break;
 80039a6:	e009      	b.n	80039bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039a8:	2308      	movs	r3, #8
 80039aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	615a      	str	r2, [r3, #20]
          break;
 80039b2:	e003      	b.n	80039bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039b4:	2300      	movs	r3, #0
 80039b6:	623b      	str	r3, [r7, #32]
          break;
 80039b8:	e000      	b.n	80039bc <HAL_GPIO_Init+0x130>
          break;
 80039ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2bff      	cmp	r3, #255	; 0xff
 80039c0:	d801      	bhi.n	80039c6 <HAL_GPIO_Init+0x13a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_Init+0x13e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2bff      	cmp	r3, #255	; 0xff
 80039d0:	d802      	bhi.n	80039d8 <HAL_GPIO_Init+0x14c>
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	e002      	b.n	80039de <HAL_GPIO_Init+0x152>
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	3b08      	subs	r3, #8
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	210f      	movs	r1, #15
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	401a      	ands	r2, r3
 80039f0:	6a39      	ldr	r1, [r7, #32]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	431a      	orrs	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80b1 	beq.w	8003b6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a0c:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4a4c      	ldr	r2, [pc, #304]	; (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6193      	str	r3, [r2, #24]
 8003a18:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_GPIO_Init+0x2b8>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a24:	4a48      	ldr	r2, [pc, #288]	; (8003b48 <HAL_GPIO_Init+0x2bc>)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4013      	ands	r3, r2
 8003a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <HAL_GPIO_Init+0x2c0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_GPIO_Init+0x1ec>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a3f      	ldr	r2, [pc, #252]	; (8003b50 <HAL_GPIO_Init+0x2c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00d      	beq.n	8003a74 <HAL_GPIO_Init+0x1e8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a3e      	ldr	r2, [pc, #248]	; (8003b54 <HAL_GPIO_Init+0x2c8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d007      	beq.n	8003a70 <HAL_GPIO_Init+0x1e4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a3d      	ldr	r2, [pc, #244]	; (8003b58 <HAL_GPIO_Init+0x2cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_GPIO_Init+0x1e0>
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e006      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	e004      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e002      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_GPIO_Init+0x1ee>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7c:	f002 0203 	and.w	r2, r2, #3
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	4093      	lsls	r3, r2
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a8a:	492f      	ldr	r1, [pc, #188]	; (8003b48 <HAL_GPIO_Init+0x2bc>)
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	3302      	adds	r3, #2
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	492c      	ldr	r1, [pc, #176]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ab2:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	4928      	ldr	r1, [pc, #160]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d006      	beq.n	8003ada <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003acc:	4b23      	ldr	r3, [pc, #140]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4922      	ldr	r1, [pc, #136]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
 8003ad8:	e006      	b.n	8003ae8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	491e      	ldr	r1, [pc, #120]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4918      	ldr	r1, [pc, #96]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b02:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	4914      	ldr	r1, [pc, #80]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d021      	beq.n	8003b60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	490e      	ldr	r1, [pc, #56]	; (8003b5c <HAL_GPIO_Init+0x2d0>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60cb      	str	r3, [r1, #12]
 8003b28:	e021      	b.n	8003b6e <HAL_GPIO_Init+0x2e2>
 8003b2a:	bf00      	nop
 8003b2c:	10320000 	.word	0x10320000
 8003b30:	10310000 	.word	0x10310000
 8003b34:	10220000 	.word	0x10220000
 8003b38:	10210000 	.word	0x10210000
 8003b3c:	10120000 	.word	0x10120000
 8003b40:	10110000 	.word	0x10110000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	40010c00 	.word	0x40010c00
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400
 8003b5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	4909      	ldr	r1, [pc, #36]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	3301      	adds	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f47f ae8e 	bne.w	80038a0 <HAL_GPIO_Init+0x14>
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	372c      	adds	r7, #44	; 0x2c
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	40010400 	.word	0x40010400

08003b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e12b      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe fdb4 	bl	8002728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f001 fc36 	bl	8005468 <HAL_RCC_GetPCLK1Freq>
 8003bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a81      	ldr	r2, [pc, #516]	; (8003e08 <HAL_I2C_Init+0x274>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d807      	bhi.n	8003c18 <HAL_I2C_Init+0x84>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a80      	ldr	r2, [pc, #512]	; (8003e0c <HAL_I2C_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e006      	b.n	8003c26 <HAL_I2C_Init+0x92>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a7d      	ldr	r2, [pc, #500]	; (8003e10 <HAL_I2C_Init+0x27c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bf94      	ite	ls
 8003c20:	2301      	movls	r3, #1
 8003c22:	2300      	movhi	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0e7      	b.n	8003dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a78      	ldr	r2, [pc, #480]	; (8003e14 <HAL_I2C_Init+0x280>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	0c9b      	lsrs	r3, r3, #18
 8003c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a6a      	ldr	r2, [pc, #424]	; (8003e08 <HAL_I2C_Init+0x274>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d802      	bhi.n	8003c68 <HAL_I2C_Init+0xd4>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	3301      	adds	r3, #1
 8003c66:	e009      	b.n	8003c7c <HAL_I2C_Init+0xe8>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	4a69      	ldr	r2, [pc, #420]	; (8003e18 <HAL_I2C_Init+0x284>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	099b      	lsrs	r3, r3, #6
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	495c      	ldr	r1, [pc, #368]	; (8003e08 <HAL_I2C_Init+0x274>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d819      	bhi.n	8003cd0 <HAL_I2C_Init+0x13c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1e59      	subs	r1, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003caa:	1c59      	adds	r1, r3, #1
 8003cac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_I2C_Init+0x138>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1e59      	subs	r1, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	e051      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003ccc:	2304      	movs	r3, #4
 8003cce:	e04f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d111      	bne.n	8003cfc <HAL_I2C_Init+0x168>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1e58      	subs	r0, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6859      	ldr	r1, [r3, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e012      	b.n	8003d22 <HAL_I2C_Init+0x18e>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf0c      	ite	eq
 8003d1c:	2301      	moveq	r3, #1
 8003d1e:	2300      	movne	r3, #0
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Init+0x196>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e022      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10e      	bne.n	8003d50 <HAL_I2C_Init+0x1bc>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1e58      	subs	r0, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d44:	3301      	adds	r3, #1
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4e:	e00f      	b.n	8003d70 <HAL_I2C_Init+0x1dc>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6809      	ldr	r1, [r1, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6911      	ldr	r1, [r2, #16]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68d2      	ldr	r2, [r2, #12]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	000186a0 	.word	0x000186a0
 8003e0c:	001e847f 	.word	0x001e847f
 8003e10:	003d08ff 	.word	0x003d08ff
 8003e14:	431bde83 	.word	0x431bde83
 8003e18:	10624dd3 	.word	0x10624dd3

08003e1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	461a      	mov	r2, r3
 8003e28:	460b      	mov	r3, r1
 8003e2a:	817b      	strh	r3, [r7, #10]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e30:	f7fe fdc0 	bl	80029b4 <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 80e0 	bne.w	8004004 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2319      	movs	r3, #25
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4970      	ldr	r1, [pc, #448]	; (8004010 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fdb0 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e0d3      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_I2C_Master_Transmit+0x50>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e0cc      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d007      	beq.n	8003e92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2221      	movs	r2, #33	; 0x21
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2210      	movs	r2, #16
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	893a      	ldrh	r2, [r7, #8]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a50      	ldr	r2, [pc, #320]	; (8004014 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ed2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ed4:	8979      	ldrh	r1, [r7, #10]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fc40 	bl	8004760 <I2C_MasterRequestWrite>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e08d      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f00:	e066      	b.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fe2a 	bl	8004b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e06b      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_I2C_Master_Transmit+0x188>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d017      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	6a39      	ldr	r1, [r7, #32]
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fe1a 	bl	8004be2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00d      	beq.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e01a      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d194      	bne.n	8003f02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	00100002 	.word	0x00100002
 8004014:	ffff0000 	.word	0xffff0000

08004018 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	607a      	str	r2, [r7, #4]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	460b      	mov	r3, r1
 8004026:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004028:	f7fe fcc4 	bl	80029b4 <HAL_GetTick>
 800402c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800402e:	2301      	movs	r3, #1
 8004030:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b20      	cmp	r3, #32
 800403c:	f040 8111 	bne.w	8004262 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2319      	movs	r3, #25
 8004046:	2201      	movs	r2, #1
 8004048:	4988      	ldr	r1, [pc, #544]	; (800426c <HAL_I2C_IsDeviceReady+0x254>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fcb2 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	e104      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2C_IsDeviceReady+0x50>
 8004064:	2302      	movs	r3, #2
 8004066:	e0fd      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b01      	cmp	r3, #1
 800407c:	d007      	beq.n	800408e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800409c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2224      	movs	r2, #36	; 0x24
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a70      	ldr	r2, [pc, #448]	; (8004270 <HAL_I2C_IsDeviceReady+0x258>)
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fc70 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e8:	d103      	bne.n	80040f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e0b6      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004104:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004106:	f7fe fc55 	bl	80029b4 <HAL_GetTick>
 800410a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800413a:	e025      	b.n	8004188 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe fc3a 	bl	80029b4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <HAL_I2C_IsDeviceReady+0x13a>
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d103      	bne.n	800415a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	22a0      	movs	r2, #160	; 0xa0
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b02      	cmp	r3, #2
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2ba0      	cmp	r3, #160	; 0xa0
 8004192:	d005      	beq.n	80041a0 <HAL_I2C_IsDeviceReady+0x188>
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_I2C_IsDeviceReady+0x188>
 800419a:	7dbb      	ldrb	r3, [r7, #22]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0cd      	beq.n	800413c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d129      	bne.n	800420a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	2319      	movs	r3, #25
 80041e2:	2201      	movs	r2, #1
 80041e4:	4921      	ldr	r1, [pc, #132]	; (800426c <HAL_I2C_IsDeviceReady+0x254>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fbe4 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e036      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e02c      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004218:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004222:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2319      	movs	r3, #25
 800422a:	2201      	movs	r2, #1
 800422c:	490f      	ldr	r1, [pc, #60]	; (800426c <HAL_I2C_IsDeviceReady+0x254>)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fbc0 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e012      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3301      	adds	r3, #1
 8004242:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	429a      	cmp	r2, r3
 800424a:	f4ff af32 	bcc.w	80040b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	00100002 	.word	0x00100002
 8004270:	ffff0000 	.word	0xffff0000

08004274 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004296:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_I2C_ER_IRQHandler+0x5e>
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d010      	beq.n	80042d2 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042c0:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	0a5b      	lsrs	r3, r3, #9
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00e      	beq.n	80042fc <HAL_I2C_ER_IRQHandler+0x88>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80042fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	0a9b      	lsrs	r3, r3, #10
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d03f      	beq.n	8004388 <HAL_I2C_ER_IRQHandler+0x114>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d039      	beq.n	8004388 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004314:	7efb      	ldrb	r3, [r7, #27]
 8004316:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800432e:	7ebb      	ldrb	r3, [r7, #26]
 8004330:	2b20      	cmp	r3, #32
 8004332:	d112      	bne.n	800435a <HAL_I2C_ER_IRQHandler+0xe6>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_I2C_ER_IRQHandler+0xe6>
 800433a:	7cfb      	ldrb	r3, [r7, #19]
 800433c:	2b21      	cmp	r3, #33	; 0x21
 800433e:	d008      	beq.n	8004352 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b29      	cmp	r3, #41	; 0x29
 8004344:	d005      	beq.n	8004352 <HAL_I2C_ER_IRQHandler+0xde>
 8004346:	7cfb      	ldrb	r3, [r7, #19]
 8004348:	2b28      	cmp	r3, #40	; 0x28
 800434a:	d106      	bne.n	800435a <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b21      	cmp	r3, #33	; 0x21
 8004350:	d103      	bne.n	800435a <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f862 	bl	800441c <I2C_Slave_AF>
 8004358:	e016      	b.n	8004388 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004362:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f043 0304 	orr.w	r3, r3, #4
 800436a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800436c:	7efb      	ldrb	r3, [r7, #27]
 800436e:	2b10      	cmp	r3, #16
 8004370:	d002      	beq.n	8004378 <HAL_I2C_ER_IRQHandler+0x104>
 8004372:	7efb      	ldrb	r3, [r7, #27]
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d107      	bne.n	8004388 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004386:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	0adb      	lsrs	r3, r3, #11
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00e      	beq.n	80043b2 <HAL_I2C_ER_IRQHandler+0x13e>
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	f043 0308 	orr.w	r3, r3, #8
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043b0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f899 	bl	80044fc <I2C_ITError>
  }
}
 80043ca:	bf00      	nop
 80043cc:	3728      	adds	r7, #40	; 0x28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bc80      	pop	{r7}
 80043e2:	4770      	bx	lr

080043e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr
	...

0800441c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d002      	beq.n	800443e <I2C_Slave_AF+0x22>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d129      	bne.n	8004492 <I2C_Slave_AF+0x76>
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b28      	cmp	r3, #40	; 0x28
 8004442:	d126      	bne.n	8004492 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a2c      	ldr	r2, [pc, #176]	; (80044f8 <I2C_Slave_AF+0xdc>)
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004458:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004462:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ffaa 	bl	80043e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004490:	e02e      	b.n	80044f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b21      	cmp	r3, #33	; 0x21
 8004496:	d126      	bne.n	80044e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <I2C_Slave_AF+0xdc>)
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2221      	movs	r2, #33	; 0x21
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff77 	bl	80043d2 <HAL_I2C_SlaveTxCpltCallback>
}
 80044e4:	e004      	b.n	80044f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ee:	615a      	str	r2, [r3, #20]
}
 80044f0:	bf00      	nop
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	ffff0000 	.word	0xffff0000

080044fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004512:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004514:	7bbb      	ldrb	r3, [r7, #14]
 8004516:	2b10      	cmp	r3, #16
 8004518:	d002      	beq.n	8004520 <I2C_ITError+0x24>
 800451a:	7bbb      	ldrb	r3, [r7, #14]
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d10a      	bne.n	8004536 <I2C_ITError+0x3a>
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b22      	cmp	r3, #34	; 0x22
 8004524:	d107      	bne.n	8004536 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004534:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800453c:	2b28      	cmp	r3, #40	; 0x28
 800453e:	d107      	bne.n	8004550 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2228      	movs	r2, #40	; 0x28
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800454e:	e015      	b.n	800457c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d00a      	beq.n	8004576 <I2C_ITError+0x7a>
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	2b60      	cmp	r3, #96	; 0x60
 8004564:	d007      	beq.n	8004576 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2220      	movs	r2, #32
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458a:	d161      	bne.n	8004650 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d020      	beq.n	80045ea <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	4a6a      	ldr	r2, [pc, #424]	; (8004758 <I2C_ITError+0x25c>)
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe ffbf 	bl	8003538 <HAL_DMA_Abort_IT>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8089 	beq.w	80046d4 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e4:	4610      	mov	r0, r2
 80045e6:	4798      	blx	r3
 80045e8:	e074      	b.n	80046d4 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	4a5a      	ldr	r2, [pc, #360]	; (8004758 <I2C_ITError+0x25c>)
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fe ff9e 	bl	8003538 <HAL_DMA_Abort_IT>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d068      	beq.n	80046d4 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d10b      	bne.n	8004628 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800464a:	4610      	mov	r0, r2
 800464c:	4798      	blx	r3
 800464e:	e041      	b.n	80046d4 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d125      	bne.n	80046a8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d10b      	bne.n	8004690 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff feb1 	bl	8004408 <HAL_I2C_AbortCpltCallback>
 80046a6:	e015      	b.n	80046d4 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	2b40      	cmp	r3, #64	; 0x40
 80046b4:	d10b      	bne.n	80046ce <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fe91 	bl	80043f6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10e      	bne.n	8004702 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b04      	cmp	r3, #4
 8004724:	d113      	bne.n	800474e <I2C_ITError+0x252>
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b28      	cmp	r3, #40	; 0x28
 800472a:	d110      	bne.n	800474e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <I2C_ITError+0x260>)
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff fe4b 	bl	80043e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	08004865 	.word	0x08004865
 800475c:	ffff0000 	.word	0xffff0000

08004760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	460b      	mov	r3, r1
 800476e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d006      	beq.n	800478a <I2C_MasterRequestWrite+0x2a>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d003      	beq.n	800478a <I2C_MasterRequestWrite+0x2a>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004788:	d108      	bne.n	800479c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e00b      	b.n	80047b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a0:	2b12      	cmp	r3, #18
 80047a2:	d107      	bne.n	80047b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f8f7 	bl	80049b4 <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00d      	beq.n	80047e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047da:	d103      	bne.n	80047e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e035      	b.n	8004854 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f0:	d108      	bne.n	8004804 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004800:	611a      	str	r2, [r3, #16]
 8004802:	e01b      	b.n	800483c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004804:	897b      	ldrh	r3, [r7, #10]
 8004806:	11db      	asrs	r3, r3, #7
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f003 0306 	and.w	r3, r3, #6
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f063 030f 	orn	r3, r3, #15
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	490e      	ldr	r1, [pc, #56]	; (800485c <I2C_MasterRequestWrite+0xfc>)
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f91d 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e010      	b.n	8004854 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004832:	897b      	ldrh	r3, [r7, #10]
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4907      	ldr	r1, [pc, #28]	; (8004860 <I2C_MasterRequestWrite+0x100>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f90d 	bl	8004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	00010008 	.word	0x00010008
 8004860:	00010002 	.word	0x00010002

08004864 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800487e:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <I2C_DMAAbort+0x148>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	08db      	lsrs	r3, r3, #3
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <I2C_DMAAbort+0x14c>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	0a1a      	lsrs	r2, r3, #8
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00da      	lsls	r2, r3, #3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80048aa:	e00a      	b.n	80048c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d0ea      	beq.n	8004898 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	2200      	movs	r2, #0
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004904:	2200      	movs	r2, #0
 8004906:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	2200      	movs	r2, #0
 8004916:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0201 	bic.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b60      	cmp	r3, #96	; 0x60
 8004932:	d10e      	bne.n	8004952 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800494a:	6978      	ldr	r0, [r7, #20]
 800494c:	f7ff fd5c 	bl	8004408 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004950:	e027      	b.n	80049a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004958:	2b28      	cmp	r3, #40	; 0x28
 800495a:	d117      	bne.n	800498c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800497a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2228      	movs	r2, #40	; 0x28
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800498a:	e007      	b.n	800499c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800499c:	6978      	ldr	r0, [r7, #20]
 800499e:	f7ff fd2a 	bl	80043f6 <HAL_I2C_ErrorCallback>
}
 80049a2:	bf00      	nop
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000010 	.word	0x20000010
 80049b0:	14f8b589 	.word	0x14f8b589

080049b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c4:	e025      	b.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d021      	beq.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ce:	f7fd fff1 	bl	80029b4 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f043 0220 	orr.w	r2, r3, #32
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e023      	b.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10d      	bne.n	8004a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	43da      	mvns	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	e00c      	b.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4013      	ands	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf0c      	ite	eq
 8004a4a:	2301      	moveq	r3, #1
 8004a4c:	2300      	movne	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	461a      	mov	r2, r3
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d0b6      	beq.n	80049c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a70:	e051      	b.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a80:	d123      	bne.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e046      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d021      	beq.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fd ff6f 	bl	80029b4 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d116      	bne.n	8004b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0220 	orr.w	r2, r3, #32
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e020      	b.n	8004b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	0c1b      	lsrs	r3, r3, #16
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10c      	bne.n	8004b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	e00b      	b.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	43da      	mvns	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	4013      	ands	r3, r2
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	bf14      	ite	ne
 8004b4c:	2301      	movne	r3, #1
 8004b4e:	2300      	moveq	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d18d      	bne.n	8004a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	e02d      	b.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f878 	bl	8004c64 <I2C_IsAcknowledgeFailed>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e02d      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d021      	beq.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fd ff15 	bl	80029b4 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d116      	bne.n	8004bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f043 0220 	orr.w	r2, r3, #32
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e007      	b.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d1ca      	bne.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bee:	e02d      	b.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f837 	bl	8004c64 <I2C_IsAcknowledgeFailed>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e02d      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d021      	beq.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c08:	f7fd fed4 	bl	80029b4 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d302      	bcc.n	8004c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d116      	bne.n	8004c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f043 0220 	orr.w	r2, r3, #32
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e007      	b.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d1ca      	bne.n	8004bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7a:	d11b      	bne.n	8004cb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f043 0204 	orr.w	r2, r3, #4
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e26c      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8087 	beq.w	8004dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce0:	4b92      	ldr	r3, [pc, #584]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d00c      	beq.n	8004d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cec:	4b8f      	ldr	r3, [pc, #572]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d112      	bne.n	8004d1e <HAL_RCC_OscConfig+0x5e>
 8004cf8:	4b8c      	ldr	r3, [pc, #560]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d10b      	bne.n	8004d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d06:	4b89      	ldr	r3, [pc, #548]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d06c      	beq.n	8004dec <HAL_RCC_OscConfig+0x12c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d168      	bne.n	8004dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e246      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x76>
 8004d28:	4b80      	ldr	r3, [pc, #512]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7f      	ldr	r2, [pc, #508]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e02e      	b.n	8004d94 <HAL_RCC_OscConfig+0xd4>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x98>
 8004d3e:	4b7b      	ldr	r3, [pc, #492]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7a      	ldr	r2, [pc, #488]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b78      	ldr	r3, [pc, #480]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a77      	ldr	r2, [pc, #476]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e01d      	b.n	8004d94 <HAL_RCC_OscConfig+0xd4>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0xbc>
 8004d62:	4b72      	ldr	r3, [pc, #456]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a71      	ldr	r2, [pc, #452]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	4b6f      	ldr	r3, [pc, #444]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a6e      	ldr	r2, [pc, #440]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e00b      	b.n	8004d94 <HAL_RCC_OscConfig+0xd4>
 8004d7c:	4b6b      	ldr	r3, [pc, #428]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a6a      	ldr	r2, [pc, #424]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a67      	ldr	r2, [pc, #412]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d013      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fd fe0a 	bl	80029b4 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da4:	f7fd fe06 	bl	80029b4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b64      	cmp	r3, #100	; 0x64
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e1fa      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db6:	4b5d      	ldr	r3, [pc, #372]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0xe4>
 8004dc2:	e014      	b.n	8004dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fdf6 	bl	80029b4 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7fd fdf2 	bl	80029b4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e1e6      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dde:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x10c>
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d063      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dfa:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00b      	beq.n	8004e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e06:	4b49      	ldr	r3, [pc, #292]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d11c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x18c>
 8004e12:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d116      	bne.n	8004e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1e:	4b43      	ldr	r3, [pc, #268]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_RCC_OscConfig+0x176>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e1ba      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e36:	4b3d      	ldr	r3, [pc, #244]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4939      	ldr	r1, [pc, #228]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	e03a      	b.n	8004ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d020      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e54:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_RCC_OscConfig+0x270>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5a:	f7fd fdab 	bl	80029b4 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e62:	f7fd fda7 	bl	80029b4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e19b      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e80:	4b2a      	ldr	r3, [pc, #168]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4927      	ldr	r1, [pc, #156]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]
 8004e94:	e015      	b.n	8004ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_RCC_OscConfig+0x270>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fd fd8a 	bl	80029b4 <HAL_GetTick>
 8004ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea4:	f7fd fd86 	bl	80029b4 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e17a      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d03a      	beq.n	8004f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d019      	beq.n	8004f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004edc:	f7fd fd6a 	bl	80029b4 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee4:	f7fd fd66 	bl	80029b4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e15a      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f02:	2001      	movs	r0, #1
 8004f04:	f000 fac4 	bl	8005490 <RCC_Delay>
 8004f08:	e01c      	b.n	8004f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <HAL_RCC_OscConfig+0x274>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f10:	f7fd fd50 	bl	80029b4 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f16:	e00f      	b.n	8004f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f18:	f7fd fd4c 	bl	80029b4 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d908      	bls.n	8004f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e140      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	42420000 	.word	0x42420000
 8004f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f38:	4b9e      	ldr	r3, [pc, #632]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e9      	bne.n	8004f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80a6 	beq.w	800509e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f56:	4b97      	ldr	r3, [pc, #604]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f62:	4b94      	ldr	r3, [pc, #592]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	4a93      	ldr	r2, [pc, #588]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	61d3      	str	r3, [r2, #28]
 8004f6e:	4b91      	ldr	r3, [pc, #580]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7e:	4b8e      	ldr	r3, [pc, #568]	; (80051b8 <HAL_RCC_OscConfig+0x4f8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d118      	bne.n	8004fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f8a:	4b8b      	ldr	r3, [pc, #556]	; (80051b8 <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a8a      	ldr	r2, [pc, #552]	; (80051b8 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f96:	f7fd fd0d 	bl	80029b4 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9e:	f7fd fd09 	bl	80029b4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b64      	cmp	r3, #100	; 0x64
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e0fd      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb0:	4b81      	ldr	r3, [pc, #516]	; (80051b8 <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x312>
 8004fc4:	4b7b      	ldr	r3, [pc, #492]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	4a7a      	ldr	r2, [pc, #488]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6213      	str	r3, [r2, #32]
 8004fd0:	e02d      	b.n	800502e <HAL_RCC_OscConfig+0x36e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x334>
 8004fda:	4b76      	ldr	r3, [pc, #472]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a75      	ldr	r2, [pc, #468]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6213      	str	r3, [r2, #32]
 8004fe6:	4b73      	ldr	r3, [pc, #460]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a72      	ldr	r2, [pc, #456]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6213      	str	r3, [r2, #32]
 8004ff2:	e01c      	b.n	800502e <HAL_RCC_OscConfig+0x36e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b05      	cmp	r3, #5
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCC_OscConfig+0x356>
 8004ffc:	4b6d      	ldr	r3, [pc, #436]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	4a6c      	ldr	r2, [pc, #432]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005002:	f043 0304 	orr.w	r3, r3, #4
 8005006:	6213      	str	r3, [r2, #32]
 8005008:	4b6a      	ldr	r3, [pc, #424]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6213      	str	r3, [r2, #32]
 8005014:	e00b      	b.n	800502e <HAL_RCC_OscConfig+0x36e>
 8005016:	4b67      	ldr	r3, [pc, #412]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4a66      	ldr	r2, [pc, #408]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	6213      	str	r3, [r2, #32]
 8005022:	4b64      	ldr	r3, [pc, #400]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4a63      	ldr	r2, [pc, #396]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005028:	f023 0304 	bic.w	r3, r3, #4
 800502c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d015      	beq.n	8005062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005036:	f7fd fcbd 	bl	80029b4 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800503e:	f7fd fcb9 	bl	80029b4 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	f241 3288 	movw	r2, #5000	; 0x1388
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0ab      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	4b57      	ldr	r3, [pc, #348]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ee      	beq.n	800503e <HAL_RCC_OscConfig+0x37e>
 8005060:	e014      	b.n	800508c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7fd fca7 	bl	80029b4 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005068:	e00a      	b.n	8005080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800506a:	f7fd fca3 	bl	80029b4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	f241 3288 	movw	r2, #5000	; 0x1388
 8005078:	4293      	cmp	r3, r2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e095      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005080:	4b4c      	ldr	r3, [pc, #304]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1ee      	bne.n	800506a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d105      	bne.n	800509e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005092:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	4a47      	ldr	r2, [pc, #284]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8081 	beq.w	80051aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a8:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d061      	beq.n	8005178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d146      	bne.n	800514a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050bc:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <HAL_RCC_OscConfig+0x4fc>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c2:	f7fd fc77 	bl	80029b4 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ca:	f7fd fc73 	bl	80029b4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e067      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050dc:	4b35      	ldr	r3, [pc, #212]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d108      	bne.n	8005104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050f2:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	492d      	ldr	r1, [pc, #180]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005104:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a19      	ldr	r1, [r3, #32]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	430b      	orrs	r3, r1
 8005116:	4927      	ldr	r1, [pc, #156]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <HAL_RCC_OscConfig+0x4fc>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005122:	f7fd fc47 	bl	80029b4 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512a:	f7fd fc43 	bl	80029b4 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e037      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800513c:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x46a>
 8005148:	e02f      	b.n	80051aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <HAL_RCC_OscConfig+0x4fc>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fd fc30 	bl	80029b4 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fd fc2c 	bl	80029b4 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e020      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x498>
 8005176:	e018      	b.n	80051aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e013      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005184:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <HAL_RCC_OscConfig+0x4f4>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	429a      	cmp	r2, r3
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40007000 	.word	0x40007000
 80051bc:	42420060 	.word	0x42420060

080051c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0d0      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d910      	bls.n	8005204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 0207 	bic.w	r2, r3, #7
 80051ea:	4965      	ldr	r1, [pc, #404]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0307 	and.w	r3, r3, #7
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0b8      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800521c:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4a58      	ldr	r2, [pc, #352]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005226:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005234:	4b53      	ldr	r3, [pc, #332]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a52      	ldr	r2, [pc, #328]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800523a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800523e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b50      	ldr	r3, [pc, #320]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	494d      	ldr	r1, [pc, #308]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d040      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e073      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b3d      	ldr	r3, [pc, #244]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06b      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b39      	ldr	r3, [pc, #228]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4936      	ldr	r1, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052b0:	f7fd fb80 	bl	80029b4 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fd fb7c 	bl	80029b4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e053      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d210      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 0207 	bic.w	r2, r3, #7
 80052f6:	4922      	ldr	r1, [pc, #136]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e032      	b.n	8005376 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4916      	ldr	r1, [pc, #88]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	490e      	ldr	r1, [pc, #56]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534e:	f000 f821 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005352:	4602      	mov	r2, r0
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	490a      	ldr	r1, [pc, #40]	; (8005388 <HAL_RCC_ClockConfig+0x1c8>)
 8005360:	5ccb      	ldrb	r3, [r1, r3]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <HAL_RCC_ClockConfig+0x1cc>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x1d0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd fade 	bl	8002930 <HAL_InitTick>

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40022000 	.word	0x40022000
 8005384:	40021000 	.word	0x40021000
 8005388:	080068bc 	.word	0x080068bc
 800538c:	20000010 	.word	0x20000010
 8005390:	20000014 	.word	0x20000014

08005394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b490      	push	{r4, r7}
 8005396:	b08a      	sub	sp, #40	; 0x28
 8005398:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800539a:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <HAL_RCC_GetSysClockFreq+0xb0>)
 800539c:	1d3c      	adds	r4, r7, #4
 800539e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053a4:	f240 2301 	movw	r3, #513	; 0x201
 80053a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053be:	4b22      	ldr	r3, [pc, #136]	; (8005448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d002      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x40>
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d003      	beq.n	80053da <HAL_RCC_GetSysClockFreq+0x46>
 80053d2:	e02d      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d6:	623b      	str	r3, [r7, #32]
      break;
 80053d8:	e02d      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	0c9b      	lsrs	r3, r3, #18
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053e6:	4413      	add	r3, r2
 80053e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d013      	beq.n	8005420 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <HAL_RCC_GetSysClockFreq+0xb4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0c5b      	lsrs	r3, r3, #17
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005406:	4413      	add	r3, r2
 8005408:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800540c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4a0e      	ldr	r2, [pc, #56]	; (800544c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005412:	fb02 f203 	mul.w	r2, r2, r3
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
 800541e:	e004      	b.n	800542a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005424:	fb02 f303 	mul.w	r3, r2, r3
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	623b      	str	r3, [r7, #32]
      break;
 800542e:	e002      	b.n	8005436 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005432:	623b      	str	r3, [r7, #32]
      break;
 8005434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005436:	6a3b      	ldr	r3, [r7, #32]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bc90      	pop	{r4, r7}
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	08005b50 	.word	0x08005b50
 8005448:	40021000 	.word	0x40021000
 800544c:	007a1200 	.word	0x007a1200
 8005450:	003d0900 	.word	0x003d0900

08005454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <HAL_RCC_GetHCLKFreq+0x10>)
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr
 8005464:	20000010 	.word	0x20000010

08005468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800546c:	f7ff fff2 	bl	8005454 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0a1b      	lsrs	r3, r3, #8
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCC_GetPCLK1Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	080068cc 	.word	0x080068cc

08005490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <RCC_Delay+0x34>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <RCC_Delay+0x38>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	0a5b      	lsrs	r3, r3, #9
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054ac:	bf00      	nop
  }
  while (Delay --);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	1e5a      	subs	r2, r3, #1
 80054b2:	60fa      	str	r2, [r7, #12]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f9      	bne.n	80054ac <RCC_Delay+0x1c>
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr
 80054c4:	20000010 	.word	0x20000010
 80054c8:	10624dd3 	.word	0x10624dd3

080054cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d07d      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ec:	4b4f      	ldr	r3, [pc, #316]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10d      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054f8:	4b4c      	ldr	r3, [pc, #304]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	4a4b      	ldr	r2, [pc, #300]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005502:	61d3      	str	r3, [r2, #28]
 8005504:	4b49      	ldr	r3, [pc, #292]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005510:	2301      	movs	r3, #1
 8005512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	4b46      	ldr	r3, [pc, #280]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d118      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a42      	ldr	r2, [pc, #264]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800552c:	f7fd fa42 	bl	80029b4 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005532:	e008      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005534:	f7fd fa3e 	bl	80029b4 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e06d      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005546:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0f0      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d02e      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	d027      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005570:	4b2e      	ldr	r3, [pc, #184]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800557a:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005582:	2200      	movs	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005586:	4a29      	ldr	r2, [pc, #164]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d014      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005596:	f7fd fa0d 	bl	80029b4 <HAL_GetTick>
 800559a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559c:	e00a      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559e:	f7fd fa09 	bl	80029b4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e036      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b4:	4b1d      	ldr	r3, [pc, #116]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ee      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c0:	4b1a      	ldr	r3, [pc, #104]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4917      	ldr	r1, [pc, #92]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d8:	4b14      	ldr	r3, [pc, #80]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	4a13      	ldr	r2, [pc, #76]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055f0:	4b0e      	ldr	r3, [pc, #56]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	490b      	ldr	r1, [pc, #44]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800560e:	4b07      	ldr	r3, [pc, #28]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	4904      	ldr	r1, [pc, #16]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40021000 	.word	0x40021000
 8005630:	40007000 	.word	0x40007000
 8005634:	42420440 	.word	0x42420440

08005638 <__errno>:
 8005638:	4b01      	ldr	r3, [pc, #4]	; (8005640 <__errno+0x8>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000001c 	.word	0x2000001c

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	2600      	movs	r6, #0
 8005648:	4d0c      	ldr	r5, [pc, #48]	; (800567c <__libc_init_array+0x38>)
 800564a:	4c0d      	ldr	r4, [pc, #52]	; (8005680 <__libc_init_array+0x3c>)
 800564c:	1b64      	subs	r4, r4, r5
 800564e:	10a4      	asrs	r4, r4, #2
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	f000 fa70 	bl	8005b38 <_init>
 8005658:	2600      	movs	r6, #0
 800565a:	4d0a      	ldr	r5, [pc, #40]	; (8005684 <__libc_init_array+0x40>)
 800565c:	4c0a      	ldr	r4, [pc, #40]	; (8005688 <__libc_init_array+0x44>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	f855 3b04 	ldr.w	r3, [r5], #4
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	f855 3b04 	ldr.w	r3, [r5], #4
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	080068fc 	.word	0x080068fc
 8005680:	080068fc 	.word	0x080068fc
 8005684:	080068fc 	.word	0x080068fc
 8005688:	08006900 	.word	0x08006900

0800568c <__itoa>:
 800568c:	1e93      	subs	r3, r2, #2
 800568e:	2b22      	cmp	r3, #34	; 0x22
 8005690:	b510      	push	{r4, lr}
 8005692:	460c      	mov	r4, r1
 8005694:	d904      	bls.n	80056a0 <__itoa+0x14>
 8005696:	2300      	movs	r3, #0
 8005698:	461c      	mov	r4, r3
 800569a:	700b      	strb	r3, [r1, #0]
 800569c:	4620      	mov	r0, r4
 800569e:	bd10      	pop	{r4, pc}
 80056a0:	2a0a      	cmp	r2, #10
 80056a2:	d109      	bne.n	80056b8 <__itoa+0x2c>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	da07      	bge.n	80056b8 <__itoa+0x2c>
 80056a8:	232d      	movs	r3, #45	; 0x2d
 80056aa:	700b      	strb	r3, [r1, #0]
 80056ac:	2101      	movs	r1, #1
 80056ae:	4240      	negs	r0, r0
 80056b0:	4421      	add	r1, r4
 80056b2:	f000 f80d 	bl	80056d0 <__utoa>
 80056b6:	e7f1      	b.n	800569c <__itoa+0x10>
 80056b8:	2100      	movs	r1, #0
 80056ba:	e7f9      	b.n	80056b0 <__itoa+0x24>

080056bc <itoa>:
 80056bc:	f7ff bfe6 	b.w	800568c <__itoa>

080056c0 <memset>:
 80056c0:	4603      	mov	r3, r0
 80056c2:	4402      	add	r2, r0
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d100      	bne.n	80056ca <memset+0xa>
 80056c8:	4770      	bx	lr
 80056ca:	f803 1b01 	strb.w	r1, [r3], #1
 80056ce:	e7f9      	b.n	80056c4 <memset+0x4>

080056d0 <__utoa>:
 80056d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d2:	b08b      	sub	sp, #44	; 0x2c
 80056d4:	4605      	mov	r5, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	466e      	mov	r6, sp
 80056da:	4c1d      	ldr	r4, [pc, #116]	; (8005750 <__utoa+0x80>)
 80056dc:	f104 0c20 	add.w	ip, r4, #32
 80056e0:	4637      	mov	r7, r6
 80056e2:	6820      	ldr	r0, [r4, #0]
 80056e4:	6861      	ldr	r1, [r4, #4]
 80056e6:	3408      	adds	r4, #8
 80056e8:	c703      	stmia	r7!, {r0, r1}
 80056ea:	4564      	cmp	r4, ip
 80056ec:	463e      	mov	r6, r7
 80056ee:	d1f7      	bne.n	80056e0 <__utoa+0x10>
 80056f0:	7921      	ldrb	r1, [r4, #4]
 80056f2:	6820      	ldr	r0, [r4, #0]
 80056f4:	7139      	strb	r1, [r7, #4]
 80056f6:	1e91      	subs	r1, r2, #2
 80056f8:	2922      	cmp	r1, #34	; 0x22
 80056fa:	6038      	str	r0, [r7, #0]
 80056fc:	f04f 0100 	mov.w	r1, #0
 8005700:	d904      	bls.n	800570c <__utoa+0x3c>
 8005702:	7019      	strb	r1, [r3, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	4618      	mov	r0, r3
 8005708:	b00b      	add	sp, #44	; 0x2c
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	1e58      	subs	r0, r3, #1
 800570e:	4684      	mov	ip, r0
 8005710:	fbb5 f7f2 	udiv	r7, r5, r2
 8005714:	fb02 5617 	mls	r6, r2, r7, r5
 8005718:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800571c:	4476      	add	r6, lr
 800571e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005722:	460c      	mov	r4, r1
 8005724:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005728:	462e      	mov	r6, r5
 800572a:	42b2      	cmp	r2, r6
 800572c:	463d      	mov	r5, r7
 800572e:	f101 0101 	add.w	r1, r1, #1
 8005732:	d9ed      	bls.n	8005710 <__utoa+0x40>
 8005734:	2200      	movs	r2, #0
 8005736:	545a      	strb	r2, [r3, r1]
 8005738:	1919      	adds	r1, r3, r4
 800573a:	1aa5      	subs	r5, r4, r2
 800573c:	42aa      	cmp	r2, r5
 800573e:	dae2      	bge.n	8005706 <__utoa+0x36>
 8005740:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005744:	780e      	ldrb	r6, [r1, #0]
 8005746:	3201      	adds	r2, #1
 8005748:	7006      	strb	r6, [r0, #0]
 800574a:	f801 5901 	strb.w	r5, [r1], #-1
 800574e:	e7f4      	b.n	800573a <__utoa+0x6a>
 8005750:	080068d4 	.word	0x080068d4

08005754 <log>:
 8005754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005756:	4604      	mov	r4, r0
 8005758:	460d      	mov	r5, r1
 800575a:	f000 f835 	bl	80057c8 <__ieee754_log>
 800575e:	4b17      	ldr	r3, [pc, #92]	; (80057bc <log+0x68>)
 8005760:	4606      	mov	r6, r0
 8005762:	f993 3000 	ldrsb.w	r3, [r3]
 8005766:	460f      	mov	r7, r1
 8005768:	3301      	adds	r3, #1
 800576a:	d01a      	beq.n	80057a2 <log+0x4e>
 800576c:	4622      	mov	r2, r4
 800576e:	462b      	mov	r3, r5
 8005770:	4620      	mov	r0, r4
 8005772:	4629      	mov	r1, r5
 8005774:	f7fb f942 	bl	80009fc <__aeabi_dcmpun>
 8005778:	b998      	cbnz	r0, 80057a2 <log+0x4e>
 800577a:	2200      	movs	r2, #0
 800577c:	2300      	movs	r3, #0
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fb f931 	bl	80009e8 <__aeabi_dcmpgt>
 8005786:	b960      	cbnz	r0, 80057a2 <log+0x4e>
 8005788:	2200      	movs	r2, #0
 800578a:	2300      	movs	r3, #0
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fb f902 	bl	8000998 <__aeabi_dcmpeq>
 8005794:	b140      	cbz	r0, 80057a8 <log+0x54>
 8005796:	f7ff ff4f 	bl	8005638 <__errno>
 800579a:	2322      	movs	r3, #34	; 0x22
 800579c:	2600      	movs	r6, #0
 800579e:	4f08      	ldr	r7, [pc, #32]	; (80057c0 <log+0x6c>)
 80057a0:	6003      	str	r3, [r0, #0]
 80057a2:	4630      	mov	r0, r6
 80057a4:	4639      	mov	r1, r7
 80057a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057a8:	f7ff ff46 	bl	8005638 <__errno>
 80057ac:	2321      	movs	r3, #33	; 0x21
 80057ae:	6003      	str	r3, [r0, #0]
 80057b0:	4804      	ldr	r0, [pc, #16]	; (80057c4 <log+0x70>)
 80057b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057b6:	f000 b9b9 	b.w	8005b2c <nan>
 80057ba:	bf00      	nop
 80057bc:	20000080 	.word	0x20000080
 80057c0:	fff00000 	.word	0xfff00000
 80057c4:	080068f8 	.word	0x080068f8

080057c8 <__ieee754_log>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	460d      	mov	r5, r1
 80057d6:	b087      	sub	sp, #28
 80057d8:	da24      	bge.n	8005824 <__ieee754_log+0x5c>
 80057da:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80057de:	4304      	orrs	r4, r0
 80057e0:	d108      	bne.n	80057f4 <__ieee754_log+0x2c>
 80057e2:	2200      	movs	r2, #0
 80057e4:	2300      	movs	r3, #0
 80057e6:	2000      	movs	r0, #0
 80057e8:	49cb      	ldr	r1, [pc, #812]	; (8005b18 <__ieee754_log+0x350>)
 80057ea:	f7fa ff97 	bl	800071c <__aeabi_ddiv>
 80057ee:	b007      	add	sp, #28
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	2900      	cmp	r1, #0
 80057f6:	da04      	bge.n	8005802 <__ieee754_log+0x3a>
 80057f8:	f7fa fcae 	bl	8000158 <__aeabi_dsub>
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	e7f3      	b.n	80057ea <__ieee754_log+0x22>
 8005802:	2200      	movs	r2, #0
 8005804:	4bc5      	ldr	r3, [pc, #788]	; (8005b1c <__ieee754_log+0x354>)
 8005806:	f7fa fe5f 	bl	80004c8 <__aeabi_dmul>
 800580a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800580e:	4602      	mov	r2, r0
 8005810:	460b      	mov	r3, r1
 8005812:	460d      	mov	r5, r1
 8005814:	49c2      	ldr	r1, [pc, #776]	; (8005b20 <__ieee754_log+0x358>)
 8005816:	428d      	cmp	r5, r1
 8005818:	dd06      	ble.n	8005828 <__ieee754_log+0x60>
 800581a:	4610      	mov	r0, r2
 800581c:	4619      	mov	r1, r3
 800581e:	f7fa fc9d 	bl	800015c <__adddf3>
 8005822:	e7e4      	b.n	80057ee <__ieee754_log+0x26>
 8005824:	2600      	movs	r6, #0
 8005826:	e7f5      	b.n	8005814 <__ieee754_log+0x4c>
 8005828:	152c      	asrs	r4, r5, #20
 800582a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800582e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8005832:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005836:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800583a:	4426      	add	r6, r4
 800583c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8005840:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8005844:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8005848:	ea41 0305 	orr.w	r3, r1, r5
 800584c:	4610      	mov	r0, r2
 800584e:	4619      	mov	r1, r3
 8005850:	2200      	movs	r2, #0
 8005852:	4bb4      	ldr	r3, [pc, #720]	; (8005b24 <__ieee754_log+0x35c>)
 8005854:	f7fa fc80 	bl	8000158 <__aeabi_dsub>
 8005858:	1cab      	adds	r3, r5, #2
 800585a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800585e:	2b02      	cmp	r3, #2
 8005860:	4682      	mov	sl, r0
 8005862:	468b      	mov	fp, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800586c:	dc53      	bgt.n	8005916 <__ieee754_log+0x14e>
 800586e:	2300      	movs	r3, #0
 8005870:	f7fb f892 	bl	8000998 <__aeabi_dcmpeq>
 8005874:	b1d0      	cbz	r0, 80058ac <__ieee754_log+0xe4>
 8005876:	2c00      	cmp	r4, #0
 8005878:	f000 8122 	beq.w	8005ac0 <__ieee754_log+0x2f8>
 800587c:	4620      	mov	r0, r4
 800587e:	f7fa fdb9 	bl	80003f4 <__aeabi_i2d>
 8005882:	a391      	add	r3, pc, #580	; (adr r3, 8005ac8 <__ieee754_log+0x300>)
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	4606      	mov	r6, r0
 800588a:	460f      	mov	r7, r1
 800588c:	f7fa fe1c 	bl	80004c8 <__aeabi_dmul>
 8005890:	a38f      	add	r3, pc, #572	; (adr r3, 8005ad0 <__ieee754_log+0x308>)
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	f7fa fe13 	bl	80004c8 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	e7b8      	b.n	800581e <__ieee754_log+0x56>
 80058ac:	a38a      	add	r3, pc, #552	; (adr r3, 8005ad8 <__ieee754_log+0x310>)
 80058ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b2:	4650      	mov	r0, sl
 80058b4:	4659      	mov	r1, fp
 80058b6:	f7fa fe07 	bl	80004c8 <__aeabi_dmul>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	2000      	movs	r0, #0
 80058c0:	4999      	ldr	r1, [pc, #612]	; (8005b28 <__ieee754_log+0x360>)
 80058c2:	f7fa fc49 	bl	8000158 <__aeabi_dsub>
 80058c6:	4652      	mov	r2, sl
 80058c8:	4606      	mov	r6, r0
 80058ca:	460f      	mov	r7, r1
 80058cc:	465b      	mov	r3, fp
 80058ce:	4650      	mov	r0, sl
 80058d0:	4659      	mov	r1, fp
 80058d2:	f7fa fdf9 	bl	80004c8 <__aeabi_dmul>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4630      	mov	r0, r6
 80058dc:	4639      	mov	r1, r7
 80058de:	f7fa fdf3 	bl	80004c8 <__aeabi_dmul>
 80058e2:	4606      	mov	r6, r0
 80058e4:	460f      	mov	r7, r1
 80058e6:	b914      	cbnz	r4, 80058ee <__ieee754_log+0x126>
 80058e8:	4632      	mov	r2, r6
 80058ea:	463b      	mov	r3, r7
 80058ec:	e0a2      	b.n	8005a34 <__ieee754_log+0x26c>
 80058ee:	4620      	mov	r0, r4
 80058f0:	f7fa fd80 	bl	80003f4 <__aeabi_i2d>
 80058f4:	a374      	add	r3, pc, #464	; (adr r3, 8005ac8 <__ieee754_log+0x300>)
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	4680      	mov	r8, r0
 80058fc:	4689      	mov	r9, r1
 80058fe:	f7fa fde3 	bl	80004c8 <__aeabi_dmul>
 8005902:	a373      	add	r3, pc, #460	; (adr r3, 8005ad0 <__ieee754_log+0x308>)
 8005904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005908:	4604      	mov	r4, r0
 800590a:	460d      	mov	r5, r1
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fa fdda 	bl	80004c8 <__aeabi_dmul>
 8005914:	e0a7      	b.n	8005a66 <__ieee754_log+0x29e>
 8005916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800591a:	f7fa fc1f 	bl	800015c <__adddf3>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4650      	mov	r0, sl
 8005924:	4659      	mov	r1, fp
 8005926:	f7fa fef9 	bl	800071c <__aeabi_ddiv>
 800592a:	e9cd 0100 	strd	r0, r1, [sp]
 800592e:	4620      	mov	r0, r4
 8005930:	f7fa fd60 	bl	80003f4 <__aeabi_i2d>
 8005934:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	f7fa fdc2 	bl	80004c8 <__aeabi_dmul>
 8005944:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005948:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800594c:	4602      	mov	r2, r0
 800594e:	9305      	str	r3, [sp, #20]
 8005950:	460b      	mov	r3, r1
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	f7fa fdb7 	bl	80004c8 <__aeabi_dmul>
 800595a:	a361      	add	r3, pc, #388	; (adr r3, 8005ae0 <__ieee754_log+0x318>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	4680      	mov	r8, r0
 8005962:	4689      	mov	r9, r1
 8005964:	f7fa fdb0 	bl	80004c8 <__aeabi_dmul>
 8005968:	a35f      	add	r3, pc, #380	; (adr r3, 8005ae8 <__ieee754_log+0x320>)
 800596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596e:	f7fa fbf5 	bl	800015c <__adddf3>
 8005972:	4642      	mov	r2, r8
 8005974:	464b      	mov	r3, r9
 8005976:	f7fa fda7 	bl	80004c8 <__aeabi_dmul>
 800597a:	a35d      	add	r3, pc, #372	; (adr r3, 8005af0 <__ieee754_log+0x328>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f7fa fbec 	bl	800015c <__adddf3>
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	f7fa fd9e 	bl	80004c8 <__aeabi_dmul>
 800598c:	a35a      	add	r3, pc, #360	; (adr r3, 8005af8 <__ieee754_log+0x330>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	f7fa fbe3 	bl	800015c <__adddf3>
 8005996:	4632      	mov	r2, r6
 8005998:	463b      	mov	r3, r7
 800599a:	f7fa fd95 	bl	80004c8 <__aeabi_dmul>
 800599e:	a358      	add	r3, pc, #352	; (adr r3, 8005b00 <__ieee754_log+0x338>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	4606      	mov	r6, r0
 80059a6:	460f      	mov	r7, r1
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	f7fa fd8c 	bl	80004c8 <__aeabi_dmul>
 80059b0:	a355      	add	r3, pc, #340	; (adr r3, 8005b08 <__ieee754_log+0x340>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fbd1 	bl	800015c <__adddf3>
 80059ba:	4642      	mov	r2, r8
 80059bc:	464b      	mov	r3, r9
 80059be:	f7fa fd83 	bl	80004c8 <__aeabi_dmul>
 80059c2:	a353      	add	r3, pc, #332	; (adr r3, 8005b10 <__ieee754_log+0x348>)
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f7fa fbc8 	bl	800015c <__adddf3>
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	f7fa fd7a 	bl	80004c8 <__aeabi_dmul>
 80059d4:	460b      	mov	r3, r1
 80059d6:	4602      	mov	r2, r0
 80059d8:	4639      	mov	r1, r7
 80059da:	4630      	mov	r0, r6
 80059dc:	f7fa fbbe 	bl	800015c <__adddf3>
 80059e0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80059e4:	9b05      	ldr	r3, [sp, #20]
 80059e6:	3551      	adds	r5, #81	; 0x51
 80059e8:	431d      	orrs	r5, r3
 80059ea:	2d00      	cmp	r5, #0
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	dd48      	ble.n	8005a84 <__ieee754_log+0x2bc>
 80059f2:	2200      	movs	r2, #0
 80059f4:	4b4c      	ldr	r3, [pc, #304]	; (8005b28 <__ieee754_log+0x360>)
 80059f6:	4650      	mov	r0, sl
 80059f8:	4659      	mov	r1, fp
 80059fa:	f7fa fd65 	bl	80004c8 <__aeabi_dmul>
 80059fe:	4652      	mov	r2, sl
 8005a00:	465b      	mov	r3, fp
 8005a02:	f7fa fd61 	bl	80004c8 <__aeabi_dmul>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	460f      	mov	r7, r1
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa fba3 	bl	800015c <__adddf3>
 8005a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a1a:	f7fa fd55 	bl	80004c8 <__aeabi_dmul>
 8005a1e:	4680      	mov	r8, r0
 8005a20:	4689      	mov	r9, r1
 8005a22:	b964      	cbnz	r4, 8005a3e <__ieee754_log+0x276>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa fb94 	bl	8000158 <__aeabi_dsub>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4650      	mov	r0, sl
 8005a36:	4659      	mov	r1, fp
 8005a38:	f7fa fb8e 	bl	8000158 <__aeabi_dsub>
 8005a3c:	e6d7      	b.n	80057ee <__ieee754_log+0x26>
 8005a3e:	a322      	add	r3, pc, #136	; (adr r3, 8005ac8 <__ieee754_log+0x300>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a48:	f7fa fd3e 	bl	80004c8 <__aeabi_dmul>
 8005a4c:	a320      	add	r3, pc, #128	; (adr r3, 8005ad0 <__ieee754_log+0x308>)
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	4604      	mov	r4, r0
 8005a54:	460d      	mov	r5, r1
 8005a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a5a:	f7fa fd35 	bl	80004c8 <__aeabi_dmul>
 8005a5e:	4642      	mov	r2, r8
 8005a60:	464b      	mov	r3, r9
 8005a62:	f7fa fb7b 	bl	800015c <__adddf3>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	4639      	mov	r1, r7
 8005a6e:	f7fa fb73 	bl	8000158 <__aeabi_dsub>
 8005a72:	4652      	mov	r2, sl
 8005a74:	465b      	mov	r3, fp
 8005a76:	f7fa fb6f 	bl	8000158 <__aeabi_dsub>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4629      	mov	r1, r5
 8005a82:	e7d9      	b.n	8005a38 <__ieee754_log+0x270>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	4650      	mov	r0, sl
 8005a8a:	4659      	mov	r1, fp
 8005a8c:	f7fa fb64 	bl	8000158 <__aeabi_dsub>
 8005a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a94:	f7fa fd18 	bl	80004c8 <__aeabi_dmul>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	460f      	mov	r7, r1
 8005a9c:	2c00      	cmp	r4, #0
 8005a9e:	f43f af23 	beq.w	80058e8 <__ieee754_log+0x120>
 8005aa2:	a309      	add	r3, pc, #36	; (adr r3, 8005ac8 <__ieee754_log+0x300>)
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aac:	f7fa fd0c 	bl	80004c8 <__aeabi_dmul>
 8005ab0:	a307      	add	r3, pc, #28	; (adr r3, 8005ad0 <__ieee754_log+0x308>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005abe:	e727      	b.n	8005910 <__ieee754_log+0x148>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	e693      	b.n	80057ee <__ieee754_log+0x26>
 8005ac6:	bf00      	nop
 8005ac8:	fee00000 	.word	0xfee00000
 8005acc:	3fe62e42 	.word	0x3fe62e42
 8005ad0:	35793c76 	.word	0x35793c76
 8005ad4:	3dea39ef 	.word	0x3dea39ef
 8005ad8:	55555555 	.word	0x55555555
 8005adc:	3fd55555 	.word	0x3fd55555
 8005ae0:	df3e5244 	.word	0xdf3e5244
 8005ae4:	3fc2f112 	.word	0x3fc2f112
 8005ae8:	96cb03de 	.word	0x96cb03de
 8005aec:	3fc74664 	.word	0x3fc74664
 8005af0:	94229359 	.word	0x94229359
 8005af4:	3fd24924 	.word	0x3fd24924
 8005af8:	55555593 	.word	0x55555593
 8005afc:	3fe55555 	.word	0x3fe55555
 8005b00:	d078c69f 	.word	0xd078c69f
 8005b04:	3fc39a09 	.word	0x3fc39a09
 8005b08:	1d8e78af 	.word	0x1d8e78af
 8005b0c:	3fcc71c5 	.word	0x3fcc71c5
 8005b10:	9997fa04 	.word	0x9997fa04
 8005b14:	3fd99999 	.word	0x3fd99999
 8005b18:	c3500000 	.word	0xc3500000
 8005b1c:	43500000 	.word	0x43500000
 8005b20:	7fefffff 	.word	0x7fefffff
 8005b24:	3ff00000 	.word	0x3ff00000
 8005b28:	3fe00000 	.word	0x3fe00000

08005b2c <nan>:
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	4901      	ldr	r1, [pc, #4]	; (8005b34 <nan+0x8>)
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	7ff80000 	.word	0x7ff80000

08005b38 <_init>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr

08005b44 <_fini>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr
